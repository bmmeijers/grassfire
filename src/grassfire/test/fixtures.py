"""Test cases for Grassfire

"""

from tri.delaunay.helpers import ToPointsAndSegments

# def func():
#     """ """
#     return conv, segments_ct, nodes_ct, escaping_ct

def many_simultaneous():
    """A lot of simultaneous events"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 1), (1, 0), (3, 0), (4, 1), (4, 3), (3, 4), (1, 4), (0, 3), (0, 1)]])
    return conv, 20, 13, 8

def squarish():
    """Squarish"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 1), (1, 0), (2, 0), (3, 1), (3, 2), (2, 3), (1, 3), (0, 2), (0, 1)]])
    return conv, 20, 13, 8

def many_simultaneous():
    """A lot of simultaneous events"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 1), (1, 0), (3, 0), (4, 1), (4, 3), (3, 4), (1, 4), (0, 3), (0, 1)]])
    return conv, 20, 13, 8

def squarish():
    """Squarish"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 1), (1, 0), (2, 0), (3, 1), (3, 2), (2, 3), (1, 3), (0, 2), (0, 1)]])
    return conv, 20, 13, 8

def bottom_circle():
    """Bottom of a circle, with rectangle on top"""
    from math import pi, cos, sin, degrees
    ring = []
    pi2 = 2 * pi
    ct = 8
    alpha = pi / ct
    for i in range(ct + 1):
        ring.append((cos(pi + i * alpha), sin(pi + i * alpha)))
    ring.append(ring[0])
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 24, 16, 9

def simple_square():
    """A simple square"""
    segments = [
        [(0, 0), (5, 0)],
        [(5, 0), (5, 10)],
        [(5, 10), (0, 10)],
        [(0, 10), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 9, 6, 4

def simple_poly():
    """A simple polygon"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 0), (22, 0), (14, 10), (2, 8), (0, 6.5), (0, 0)]])
    return conv, 12, 8, 5

def symmetric_quad():
    """Quad"""
    ring = [(1, 0), (0, 5), (1, 10), (2, 5), (1, 0)]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 8, 5, 4

def diamantlike():
    """A diamant-like shape"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(-15, 0), (-1, 0), (0, -1), (1, 0), (15, 0), (0, 15), (-15, 0)]])
    return conv, 13, 8, 6

def diamant():
    """A diamant-like shape"""
    conv = ToPointsAndSegments()
    conv.add_polygon([[(-1, 0), (0, -1), (1, 0), (0, 5), (-1, 0)]])
    return conv, 8, 5, 4

def two_teeth():
    """A shape with 2 sharp points"""
    conv = ToPointsAndSegments()
    polygon = [[(-2, -1), (-1, 0), (1, 0), (1.5, -.5), (1.2, .7),
                (.4, 1.2), (-.6, 1.1), (-1.7, .7), (-2, -1)]]
    conv.add_polygon(polygon)
    return conv, 22, 15, 7

def triangle():
    """A simple triangle"""
    conv = ToPointsAndSegments()
    conv.add_point((10, 0))
    conv.add_point((-2, 8))
    conv.add_point((-2, -8))
    conv.add_segment((10, 0), (-2, 8))
    conv.add_segment((-2, 8), (-2, -8))
    conv.add_segment((-2, -8), (10, 0))
    return conv, 6, 4, 3

def letter_h_bottom_halfleft():
    """Letter H, at bottom half (with parallel events)"""
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (11, 10)],
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (12, 21)],
        [(12, 21), (12, 11)],
        [(12, 11), (10, 11)],
        [(10, 11), (10, 21)],
        [(10, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 37, 26, 6

def quad():
    """Quad"""
    conv = ToPointsAndSegments()
    conv.add_point((8, 2))
    conv.add_point((4, 5))
    conv.add_point((-2, 8))
    conv.add_point((-2, -8))
    conv.add_point((14, 10))
    conv.add_segment((8, 2), (14, 10))
    conv.add_segment((14, 10), (-2, 8))
    conv.add_segment((-2, 8), (-2, -8))
    conv.add_segment((-2, -8), (8, 2))
    conv.add_segment((4, 5), (14, 10))
    conv.add_segment((-2, -8), (4, 5))
    return conv, 14, 9, 4

def dented():
    """A dented shape """
    ln = [(0, 0), (3, 0), (4, 15), (5, 0), (7, 0), (8, 15), (9, 0), (12, 0), (12, 50), (11, 50), (10, 35), (9, 50), (7, 50), (6, 35), (5, 50), (3, 50), (2, 35), (1, 50), (0, 50), (0, 0)]
    conv = ToPointsAndSegments()
    conv.add_linestring(ln)
    return conv, 56, 38, 9

def dented2():
    """Another dented shape """
    ln = [(-25, 0), (3, 0), (4, 1), (5, 0), (7, 0), (8, 1), (9, 0), (37, 0), (37, 50), (11, 50), (10, 49), (9, 50), (3, 50), (2, 49), (1, 50), (-25, 50), (-25, 0)]
    conv = ToPointsAndSegments()
    conv.add_linestring(ln)
    return conv, 48, 33, 8

def dented3():
    """Another dented shape """
    ln = [(-25, 0), (3, 0), (4, 1), (5, 0), (6,0), (7, 0), (8, 1), (9, 0), (37, 0), (37, 50), (11, 50), (10, 49), (9, 50), (6,50), (3, 50), (2, 49), (1, 50), (-25, 50), (-25, 0)]
    conv = ToPointsAndSegments()
    conv.add_linestring(ln)
    return conv, 54, 35, 10

def tiny_v():
    """ Tiny dent """
    conv = ToPointsAndSegments()
    polygon = [[(-10, 0), (-10., 100.), (100.,100.), (100.,0.), (2., 0.), (1,-1), (0,0), (-10,0)]]
    conv.add_polygon(polygon)
    return conv, 17, 11, 7

def nested_hexagon():
    """Nested hexagon"""
    poly = [
    [(0.86603, -0.5), (0.86603, 0.5), (0.0, 1.0), (-0.86603, 0.5),
        (-0.86603, -0.5), (-0.0, -1.0), (0.86603, -0.5)],
    [(1.29904, -0.75), (1.29904, 0.75), (0.0, 1.5), (-1.29904, 0.75),
        (-1.29904, -0.75), (-0.0, -1.5), (1.29904, -0.75)]
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 36, 23, 6

def nested_hexagon_stretched():
    """A stretched, nested hexagon"""
    poly = [
    [(0.86603, -0.5), (0.86603, 1.5), (0.0, 2.0), (-0.86603, 1.5),
    (-0.86603, -0.5), (-0.0, -1.0), (0.86603, -0.5)],
    [(1.29904, -0.75), (1.29904, 1.75), (0.0, 2.5), (-1.29904, 1.75),
    (-1.29904, -0.75), (-0.0, -1.5), (1.29904, -0.75)]
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 37, 24, 6


def L_0():
    "L shape 0"
    poly = [[(0,0), (1,0), (2,0), (3,0), (4,0),
        (5,0),
        (5,-2),
        (5,-3),
        (5,-4), (5,-5), (6,-5), (6,1),
        (0,1), (0,0)
        ]]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 39, 27, 6


def L_1():
    "L shape 1"
    poly = [[(0,0), (1,0), (2,0), (3,0), (4,0), 
                (5,0), 
                (5,-1), 
                (5,-2), 
                (5,-3), 
                (5,-4), (5,-5), (6,-5), (6,1), 
                (0,1), (0,0)
                ]]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 42, 29, 6


def test_L_2():
    "L shape 2"
    poly = [[ 
    (5,0), (5,-1), (5,-2), (5,-3), (5,-4), (5,-5), (7,-5), (7,0), 
    (8,0), (9,0), (10,0), (11,0),
    (11,1), (5,1), (5,0)
    ]]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 40, 27, 11


def parallel_dent():
    """Simple parallel event"""
    conv = ToPointsAndSegments()

    lines = [
        [[0., 0.], [10., 0.]],
        [[10., 0.], [10., 10.]],
        [[10., 10.], [1., 10.]],
        [[1., 10.], [1., 7.]],
        [[1., 7.], [3., 7.]],
        [[3., 7.], [3. , 6.5]],
        [[3., 6.5], [0., 6.5]],
        [[0., 6.5], [0., 0. ]]
    ]
    for line in lines:
        start, end = map(tuple, line)
        conv.add_point(start)
        conv.add_point(end)
        conv.add_segment(start, end)
    return conv, 23, 16, 6


def unequal_dent():
    """Unequal dent"""
    conv = ToPointsAndSegments()
    lines = [
        [[51046.4, 391515.7], [51046.3, 391516.65]],
        [[51047.95, 391513.05], [51047.55, 391515.85]],
        [[51047.55, 391515.85], [51046.4, 391515.7]],
        [[51047.45, 391516.8], [51046.9, 391520.8]],
        [[51046.3, 391516.65], [51047.45, 391516.8]],
        [[51055, 391521], [51057, 391514]],
        [[51046.9, 391520.8, ], [51055, 391521]],
        [[51047.95, 391513.05], [51057, 391514]]]
    for line in lines:
        start, end = map(tuple, line)
        conv.add_point(start)
        conv.add_point(end)
        conv.add_segment(start, end)
    return conv, 23, 16, 6

def dent_unequal_wavefront_side_flipped_y():
    "Simple parallel event, starting from wavefront side"
    def flip_y(pt):
        return (pt[0], -pt[1])
    conv = ToPointsAndSegments()
    lines = [
        [[51046.4, 391515.7], [51046.3, 391516.65]],
        [[51047.95, 391513.05], [51047.55, 391515.85]],
        [[51047.55, 391515.85], [51046.4, 391515.7]],
        [[51047.45, 391516.8], [51046.9, 391520.8]],
        [[51046.3, 391516.65], [51047.45, 391516.8]],
        [[51055, 391521], [51057, 391514]],
        [[51046.9, 391520.8, ], [51055, 391521]],
        [[51047.95, 391513.05], [51057, 391514]]]
    for line in lines:
        start, end = map(tuple, map(flip_y, line))
        conv.add_point(start)
        conv.add_point(end)
        conv.add_segment(start, end)
    return conv, 23, 16, 6


def simple_square():
    "A simple parallel collapsing square"
    conv = ToPointsAndSegments()
    polygon = [[(0,0), (10,0), (10,10), (0,10), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 8, 5, 4


def simple_rectangle():
    "A simple parallel collapsing rectangle"
    conv = ToPointsAndSegments()
    polygon = [[(0,0), (10,0), (10,5), (0,5), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 9, 6, 4


def dent_unequal_top():
    """dent unequal top"""
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (10., 0), (10,20), (-0.5,20.), (-0.5,11.), (-1,11), (-1,10), (0,10), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8

def dent_unequal_bottom():
    """dent unequal bottom"""
    conv = ToPointsAndSegments()
    polygon = [[(-0.5, 0), (10., 0), (10,20), (0,20.), (0,11.), (-1,11), (-1,10), (-0.5,10), (-0.5,0)]]
    conv.add_polygon(polygon)
    return conv, 21, 14, 8

def diamantlike2():
    """diamant - like"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(-15, 0), (-1, 0), (0, -1), (1, 0), (15, 0), (0, 15), (-15, 0)]])
    return conv, 13, 8, 6

def test_squarish1():
    """squarish 1"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(4, 0), (5, 0), (5, 2), (5,3), (5,4), (5, 10), (4, 10), (4, 0)]])
    return conv, 18, 12, 7

def test_squarish2():
    """squarish 2"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(5, 0), (4, 0), (4, 2), (4,3), (4,4), (4, 10), (5, 10), (5, 0)]])
    return conv, 18, 12, 7

def test_simple_squarish():
    """simple squarish"""
    segments = [
        [(0,0), (5,0)],
        [(5,0), (5,10)],
        [(5,10), (0,10)],
        [(0,10), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 9, 6, 4


def test_koch_rec1():
    """Koch curve recursing once"""
    ring = [
        (0.0,
            0.0),
        (0.4999999999999999,
            0.8660254037844387),
        (-3.3306690738754696e-16,
            1.7320508075688772),
        (0.9999999999999997,
            1.7320508075688776),
        (1.4999999999999993,
            2.5980762113533165),
        (1.9999999999999991,
            1.7320508075688776),
        (2.999999999999999,
            1.7320508075688774),
        (2.499999999999999,
            0.8660254037844389),
        (2.9999999999999987,
            1.1102230246251565e-16),
        (1.9999999999999987,
            2.33486982377251e-16),
        (1.4999999999999982,
            -0.8660254037844382),
        (0.9999999999999984,
            5.551115123125783e-16),
        (0,
            0)]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 24, 13, 12


def test_tudelft_logo():
    "Failing case: missed event (top of E) + wavefront linked list is messed up after parallel events"
    polys = [
    # flame
    [(28.2387, 57.1504), (27.7545962891, 57.0337472656), (27.2828078125, 56.993484375), (26.8394935547, 57.0375167969), (26.4408125, 57.17375), (26.1029236328, 57.4100894531), (25.8419859375, 57.754440625), (25.6741583984, 58.2147089844), (25.6156, 58.7988), (25.6856849121, 59.2881812744), (25.8839386719, 59.7683330078), (26.1934848145, 60.2400170654), (26.597446875, 60.7039953125), (27.6211128906, 61.6118818359), (28.819925, 62.4980875), (30.0588714844, 63.3687072266), (31.202940625, 64.2298359375), (32.1171207031, 65.0875685547), (32.4458111816, 65.5170659912), (32.6664, 65.948), (32.8248125, 66.6851625), (32.7710109375, 66.9061765625), (32.6176, 66.9805), (32.5208703125, 66.9222546875), (32.4679125, 66.7729125), (32.3706484375, 66.5442390625), (32.141, 66.248), (31.1034759766, 65.3984353516), (29.9355515625, 64.7423015625), (28.6692482422, 64.2321388672), (27.3365875, 63.8204875), (24.6002796875, 63.1028796875), (23.2606755859, 62.7020037109), (21.9828, 62.2098), (20.9997419922, 61.7483013672), (19.7656484375, 61.0788734375), (18.4207775391, 60.1820806641), (17.1053875, 59.0384875), (16.5025784912, 58.3680671631), (15.9597365234, 57.6286583984), (15.4943938721, 56.8178317627), (15.1240828125, 55.9331578125), (14.8663356201, 54.9722071045), (14.7386845703, 53.9325501953), (14.7586619385, 52.8117576416), (14.9438, 51.6074), (15.122925, 50.8023), (15.252640625, 50.40393125), (15.3949, 50.2336), (15.5243578125, 50.3437421875), (15.5897375, 50.6433625), (15.6117, 51.6262), (15.6561465332, 52.3362411621), (15.8000691406, 52.9857136719), (16.031892334, 53.5809723145), (16.340040625, 54.128371875), (17.1390105469, 55.1050128906), (18.104375, 55.966475), (20.163871875, 57.547215625), (21.0727964844, 58.3681707031), (21.7777, 59.2773), (22.104725, 59.739675), (22.2554875, 59.862834375), (22.3512, 59.8191), (22.3023, 59.3027), (22.0503148438, 58.5393394531), (21.6885625, 57.836665625), (20.851325, 56.570375), (20.4836242188, 55.9852566406), (20.221725, 55.417821875), (20.1195195312, 54.8573199219), (20.2309, 54.293), (20.6030839844, 53.7075248047), (21.082534375, 53.4021359375), (21.6320488281, 53.3341009766), (22.214425, 53.4606875), (22.7924605469, 53.7391630859), (23.328953125, 54.1267953125), (23.7867003906, 54.5808517578), (24.1285, 55.0586), (24.368925, 55.470225), (24.465971875, 55.57165625), (24.5609, 55.5859), (24.6368625, 55.3106625), (24.5941, 54.791), (24.2621640625, 53.2469984375), (23.7833125, 51.9836375), (23.4592181641, 51.4272880859), (23.0629046875, 50.9052078125), (22.0063, 49.916), (21.566953125, 49.6562546875), (21.130475, 49.4675625), (20.815009375, 49.2970390625), (20.7395761719, 49.2020642578), (20.7387, 49.0918), (20.9814125, 49.0273125), (21.4195, 49.0469), (22.2465202881, 49.156970874), (23.0534919922, 49.3736341797), (23.8374688721, 49.6869346924), (24.5955046875, 50.0869171875), (26.0219681641, 51.1071072266), (27.3093125, 52.3545625), (28.4339677734, 53.7496412109), (29.3723640625, 55.2127015625), (30.1009314453, 56.6641017578), (30.5961, 58.0242), (30.6886375, 58.3597625), (30.6215, 58.5781), (30.509940625, 58.5979578125), (30.381, 58.5274875), (30.0922, 58.2668), (29.2161125, 57.616425), (28.2387, 57.1504)],
        #T
    [(15.5055, 28.7004), (20.8063, 28.7004), (20.8063, 44.1211), (26.7445, 44.1211), (26.7445, 47.8328), (9.5668, 47.8328), (9.5668, 44.1211), (15.5055, 44.1211), (15.5055, 28.7004)],
    # U
    [(38.3852, 32.0156), (39.2659501953, 32.0912681641), (40.0374453125, 32.3105390625), (40.6971646484, 32.6618123047), (41.2425875, 33.1334875), (41.6711931641, 33.7139642578), (41.9804609375, 34.3916421875), (42.1678701172, 35.1549208984), (42.2309, 35.9922), (42.2309, 47.834), (47.5316, 47.834), (47.5316, 35.7273), (47.4732092773, 34.7657740479), (47.3213726562, 33.8784173828), (47.081449707, 33.063555542), (46.7588, 32.3195140625), (46.3587831055, 31.6446184814), (45.8867585938, 31.0371943359), (45.3480860352, 30.4955671631), (44.748125, 30.0180625), (44.0922350586, 29.6030058838), (43.3857757812, 29.2487228516), (41.8425875, 28.7157796875), (40.1614367187, 28.4058373047), (38.3852, 28.3055), (36.6090451172, 28.4058373047), (34.9279234375, 28.7157796875), (33.3847244141, 29.2487228516), (32.6782488525, 29.6030058838), (32.0223375, 30.0180625), (31.4223515381, 30.4955671631), (30.8836521484, 31.0371943359), (30.4116005127, 31.6446184814), (30.0115578125, 32.3195140625), (29.6888852295, 33.063555542), (29.4489439453, 33.8784173828), (29.2970951416, 34.7657740479), (29.2387, 35.7273), (29.2387, 47.834), (34.5395, 47.834), (34.5395, 35.9922), (34.6025257812, 35.1549208984), (34.789925, 34.3916421875), (35.0991804687, 33.7139642578), (35.527775, 33.1334875), (36.0731914062, 32.6618123047), (36.7329125, 32.3105390625), (37.5044210937, 32.0912681641), (38.3852, 32.0156)],
        # D -- exterior
    [(55.4875, 45.5563), (59.4066, 45.5563), (60.2057835693, 45.5178564697), 
        (60.9454076172, 45.4051830078), (61.6265759033, 45.2222653076), 
        (62.2503921875, 44.9730890625), (62.8179602295, 44.6616399658), 
        (63.3303837891, 44.2919037109), (64.1942125, 43.3935125), 
        (64.8507083984, 42.3098009766), (65.3087015625, 41.0726546875), 
        (65.5770220703, 39.7139591797), (65.6645, 38.2656), 
        (65.5770220703, 36.8175103516), (65.3087015625, 35.4592765625), 
        (64.8507083984, 34.2227138672), (64.1942125, 33.1396375), 
        (63.3303837891, 32.2418626953), (62.8179602295, 31.8724056396), 
        (62.2503921875, 31.5612046875), (61.6265759033, 31.3122367432), 
        (60.9454076172, 31.1294787109), (60.2057835693, 31.0169074951), 
        (59.4066, 30.9785), (55.4875, 30.9785), 
        (55.4875, 45.5563)],
    # D -- interior
    [ 
        (52.8324, 28.7004), (59.4059, 28.7004), 
        (60.8560672363, 28.7788331543), 
        (62.1440332031, 29.0031808594), 
        (63.2792692871, 29.3570154785), (64.271246875, 29.823909375), (65.1294373535, 30.3874349121), (65.8633121094, 31.0311644531), (66.4823425293, 31.7386703613), (66.996, 32.493525), (67.4137559082, 33.2793007324), (67.7450816406, 34.0795699219), (68.186328125, 35.657878125), (68.3955105469, 37.0970285156), (68.4484, 38.2656), (68.3955105469, 39.4344525391), (68.186328125, 40.8740328125), (67.7450816406, 42.4528623047), (67.4137559082, 43.2534084717), (66.996, 44.0394625), (66.4823425293, 44.7945895752), (65.8633121094, 45.5023548828), (65.1294373535, 46.1463236084), (64.271246875, 46.7100609375), (63.2792692871, 47.1771320557), (62.1440332031, 47.5311021484), (60.8560672363, 47.7555364014), (59.4059, 47.834), (52.8324, 47.834), (52.8324, 28.7004)],
#          #e
#          #e -- outershell
    [(82.9195, 34.8762), (82.9195, 36.123), (82.8224828125, 37.4505816406), (82.53454375, 38.658784375), (82.0603515625, 39.7298449219), (81.404575, 40.646), (80.5718828125, 41.3894863281), (79.56694375, 41.942540625), (78.3944265625, 42.2873996094), (77.059, 42.4063),(76.2952375244, 42.3687171631), (75.5838064453, 42.2585341797), (74.9242850342, 42.0795993408), (74.3162515625, 41.8357609375), (73.7592843018, 41.5308672607), (73.2529615234, 41.1687666016), (72.3905625, 40.2883375), (71.7256806641, 39.2252599609), (71.2549421875, 38.0103203125), (70.9749732422, 36.6743048828), (70.8824, 35.248), (70.9637001953, 33.823009375), (71.2144078125, 32.50744375), (71.6447333984, 31.3261375), (72.2648875, 30.303925), (73.0850806641, 29.465640625), (73.5733826904, 29.1232322266), (74.1155234375, 28.83611875), (74.7127792236, 28.6074044922), (75.3664263672, 28.44019375), (76.848, 28.3027), (77.9991910156, 28.3734771484), (79.058021875, 28.5858296875), (80.0117917969, 28.9397892578), (80.8478, 29.4353875), (81.5533457031, 30.0726560547), (82.115728125, 30.8516265625), (82.5222464844, 31.7723306641), (82.7602, 32.8348), (80.1098, 32.8348), (79.9671755859, 32.1632625), (79.7567359375, 31.59635), (79.4750064453, 31.1294125), (79.1185125, 30.7578), (78.6837794922, 30.4768625), (78.1673328125, 30.28195), (77.5656978516, 30.1684125), (76.8754, 30.1316), (75.9894021484, 30.2347720703), (75.2544671875, 30.5276953125), (74.6604455078, 30.9854802734), (74.1971875, 31.5832375), (73.8545435547, 32.2960775391), (73.6223640625, 33.0991109375), (73.4904994141, 33.9674482422), (73.4488, 34.8762), (82.9195, 34.8762), (82.9195, 34.8762)],
        #e -- innershell
    [(73.5055, 36.6262), (73.5694832031, 37.3917933594), (73.744890625, 38.118946875), (74.0270464844, 38.7880457031),  (74.411275, 39.379475), (74.8929003906, 39.8736199219), (75.467246875, 40.250865625), (76.1296386719, 40.4915972656), (76.8754, 40.5762), (77.7209189453, 40.4999767578), (78.4335015625, 40.2795953125), (79.0193740234, 39.9274880859), (79.4847625, 39.4560875), (79.8358931641, 38.8778259766), (80.0789921875, 38.2051359375), (80.2202857422, 37.4504498047), (80.266, 36.6262), (73.5055, 36.6262)],
            
        #l
    [(85.973, 28.6992), (88.49331, 28.6992), (88.49331, 47.834), (85.973, 47.834), (85.973, 28.6992), (85.973, 28.6992)],
    #f
    [(96.3883, 28.7004), (96.3883, 40.2512), (99.4605, 40.2512), (99.4605, 42.0027), (96.3883, 42.0027), (96.3883, 44.1512), (96.4229054688, 44.6702857422), (96.52635625, 45.0817171875), (96.6981039062, 45.3973431641), (96.9376, 45.6290125), (97.2442960938, 45.7885740234), (97.61764375, 45.8878765625), (98.5621, 45.9531), (99.8336, 45.875), (99.8336, 47.9656), (98.9403125, 48.1487), (98.0309, 48.2313), (97.1673613281, 48.1749609375), (96.374484375, 48.004725), (95.6659777344, 47.7187640625), (95.05555, 47.31525), (94.5569097656, 46.7923546875), (94.183765625, 46.14825), (93.9498261719, 45.3811078125), (93.8688, 44.4891), (93.8688, 42.0027), (91.273, 42.0027), (91.273, 40.2512), (93.8688, 40.2512), (93.8688, 28.7004), (96.3883, 28.7004)],
        #t
    [(100.908, 42.0027), (100.908, 40.2512), (103.188, 40.2512), (103.188, 31.7734), (103.250359375, 30.4847203125), (103.393189453, 29.8978896484), (103.668125, 29.3748875), (104.118419922, 28.9348306641), (104.787328125, 28.5968359375), (105.718103516, 28.3800201172), (106.954, 28.3035), (107.811, 28.3438375), (108.677, 28.4609), (108.677, 30.3953), (107.35, 30.2371), (106.713328125, 30.322746875), (106.191125, 30.58245), (105.837859375, 31.020353125), (105.708, 31.6406), (105.708, 40.2512), (108.782, 40.2512), (108.782, 42.0027), (105.708, 42.0027), (105.708, 45.634), (103.188, 44.8391), (103.188, 42.0012), (100.908, 42.0027)],
    ]
    conv = ToPointsAndSegments()
    for ring in polys:
        dedup = []
        for cur, nxt in zip(ring, ring[1:]):
            if cur!= nxt:
                dedup.append(cur)
        dedup += [dedup[0]]
        conv.add_polygon([dedup])
    return conv, 1398, 1042, 14


def test_tudelft_logo_E():
    """The small letter 'e' of the TU Delft logo"""
    polys = [
#          #e
#          #e -- outershell
    [(82.9195, 34.8762), (82.9195, 36.123), (82.8224828125, 37.4505816406), (82.53454375, 38.658784375), (82.0603515625, 39.7298449219), (81.404575, 40.646), (80.5718828125, 41.3894863281), (79.56694375, 41.942540625), (78.3944265625, 42.2873996094), (77.059, 42.4063),(76.2952375244, 42.3687171631), (75.5838064453, 42.2585341797), (74.9242850342, 42.0795993408), (74.3162515625, 41.8357609375), (73.7592843018, 41.5308672607), (73.2529615234, 41.1687666016), (72.3905625, 40.2883375), (71.7256806641, 39.2252599609), (71.2549421875, 38.0103203125), (70.9749732422, 36.6743048828), (70.8824, 35.248), (70.9637001953, 33.823009375), (71.2144078125, 32.50744375), (71.6447333984, 31.3261375), (72.2648875, 30.303925), (73.0850806641, 29.465640625), (73.5733826904, 29.1232322266), (74.1155234375, 28.83611875), (74.7127792236, 28.6074044922), (75.3664263672, 28.44019375), (76.848, 28.3027), (77.9991910156, 28.3734771484), (79.058021875, 28.5858296875), (80.0117917969, 28.9397892578), (80.8478, 29.4353875), (81.5533457031, 30.0726560547), (82.115728125, 30.8516265625), (82.5222464844, 31.7723306641), (82.7602, 32.8348), (80.1098, 32.8348), (79.9671755859, 32.1632625), (79.7567359375, 31.59635), (79.4750064453, 31.1294125), (79.1185125, 30.7578), (78.6837794922, 30.4768625), (78.1673328125, 30.28195), (77.5656978516, 30.1684125), (76.8754, 30.1316), (75.9894021484, 30.2347720703), (75.2544671875, 30.5276953125), (74.6604455078, 30.9854802734), (74.1971875, 31.5832375), (73.8545435547, 32.2960775391), (73.6223640625, 33.0991109375), (73.4904994141, 33.9674482422), (73.4488, 34.8762), (82.9195, 34.8762), (82.9195, 34.8762)],
        #e -- innershell
    [(73.5055, 36.6262), (73.5694832031, 37.3917933594), (73.744890625, 38.118946875), (74.0270464844, 38.7880457031),  (74.411275, 39.379475), (74.8929003906, 39.8736199219), (75.467246875, 40.250865625), (76.1296386719, 40.4915972656), (76.8754, 40.5762), (77.7209189453, 40.4999767578), (78.4335015625, 40.2795953125), (79.0193740234, 39.9274880859), (79.4847625, 39.4560875), (79.8358931641, 38.8778259766), (80.0789921875, 38.2051359375), (80.2202857422, 37.4504498047), (80.266, 36.6262), (73.5055, 36.6262)],
    ]
    conv = ToPointsAndSegments()
    for ring in polys:
        dedup = []
        for cur, nxt in zip(ring, ring[1:]):
            if cur!= nxt:
                dedup.append(cur)
        dedup += [dedup[0]]
        conv.add_polygon([dedup])
    return conv, 258, 186, 31

def test_dented_parallel_WITH_intermediate_nodes():
    """Letter H - parallel mid"""
#### FIXME: Interestingly the following input, generates a reasonable skeleton
#### However, it also creates skeletons of 0 units length (starting and stopping in the same node ???)
    segments = [
        [(0,0), (9,0)],
        [(9,0), (9,10)],
        [(9,10), (9.5,10)], #
        [(9.5,10), (9.5, 10-0.1)],
        [(9.5, 10-0.1), (9.5 + 0.1, 10-0.1)],
        [(9.5 + 0.1, 10-0.1),(9.5 + 0.1, 10)],  #
        [(9.5 + 0.1, 10), (11,10)], #
        [(11,10), (11,0)],
        [(11,0), (21,0)],
        [(21,0), (21,21)],
        [(21,21), (11,21)],
        [(11,21), (11,10.1)],
        [(11,10.1), (9.6333,10.1)],
        [(9.6333,10.1), (9.4,10.1)],
        [(9.4,10.1), (9.,10.1)],
        [(9,10.1), (9,21)],
        [(9,21), (0,21)],
        [(0,21), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 57, 40, 6


def test_straight_parallel_intermediates():
    """Letter H - parallel mid"""
    segments = [
        [(0,0), (9,0)],
        [(9,0), (9,10)],
        [(9,10), (9.13,10)], #
        [(9.13,10), (9.33,10)], #
        [(9.33,10), (9.5,10)], 
        [(9.5,10), (10.5,10)], 
        [(10.5,10), (11,10)], #
        [(11,10), (11,0)],
        [(11,0), (21,0)],
        [(21,0), (21,21)],
        [(21,21), (11,21)],
        [(11,21), (11,10.1)],
        [(11,10.1), (9.,10.1)],
        [(9,10.1), (9,21)],
        [(9,21), (0,21)],
        [(0,21), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 51, 36, 6

def test_letter_h_midmid_manyvert():
    """Letter H - parallel mid"""
    # FAILING test
    segments = [
        [(0,0), (9,0)],
        [(9,0), (9,10)],
        [(9,10), (9.13,10)], #
        [(9.13,10), (9.33,10)], #
        [(9.33,10), (9.5,10)], 
        [(9.5,10), (9.8,10)], #
        [(9.8,10), (10,10)], #
        [(10,10), (10.5,10)], #
        [(10.5,10), (11,10)], #
        [(11,10), (11,0)],
        [(11,0), (21,0)],
        [(21,0), (21,21)],
        [(21,21), (11,21)],
        [(11,21), (11,10.1)],
        [(11,10.1), (9.8,10.1)],
        [(9.8,10.1), (9,10.1)],
        [(9,10.1), (9,21)],
        [(9,21), (0,21)],
        [(0,21), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 61, 43, 6

def test_letter_h_midmid():
    """Letter H - parallel mid"""
    segments = [
        [(0,0), (9,0)],
        [(9,0), (9,10)],
        [(9,10), (11,10)],
        [(11,10), (11,0)],
        [(11,0), (21,0)],
        [(21,0), (21,21)],
        [(21,21), (11,21)],
        [(11,21), (11,11)],
        [(11,11), (9,11)],
        [(9,11), (9,21)],
        [(9,21), (0,21)],
        [(0,21), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 35, 24, 6

def test_letter_h_halfleft():
    """Letter H - parallel - half left"""
    segments = [
        [(0,0), (9,0)],
        [(9,0), (9,10)],
        [(9,10), (11,10)],
        [(11,10), (11,0)],
        [(11,0), (21,0)],
        [(21,0), (21,21)],
        [(21,21), (10,21)], #
        [(10,21), (10,11)], #
        [(10,11), (9,11)],  #
        [(9,11), (9,21)],
        [(9,21), (0,21)],
        [(0,21), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 35, 24, 6

def test_letter_h_halfright():
    """Letter H - half right"""
    segments = [
        [(0,0), (9,0)],
        [(9,0), (9,10)],
        [(9,10), (11,10)],
        [(11,10), (11,0)],
        [(11,0), (21,0)],
        [(21,0), (21,21)],
        [(21,21), (11,21)],
        [(11,21), (11,11)],
        [(11,11), (10,11)], #
        [(10,11), (10,21)], #
        [(10,21), (0,21)],  #
        [(0,21), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 36, 25, 6

def test_letter_h_bottom_halfleft():
    """Letter H - parallel - bottom half left"""
    segments = [
        [(0,0), (9,0)],
        [(9,0), (9,10)],
        [(9,10), (10,10)],
        [(10,10), (10,0)],
        [(10,0), (21,0)],
        [(21,0), (21,21)],
        [(21,21), (11,21)], 
        [(11,21), (11,11)], 
        [(11,11), (9,11)],  
        [(9,11), (9,21)],
        [(9,21), (0,21)],
        [(0,21), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 35, 24, 6

def test_letter_h_bottom_halfleft():
    """Letter H - parallel - bottom half left"""
    segments = [
        [(0,0), (9,0)],
        [(9,0), (9,10)],
        [(9,10), (11,10)],
        [(11,10), (11,0)],
        [(11,0), (21,0)],
        [(21,0), (21,21)],
        [(21,21), (12,21)], 
        [(12,21), (12,11)], 
        [(12,11), (10,11)],  
        [(10,11), (10,21)],
        [(10,21), (0,21)],
        [(0,21), (0,0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 37, 26, 6

def sfcgal_bug_153():
    """SFCGAL Bug 153

    Thin roads, from rasterization (many parallel events).
    See: https://github.com/Oslandia/SFCGAL/issues/153
    """
    conv = ToPointsAndSegments()
    poly = [
        [(256.0, 760.0), (518.0, 760.0), (518.0, 630.0), (674.0, 630.0), (674.0, 239.0), (673.0, 239.0), (127.0, 239.0), (127.0, 240.0), (126.0, 240.0), (126.0, 513.0), (127.0, 513.0), (127.0, 514.0), (126.0, 514.0), (126.0, 630.0), (255.0, 630.0), (256.0, 630.0), (256.0, 760.0)],
        [(128.0, 629.0), (128.0, 423.0), (270.0, 423.0), (270.0, 422.0), (271.0, 422.0), (271.0, 240.0), (672.0, 240.0), (672.0, 629.0), (128.0, 629.0)],
        [(258.0, 759.0), (258.0, 631.0), (516.0, 631.0), (516.0, 759.0), (258.0, 759.0)],
        [(128.0, 421.0), (128.0, 240.0), (269.0, 240.0), (269.0, 421.0), (128.0, 421.0)]
    ]
    conv.add_polygon(poly)
    return conv, 105, 74, 12

def test_3tris():
    """3 triangles"""
    conv = ToPointsAndSegments()
    polygons = [
                [[(0,0), (1,0), (0.5,-0.5), (0,0)]],
                [[(1,0.5), (2,0.5), (1.5,1), (1,0.5)]],
                [[(2,0), (3,0), (2.5,-0.5), (2,0)]],
                ]
    for polygon in polygons:
        conv.add_polygon(polygon)
    return conv, 24, 16, 8

def test_3tris_split():
    """One side that should just use handle and other side should handle_ccw
    """
    conv = ToPointsAndSegments()
    polygons = [
                [[(1,0), (2,0), (1.5,-0.5), (1,0)]],
                [[(1,3), (2,3), (1.5,3.5), (1,3)]],
                [[(3,0), (4,0), (3.5,-0.5), (3,0)]],
                ]
    for polygon in polygons:
        conv.add_polygon(polygon)
    return conv, 24, 16, 7

def koch_rec2():
    """Koch curve, 2nd recursion level
    
    Note, contains 4 segments without length
    """
    ring = [(0.0, 0.0), (0.16666666666666663, 0.28867513459481287), (-1.1102230246251565e-16, 0.5773502691896257), (0.3333333333333332, 0.5773502691896258), (0.4999999999999998, 0.8660254037844388), (0.33333333333333304, 1.1547005383792517), (-2.7755575615628914e-16, 1.1547005383792517), (0.16666666666666635, 1.4433756729740645), (-3.885780586188048e-16, 1.7320508075688774), (0.3333333333333329, 1.7320508075688776), (0.4999999999999995, 2.0207259421636907), (0.6666666666666663, 1.732050807568878), (0.9999999999999996, 1.7320508075688783), (1.166666666666666, 2.020725942163691), (0.9999999999999993, 2.309401076758504), (1.3333333333333326, 2.309401076758504), (1.4999999999999991, 2.598076211353317), (1.6666666666666656, 2.309401076758504), (1.999999999999999, 2.309401076758504), (1.8333333333333321, 2.020725942163691), (1.9999999999999987, 1.7320508075688783), (2.333333333333332, 1.7320508075688783), (2.499999999999999, 2.020725942163691), (2.6666666666666656, 1.7320508075688783), (2.999999999999999, 1.7320508075688783), (2.833333333333332, 1.4433756729740654), (2.9999999999999987, 1.1547005383792526), (2.666666666666665, 1.1547005383792526), (2.4999999999999982, 0.8660254037844397), (2.6666666666666647, 0.5773502691896268), (2.9999999999999982, 0.5773502691896267), (2.8333333333333313, 0.2886751345948139), (2.999999999999998, 9.992007221626409e-16), (2.6666666666666643, 1.0400222821342193e-15), (2.4999999999999973, -0.2886751345948117), (2.333333333333331, 1.1657341758564144e-15), (1.9999999999999976, 1.2065557358279928e-15), (1.8333333333333308, -0.28867513459481153), (1.9999999999999973, -0.5773502691896245), (1.666666666666664, -0.5773502691896243), (1.4999999999999973, -0.866025403784437), (1.3333333333333308, -0.5773502691896242), (0.9999999999999976, -0.5773502691896242), (1.1666666666666643, -0.2886751345948113), (0.9999999999999976, 1.4988010832439613e-15), (0.6666666666666643, 1.5396226432155397e-15), (0.4999999999999975, -0.2886751345948112), (0.33333333333333093, 1.6653345369377348e-15), (0, 0)]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 118, 67, 24

def test_capital_T():
    """Capital T, has more than one triangle in parallel fan
            
    Exhibits infinite event loop because of flipping...
    """
    #    T
    ring = [(15.5055, 28.7004), (20.8063, 28.7004), (20.8063, 44.1211), (26.7445, 44.1211), (26.7445, 47.8328), (9.5668, 47.8328), (9.5668, 44.1211), (15.5055, 44.1211), (15.5055, 28.7004)]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 21, 14, 8

def test_koch_rec3():
    """Koch snowflake curve with recursion depth of 3
    """
    # contains MULTIPLE TRIANGLES IN PARALLEL FAN
    ring = [(0.0, 0.0), (0.05555555555555554, 0.09622504486493763), (-4.163336342344337e-17, 0.19245008972987523), (0.11111111111111106, 0.1924500897298753), (0.16666666666666657, 0.2886751345948129), (0.111111111111111, 0.3849001794597505), (-1.1102230246251565e-16, 0.3849001794597505), (0.05555555555555543, 0.4811252243246882), (-1.5265566588595902e-16, 0.5773502691896257), (0.11111111111111095, 0.5773502691896257), (0.16666666666666646, 0.6735753140545634), (0.22222222222222207, 0.5773502691896258), (0.33333333333333315, 0.5773502691896258), (0.3888888888888887, 0.6735753140545635), (0.3333333333333331, 0.769800358919501), (0.4444444444444442, 0.769800358919501), (0.4999999999999997, 0.8660254037844387), (0.44444444444444414, 0.9622504486493764), (0.33333333333333304, 0.9622504486493764), (0.38888888888888856, 1.058475493514314), (0.333333333333333, 1.1547005383792515), (0.22222222222222188, 1.1547005383792515), (0.16666666666666627, 1.058475493514314), (0.11111111111111074, 1.1547005383792515), (-3.608224830031759e-16, 1.1547005383792515), (0.05555555555555518, 1.250925583244189), (-4.0245584642661925e-16, 1.3471506281091266), (0.1111111111111107, 1.3471506281091266), (0.16666666666666624, 1.443375672974064), (0.11111111111111066, 1.5396007178390017), (-4.440892098500626e-16, 1.5396007178390017), (0.055555555555555095, 1.6358257627039392), (-4.85722573273506e-16, 1.7320508075688767), (0.11111111111111062, 1.7320508075688767), (0.16666666666666613, 1.8282758524338143), (0.22222222222222174, 1.7320508075688767), (0.3333333333333328, 1.7320508075688767), (0.38888888888888834, 1.8282758524338143), (0.33333333333333276, 1.9245008972987518), (0.44444444444444386, 1.9245008972987518), (0.4999999999999994, 2.0207259421636894), (0.555555555555555, 1.9245008972987518), (0.6666666666666661, 1.9245008972987518), (0.6111111111111106, 1.8282758524338143), (0.6666666666666662, 1.7320508075688767), (0.7777777777777772, 1.7320508075688767), (0.8333333333333328, 1.8282758524338143), (0.8888888888888884, 1.7320508075688767), (0.9999999999999996, 1.7320508075688767), (1.0555555555555551, 1.8282758524338143), (0.9999999999999996, 1.9245008972987518), (1.1111111111111107, 1.9245008972987518), (1.1666666666666663, 2.0207259421636894), (1.1111111111111107, 2.116950987028627), (0.9999999999999996, 2.116950987028627), (1.0555555555555551, 2.2131760318935645), (0.9999999999999996, 2.309401076758502), (1.1111111111111107, 2.309401076758502), (1.1666666666666663, 2.4056261216234396), (1.2222222222222219, 2.309401076758502), (1.333333333333333, 2.309401076758502), (1.3888888888888886, 2.4056261216234396), (1.333333333333333, 2.501851166488377), (1.4444444444444442, 2.501851166488377), (1.4999999999999998, 2.5980762113533147), (1.5555555555555554, 2.501851166488377), (1.6666666666666665, 2.501851166488377), (1.611111111111111, 2.4056261216234396), (1.6666666666666665, 2.309401076758502), (1.7777777777777777, 2.309401076758502), (1.8333333333333333, 2.4056261216234396), (1.8888888888888888, 2.309401076758502), (2.0, 2.309401076758502), (1.9444444444444444, 2.2131760318935645), (2.0, 2.116950987028627), (1.8888888888888888, 2.116950987028627), (1.8333333333333333, 2.0207259421636894), (1.8888888888888888, 1.9245008972987518), (2.0, 1.9245008972987518), (1.9444444444444444, 1.8282758524338143), (2.0, 1.7320508075688767), (2.111111111111111, 1.7320508075688767), (2.166666666666667, 1.8282758524338143), (2.2222222222222223, 1.7320508075688767), (2.3333333333333335, 1.7320508075688767), (2.3888888888888893, 1.8282758524338143), (2.333333333333334, 1.9245008972987518), (2.444444444444445, 1.9245008972987518), (2.500000000000001, 2.0207259421636894), (2.5555555555555562, 1.9245008972987518), (2.6666666666666674, 1.9245008972987518), (2.6111111111111116, 1.8282758524338143), (2.666666666666667, 1.7320508075688767), (2.777777777777778, 1.7320508075688767), (2.833333333333334, 1.8282758524338143), (2.8888888888888893, 1.7320508075688767), (3.0000000000000004, 1.7320508075688767), (2.9444444444444446, 1.6358257627039392), (3.0, 1.5396007178390017), (2.888888888888889, 1.5396007178390017), (2.833333333333333, 1.443375672974064), (2.8888888888888884, 1.3471506281091266), (2.9999999999999996, 1.3471506281091266), (2.9444444444444438, 1.250925583244189), (2.999999999999999, 1.1547005383792515), (2.888888888888888, 1.1547005383792515), (2.833333333333332, 1.058475493514314), (2.777777777777777, 1.1547005383792515), (2.6666666666666656, 1.1547005383792515), (2.61111111111111, 1.058475493514314), (2.666666666666665, 0.9622504486493763), (2.555555555555554, 0.9622504486493763), (2.4999999999999982, 0.8660254037844386), (2.5555555555555536, 0.7698003589195009), (2.6666666666666647, 0.7698003589195009), (2.611111111111109, 0.6735753140545633), (2.6666666666666643, 0.5773502691896256), (2.7777777777777755, 0.5773502691896256), (2.8333333333333313, 0.6735753140545632), (2.8888888888888866, 0.5773502691896255), (2.999999999999998, 0.5773502691896255), (2.944444444444442, 0.4811252243246879), (2.9999999999999973, 0.38490017945975025), (2.888888888888886, 0.38490017945975025), (2.8333333333333304, 0.28867513459481264), (2.8888888888888857, 0.19245008972987498), (2.999999999999997, 0.19245008972987493), (2.944444444444441, 0.09622504486493733), (2.9999999999999964, -3.191891195797325e-16), (2.8888888888888853, -3.055819329225397e-16), (2.8333333333333295, -0.0962250448649379), (2.777777777777774, -2.636779683484747e-16), (2.666666666666663, -2.500707816912819e-16), (2.611111111111107, -0.09622504486493784), (2.6666666666666625, -0.1924500897298755), (2.5555555555555514, -0.19245008972987546), (2.4999999999999956, -0.28867513459481303), (2.44444444444444, -0.1924500897298754), (2.333333333333329, -0.1924500897298754), (2.3888888888888844, -0.09622504486493777), (2.3333333333333286, -1.6653345369377348e-16), (2.2222222222222174, -1.5292626703658066e-16), (2.1666666666666616, -0.09622504486493774), (2.1111111111111063, -1.1102230246251565e-16), (1.9999999999999951, -9.741511580532284e-17), (1.9444444444444395, -0.09622504486493769), (1.9999999999999951, -0.19245008972987537), (1.888888888888884, -0.19245008972987532), (1.8333333333333284, -0.2886751345948129), (1.888888888888884, -0.3849001794597506), (1.9999999999999951, -0.3849001794597507), (1.9444444444444393, -0.48112522432468824), (1.9999999999999947, -0.577350269189626), (1.8888888888888835, -0.5773502691896258), (1.833333333333328, -0.6735753140545634), (1.7777777777777724, -0.5773502691896257), (1.6666666666666612, -0.5773502691896257), (1.6111111111111056, -0.6735753140545633), (1.6666666666666612, -0.7698003589195009), (1.55555555555555, -0.7698003589195008), (1.4999999999999944, -0.8660254037844384), (1.4444444444444389, -0.7698003589195007), (1.3333333333333277, -0.7698003589195007), (1.3888888888888833, -0.6735753140545631), (1.3333333333333277, -0.5773502691896255), (1.2222222222222165, -0.5773502691896255), (1.166666666666661, -0.6735753140545631), (1.1111111111111054, -0.5773502691896254), (0.9999999999999942, -0.5773502691896254), (1.0555555555555498, -0.48112522432468774), (0.9999999999999942, -0.38490017945975014), (1.1111111111111054, -0.3849001794597501), (1.166666666666661, -0.2886751345948124), (1.1111111111111054, -0.19245008972987482), (0.9999999999999942, -0.19245008972987482), (1.0555555555555498, -0.09622504486493719), (0.9999999999999942, 4.163336342344337e-16), (0.8888888888888831, 4.299408208916265e-16), (0.8333333333333275, -0.09622504486493716), (0.7777777777777719, 4.718447854656915e-16), (0.6666666666666607, 4.854519721228843e-16), (0.6111111111111052, -0.0962250448649371), (0.6666666666666606, -0.19245008972987476), (0.5555555555555496, -0.1924500897298747), (0.499999999999994, -0.2886751345948123), (0.4444444444444385, -0.19245008972987468), (0.3333333333333274, -0.19245008972987468), (0.3888888888888829, -0.09622504486493705), (0.3333333333333273, 5.551115123125783e-16), (0.22222222222221621, 5.687186989697711e-16), (0.1666666666666606, -0.09622504486493702), (0.11111111111110508, 6.106226635438361e-16), (0, 0)]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 499, 295, 55


def corner_same_inwards():
    """same corner inwards"""
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (10., 0), (10,20), (0,20.), (0.,11.), (1,11), (1,10), (0,10), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 21, 14, 5

def multiple_parallel():
    """Parallelogram with parallel wavefronts collapsing"""
    # FIXME: Multiple skeleton nodes, because of fan that just collapses
    conv = ToPointsAndSegments()
    conv.add_polygon([[(0,0), (1,0), (2,0), (3,0), (4,0), (5,0),
                        (5,1), (4,1), (3,1), (2,1), (1,1), (0, 1), (0,0)
                        ]])
    return conv, 29, 18, 12

def cross():
    """Figure of a cross """
    # FIXME: Multiple skeleton nodes, because of fan that just collapses
    ring = [(0,0), (10, 0), (10,-10), (15, -10), (15,0), (25,0), (25,5), (15,5), (15,15), (10,15), (10,5), (0,5), (0,0)]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 28, 17, 12

def corner_top_short():
    """corner top -- short"""
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (10., 0), (10,20), (-0.5,20.), (-0.5,11.), (-1,11), (-1,10), (0,10), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8

def corner_bottom_short():
    """corner bottom -- short"""
    conv = ToPointsAndSegments()
    polygon = [[(-.5, 0), (10., 0), (10,20), (0,20.), (0.,11.), (-1,11), (-1,10), (-0.5,10), (-.5,0)]]
    conv.add_polygon(polygon)
    return conv, 21, 14, 8

def butterfly_like2():
    """butterfly like 2"""
    conv = ToPointsAndSegments()
    polygon = [[(0,0), (5,1), (10,0), (10,1.5), (10,3), (5,2), (0,3), (0,0)]] #(0,1.5), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 16, 10, 7

def butterfly_like():
    """butterfly like 1"""
    conv = ToPointsAndSegments()
    polygon = [[(0,0), (5,1), (10,0), (10,3), (5,2), (0,3), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 14, 9, 6

def mute_button_shape():
    """mute button shape"""
    conv = ToPointsAndSegments()
    polygon = [[(0,0), (3,0), (6,4), (10,4), (10,5), (6,5), (3,9), (0,9), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8

def bottom_circle_top_square():
    """Bottom half is a circle, top is squarish, leading to parallel 
    wavefronts.
    
    Test contains kinetic vertex that is generated at certain time
    and later ended at same time; This means that segment does not
    have any length

    If choose_next_event is set up to first handle split events,
    this test breaks. Apparently then one triangle is not processed
    properly and survives until the end of the process
    """
    # bottom circle
    from math import pi, cos, sin, degrees
    ring = []
    pi2 = 2 * pi
    ct = 7
    alpha = pi / ct 
    for i in range(ct+1):
        ring.append( (cos(pi+i*alpha), sin(pi+i*alpha)))
    ring.extend([(1, 10), (-1,10)])
    ring.append(ring[0])
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 24, 13, 10

def rect_extra_pt():
    """"Rectangle with extra point on straight (180 degrees) edge """
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (0., 10), (15,10), (15,0.), (2., 0.), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 12, 8, 5

def rect_extra_pt2():
    """"Rectangle with extra point on straight (180 degrees) edge """
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (5., 0.), (10,0), (10,6.), (0,6), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 12, 8, 5

def dent_equal():
    """equal dent"""
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (10., 0), (10,20), (0,20.), (0.,11.), (-1,11), (-1,10), (0,10), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8

def parallelogram_parallel_fronts():
    """Parallelogram with parallel wavefronts collapsing"""
    conv = ToPointsAndSegments()
    conv.add_polygon([[(-15,0), (0,0), (15,25), (0, 25), (-15,0)]])
    return conv, 9, 6, 4

def corner_same1():
    """same corner 1"""
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (10., 0), (10,20), (0,20.), (0.,11.), (-1,11), (-1,10), (0,10), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8

def corner_same2():
    """same corner 2"""
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (10., 0), (10,20), (0,20.), (0.,11.), (-1,12), (-1,9), (0,10), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 22, 15, 6

def weird_dent():
    """weird dent"""
    conv = ToPointsAndSegments()
    polygon = [[(0.6, 5), (1,4.5), (3,4.5), (3,0), (7,0), (7,10), (3,10), (3,5.5), (1,5.5), (0.6,5)]]
    conv.add_polygon(polygon)
    return conv, 24, 16, 7


def tris3_handle_cw_ccw():
    """Splitting and then handle the fan
    """
    conv = ToPointsAndSegments()
    polygons = [
                [[(0,0), (1,0), (0.5,-0.5), (0,0)]],
                [[(1,3), (2,3), (1.5,3.5), (1,3)]],
                [[(2,0), (3,0), (2.5,-0.5), (2,0)]],
                ]
    for polygon in polygons:
        conv.add_polygon(polygon)
    return conv, 24, 16, 8

def rocket():
    """Two 2-triangles collapse at same time, sharing one vertex, that
    should lead to 1 new skeleton node and only 1 new kinetic vertex
    (3 original vertices are stopped, with 2 at same processing step).
    
    This test has a vertex that is started and stopped at the same time!
    """
    ###################################################
    # No parallel edges, but simultaneous event, 
    # leading to infinite fast vertex, if not careful
    ###################################################
    conv = ToPointsAndSegments()
    polygon = [[(0., 10.), (1., 8.), (2.,10.), (2.1,3.),
                (1., 0.), (-.1,3), (0.,10.)]]
    conv.add_polygon(polygon)
    return conv, 14, 8, 6

def multiple_parallel2():
    """Parallelogram with parallel wavefronts collapsing"""
    conv = ToPointsAndSegments()
    conv.add_polygon([[(0,0), (2,0), (4,0), (5,0),
                        (5,1), (3,1), (1,1), (0, 1), (0,0)
                        ]])
    return conv, 21, 14, 8

def stairs():
    """Stairs like shape
    """
    ###################################################
    # No parallel edges, but simultaneous event,
    # leading to infinite fast vertex, if not careful
    ###################################################
    conv = ToPointsAndSegments()
    polygon = [[(0,10), (2,10),(2,12),(4,12),(4,13),(5,13),(5,14),(3,14),(3,13),(1,13),(1,11),(0,11),(0,10)]]
    conv.add_polygon(polygon)
    return conv, 29, 18, 12

def simple_parallel():
    """simple parallel"""
    segments = [((0.673575314055, 0.166666666667), (0.866025403784, 0.166666666667)), ((0.673575314055, -0.166666666667), (0.5, -0.0)), ((0.866025403784, -0.166666666667), (0.673575314055, -0.166666666667)), ((0.5, -0.0), (0.673575314055, 0.166666666667)), ((0.866025403784, 0.166666666667), (1.25, -0.0)), ((0.866025403784, -0.166666666667), (1.25, -0.0))]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 13, 8, 6


def needle_parallel():
    """parallel needle"""
    segments = [((0,0), (3,0)), ((3,0),(4,1)), ((4,1), (3,2)), ((3,2), (0,2)), ((0,2), (0,0))]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 11, 7, 5

def split_event_from_top10nl():
    """Top10NL data with parallel set of events, if the
    wavefront is not updated before calculating the new events
    this crashes (as we get a split event, instead of edge event
    without neighbors present...
    """
    poly = [[(181538.174, 316924.981),
                (181536.571, 316927.503),
                (181528.111, 316921.634),
                (181519.449, 316910.678),
                (181515.552, 316905.749),
                (181512.149, 316901.445),
                (181513.118, 316900.678),
                (181514.492, 316899.592),
                (181517.905, 316903.909),
                (181521.802, 316908.838),
                (181524.631, 316912.416),
                (181530.179, 316919.433),
                (181538.174, 316924.981)]]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 37, 26, 8

def cbs_vlissingen_parallel():
    """Vlissingen CBS municipality border, with parallel part"""

    #
    # In -- step 123, all is fine -- in step 124 one of the bisectors 
    # starts to point to a completely wrong direction
    #
    # can we have a post-condition for bisectors:
    # * angle of bisector should be between angle of wavefront at left 
    # and wavefront at right
    # ????
    #

    poly = [[[32436.377014160145, 388952.5920410156], [32376.976196289044, 385047.20623779297], [31021.518798828092, 385207.7283935547], [31021.46978759763, 385207.75939941406], [31021.4058227539, 385207.79962158203], [31021.381591796864, 385207.8114013672], [31021.36541748048, 385207.8178100586], [31021.281982421886, 385207.8508300781], [30816.367004394495, 386274.0806274414], [30816.28143310545, 386275.5950317383], [30814.7680053711, 386275.4934082031], [30808.61541748044, 386275.0754394531], [30738.59619140627, 386270.3206176758], [30737.728027343735, 386270.2615966797], [30737.62902832033, 386270.2546386719], [30737.53002929685, 386270.24798583984], [30736.66284179688, 386270.1890258789], [30736.257019042994, 386270.1614379883], [30736.331237793012, 386268.69958496094], [30736.332031249985, 386268.6838378906], [30736.40838623045, 386267.26739501953], [30736.409790039033, 386267.2416381836], [30736.41058349608, 386267.2255859375], [30737.011413574208, 386256.1140136719], [30737.013793945276, 386256.0668334961], [30737.01763916015, 386256.0194091797], [30737.12438964844, 386254.6987915039], [30737.19958496091, 386254.69842529297], [30737.768432617188, 386254.6951904297], [30738.50921630857, 386254.6951904297], [30738.60504150386, 386254.6951904297], [30738.701232910134, 386254.6951904297], [30739.265991210927, 386254.6950073242], [30741.26818847655, 386254.66943359375], [30741.27001953127, 386254.6439819336], [30741.445007324222, 386252.13299560547], [30741.50939941409, 386251.2048339844], [30741.56658935546, 386250.38079833984], [30741.690002441377, 386248.60443115234], [30742.54302978516, 386236.32122802734], [30742.627441406243, 386235.1083984375], [30742.806823730458, 386232.5239868164], [30742.87683105466, 386231.5184326172], [30742.94543457031, 386230.5319824219], [30742.946411132794, 386230.51861572266], [30742.947387695316, 386230.5050048828], [30743.145629882787, 386227.6286010742], [30740.254394531257, 386227.54040527344], [30739.24938964845, 386227.5100097656], [30738.22778320312, 386227.47900390625], [30735.694396972685, 386227.4022216797], [30729.307800292943, 386227.20861816406], [30726.972412109357, 386227.1380004883], [30726.049438476526, 386227.10998535156], [30725.103820800752, 386227.08123779297], [30722.46099853515, 386227.00201416016], [30722.26562500003, 386229.6384277344], [30722.20562744142, 386230.4514160156], [30722.200805664026, 386230.51678466797], [30722.195983886708, 386230.5817871094], [30722.130432128954, 386231.47064208984], [30721.95764160155, 386233.81579589844], [30721.082214355487, 386245.6901855469], [30720.915222167965, 386247.9567871094], [30720.846801757787, 386248.8815917969], [30720.777404785164, 386249.82598876953], [30720.77600097658, 386249.8422241211], [30720.58081054686, 386252.49798583984], [30723.19799804688, 386252.78021240234], [30723.215637207024, 386252.7819824219], [30723.2333984375, 386252.78399658203], [30724.187194824222, 386252.8864135742], [30725.018432617184, 386252.9755859375], [30726.374633789015, 386253.12841796875], [30726.41162109373, 386253.13262939453], [30726.356384277333, 386254.54583740234], [30725.73242187498, 386266.4017944336], [30725.674987792954, 386267.4930419922], [30725.596008300763, 386268.9957885742], [30725.595214843754, 386269.0109863281], [30724.103027343725, 386268.9124145508], [30724.078430175738, 386268.9108276367], [30704.324035644506, 386267.6050415039], [30677.24218750004, 386265.81463623047], [30676.51220703126, 386265.76623535156], [30675.030029296893, 386265.64221191406], [30675.031799316428, 386265.6116333008], [30675.109802246057, 386264.3619995117], [30675.121398925778, 386264.17639160156], [30675.19482421875, 386262.99841308594], [30675.563415527333, 386257.1024169922], [30675.79980468748, 386253.3178100586], [30675.88800048829, 386252.29541015625], [30676.833435058586, 386251.9852294922], [30676.845214843746, 386251.98138427734], [30677.390197753906, 386251.8090209961], [30678.104003906228, 386251.58361816406], [30678.12799072264, 386251.57598876953], [30678.141784667994, 386251.5718383789], [30678.193420410178, 386251.5554199219], [30679.83398437499, 386251.0358276367], [30679.953430175778, 386249.2233886719], [30680.00244140624, 386248.4788208008], [30680.038208007776, 386247.93243408203], [30680.1458129883, 386246.2974243164], [30681.44403076171, 386226.5543823242], [30681.610412597627, 386224.02459716797], [30681.67340087895, 386223.0632324219], [30681.73858642579, 386222.0715942383], [30681.91961669921, 386219.3201904297], [30681.921386718743, 386219.2941894531], [30679.125183105458, 386219.1240234375], [30678.124389648467, 386219.07220458984], [30677.131591796875, 386219.0212402344], [30674.629028320327, 386218.8920288086], [30668.751831054684, 386218.5889892578], [30666.346435546864, 386218.46502685547], [30665.396789550745, 386218.416015625], [30664.423217773467, 386218.36602783203], [30664.402587890607, 386218.3648071289], [30664.38183593753, 386218.3635864258], [30663.897033691414, 386218.33880615234], [30661.660217285138, 386218.22442626953], [30661.511413574186, 386220.97302246094], [30661.45898437499, 386221.9639892578], [30661.407836914048, 386222.93743896484], [30661.278015136715, 386225.4030151367], [30661.272033691435, 386225.51721191406], [30661.265991210938, 386225.63104248047], [30660.358398437475, 386242.9262084961], [30660.233825683597, 386245.2998046875], [30660.182617187507, 386246.27502441406], [30660.130615234368, 386247.2651977539], [30659.982238769553, 386250.0950317383], [30662.069213867173, 386250.1633911133], [30662.81542968748, 386250.1876220703], [30663.531982421897, 386250.2106323242], [30663.66778564451, 386250.21502685547], [30663.806640624978, 386250.2196044922], [30664.805603027326, 386250.25201416016], [30666.440429687475, 386250.3256225586], [30666.32983398435, 386251.8782348633], [30665.448242187456, 386262.44860839844], [30665.325805664026, 386263.9174194336], [30665.291809081984, 386264.32403564453], [30665.212585449208, 386265.2689819336], [30665.210998535153, 386265.28942871094], [30665.208984374996, 386265.30938720703], [30663.769836425774, 386265.29138183594], [30662.54998779298, 386265.2385864258], [30643.970642089793, 386264.4298095703], [30642.690795898423, 386264.3740234375], [30642.663391113238, 386264.3728027344], [30641.17822265623, 386264.30822753906], [30641.1788330078, 386264.2952270508], [30641.251586914055, 386262.9196166992], [30641.258422851566, 386262.7938232422], [30641.32818603514, 386261.5068359375], [30641.335021972653, 386261.3840332031], [30641.342041015636, 386261.25604248047], [30642.945617675803, 386231.76641845703], [30643.01458740237, 386230.49603271484], [30644.78039550781, 386198.0289916992], [30644.92663574218, 386195.12701416016], [30644.91601562502, 386195.12658691406], [30642.092041015632, 386195.041015625], [30640.750427246086, 386195.00018310547], [30640.69580078126, 386194.9985961914], [30640.641418457053, 386194.99700927734], [30640.032409667976, 386194.9783935547], [30638.042419433572, 386194.9219970703], [30637.887023925807, 386197.58782958984], [30637.8859863281, 386197.6046142578], [30634.22198486327, 386260.68298339844], [30634.158386230487, 386261.7767944336], [30634.06262207034, 386263.26361083984], [30633.664794921857, 386263.24322509766], [30632.58422851563, 386263.18798828125], [30631.75604248049, 386263.1456298828], [30631.744628906243, 386263.14501953125], [30626.448242187555, 386262.87341308594], [30977.320983886733, 389327.4212036133], [32436.377014160145, 388952.5920410156]]]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    ## FIXME: not completely correct (parallel part in south contains 'snapped' segments)
    return conv, 719, 538, 5

# def missing_event():
#     ring = [(82.9195, 34.8762), (82.9195, 36.123),
#     (82.8224828125, 37.4505816406), (82.53454375, 38.658784375), 
#     (82.0603515625, 39.7298449219), (81.404575, 40.646), 
#     (80.5718828125, 41.3894863281), (79.56694375, 41.942540625), 
#     (78.3944265625, 42.2873996094), (77.059, 42.4063),
#     (76.2952375244, 42.3687171631), (75.5838064453, 42.2585341797), 
#     (74.9242850342, 42.0795993408), (74.3162515625, 41.8357609375), 
#     (73.7592843018, 41.5308672607), (73.2529615234, 41.1687666016), 
#     (72.3905625, 40.2883375), (71.7256806641, 39.2252599609), 
#     (71.2549421875, 38.0103203125), (70.9749732422, 36.6743048828), 
#     (70.8824, 35.248), (70.9637001953, 33.823009375), 
#     (71.2144078125, 32.50744375), (71.6447333984, 31.3261375), 
#     (72.2648875, 30.303925), (73.0850806641, 29.465640625), 
#     (73.5733826904, 29.1232322266), (74.1155234375, 28.83611875), 
#     (74.7127792236, 28.6074044922), (75.3664263672, 28.44019375), 
#     (76.848, 28.3027), (77.9991910156, 28.3734771484), 
#     (79.058021875, 28.5858296875), (80.0117917969, 28.9397892578), 
#     (80.8478, 29.4353875), (81.5533457031, 30.0726560547), 
#     (82.115728125, 30.8516265625), (82.5222464844, 31.7723306641), 
#     (82.7602, 32.8348), (80.1098, 32.8348), (79.9671755859, 32.1632625), 
#     (79.7567359375, 31.59635), (79.4750064453, 31.1294125),
#     (79.1185125, 30.7578),(82.9195, 34.8762)]
#     # fixme; misses an event
#     # there is a triangle that should be split
#     # it is, but the direction of one of the 2 new vertices points to wrong side
#     conv = ToPointsAndSegments()
#     conv.add_polygon([ring])
#     return conv, 0, 0, 0

# def wrong_offsets():
#     """Resulting segments do not form a planar graph"""
#     import json
#     s = """{
# "type": "FeatureCollection",
# "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:EPSG::28992" } },
                                                                                        
# "features": [
# { "type": "Feature", "properties": { "id": 139664900038544.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51043.725310399997397, 391507.68993699998828 ], [ 51042.455319, 391516.15654599998379 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067600.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51038.632411799997499, 391542.760162 ], [ 51039.83351180000318, 391542.923948 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067600.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51039.83351180000318, 391542.923948 ], [ 51039.671322499998496, 391544.167399 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067728.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51039.671322499998496, 391544.167399 ], [ 51041.540670499998669, 391544.37510499998461 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067728.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51041.540670499998669, 391544.37510499998461 ], [ 51041.69552799999656, 391544.839677 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067856.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51041.69552799999656, 391544.839677 ], [ 51046.507679299997108, 391545.34621899999911 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900069712.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51047.918327300001692, 391507.107457 ], [ 51044.982255199996871, 391506.68801799998619 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900069840.000000, "side": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 51044.982255199996871, 391506.68801799998619 ], [ 51044.826051600000937, 391507.83351199998287 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900069840.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51044.826051600000937, 391507.83351199998287 ], [ 51043.725310399997397, 391507.68993699998828 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070160.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.455319, 391516.15654599998379 ], [ 51042.565606500000285, 391516.170332 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070288.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.473354800000379, 391516.453288 ], [ 51041.308878199997707, 391524.99278299999423 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070416.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51041.308878199997707, 391524.99278299999423 ], [ 51042.464014700002735, 391525.14345299999695 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070480.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.464014700002735, 391525.14345299999695 ], [ 51042.389055500003451, 391525.69883299997309 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070480.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.389055500003451, 391525.69883299997309 ], [ 51041.245075500002713, 391525.5081699999864 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070800.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51041.245075500002713, 391525.5081699999864 ], [ 51040.449382300001162, 391530.812791 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070800.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51040.449382300001162, 391530.812791 ], [ 51040.220387200002733, 391530.78416699997615 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900071248.000000, "side": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 51040.220387200002733, 391530.78416699997615 ], [ 51039.75987090000126, 391535.619588 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900071248.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51039.75987090000126, 391535.619588 ], [ 51038.632411799997499, 391542.760162 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900144272.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.565606500000285, 391516.170332 ], [ 51042.535010500003409, 391516.46099499997217 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900144272.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.535010500003409, 391516.46099499997217 ], [ 51042.473354800000379, 391516.453288 ] ] } }
# ]
# }"""
#     x = json.loads(s)
#     # parse segments from geo-json
#     segments = []
#     for y in x['features']:
#         segments.append(tuple(map(tuple, y['geometry']['coordinates'])))
#     # convert to triangulation input
#     conv = ToPointsAndSegments()
#     for line in segments:
#         conv.add_point(line[0])
#         conv.add_point(line[1])
#         conv.add_segment(*line)
#     return conv, 0, 0, 0
