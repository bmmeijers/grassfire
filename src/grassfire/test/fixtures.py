"""Test cases for Grassfire

"""

from tri.delaunay.helpers import ToPointsAndSegments

# def func():
#     """ """
#     return conv, segments_ct, nodes_ct, escaping_ct


def many_simultaneous():
    """A lot of simultaneous events"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 1), (1, 0), (3, 0), (4, 1), (4, 3), (3, 4), (1, 4), (0, 3), (0, 1)]]
    )
    return conv, 20, 13, 8


def squarish():
    """Squarish"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 1), (1, 0), (2, 0), (3, 1), (3, 2), (2, 3), (1, 3), (0, 2), (0, 1)]]
    )
    return conv, 20, 13, 8


def many_simultaneous():
    """A lot of simultaneous events"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 1), (1, 0), (3, 0), (4, 1), (4, 3), (3, 4), (1, 4), (0, 3), (0, 1)]]
    )
    return conv, 20, 13, 8


def squarish():
    """Squarish"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 1), (1, 0), (2, 0), (3, 1), (3, 2), (2, 3), (1, 3), (0, 2), (0, 1)]]
    )
    return conv, 20, 13, 8


def bottom_circle():
    """Bottom of a circle, with rectangle on top"""
    from math import pi, cos, sin, degrees

    ring = []
    pi2 = 2 * pi
    ct = 8
    alpha = pi / ct
    for i in range(ct + 1):
        ring.append((cos(pi + i * alpha), sin(pi + i * alpha)))
    ring.append(ring[0])
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 24, 16, 9


def simple_square():
    """A simple square"""
    segments = [
        [(0, 0), (5, 0)],
        [(5, 0), (5, 10)],
        [(5, 10), (0, 10)],
        [(0, 10), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 9, 6, 4


def simple_poly():
    """A simple polygon"""
    conv = ToPointsAndSegments()
    conv.add_polygon([[(0, 0), (22, 0), (14, 10), (2, 8), (0, 6.5), (0, 0)]])
    return conv, 12, 8, 5


def symmetric_quad():
    """Quad"""
    ring = [(1, 0), (0, 5), (1, 10), (2, 5), (1, 0)]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 8, 5, 4


def diamantlike():
    """A diamant-like shape"""
    conv = ToPointsAndSegments()
    conv.add_polygon([[(-15, 0), (-1, 0), (0, -1), (1, 0), (15, 0), (0, 15), (-15, 0)]])
    return conv, 13, 8, 6


def diamant():
    """A diamant-like shape"""
    conv = ToPointsAndSegments()
    conv.add_polygon([[(-1, 0), (0, -1), (1, 0), (0, 5), (-1, 0)]])
    return conv, 8, 5, 4


def two_teeth():
    """A shape with 2 sharp points"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (-2, -1),
            (-1, 0),
            (1, 0),
            (1.5, -0.5),
            (1.2, 0.7),
            (0.4, 1.2),
            (-0.6, 1.1),
            (-1.7, 0.7),
            (-2, -1),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 22, 15, 7


def triangle():
    """A simple triangle"""
    conv = ToPointsAndSegments()
    conv.add_point((10, 0))
    conv.add_point((-2, 8))
    conv.add_point((-2, -8))
    conv.add_segment((10, 0), (-2, 8))
    conv.add_segment((-2, 8), (-2, -8))
    conv.add_segment((-2, -8), (10, 0))
    return conv, 6, 4, 3


def letter_h_bottom_halfleft():
    """Letter H, at bottom half (with parallel events)"""
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (11, 10)],
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (12, 21)],
        [(12, 21), (12, 11)],
        [(12, 11), (10, 11)],
        [(10, 11), (10, 21)],
        [(10, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 37, 26, 6


def quad():
    """Quad"""
    conv = ToPointsAndSegments()
    conv.add_point((8, 2))
    conv.add_point((4, 5))
    conv.add_point((-2, 8))
    conv.add_point((-2, -8))
    conv.add_point((14, 10))
    conv.add_segment((8, 2), (14, 10))
    conv.add_segment((14, 10), (-2, 8))
    conv.add_segment((-2, 8), (-2, -8))
    conv.add_segment((-2, -8), (8, 2))
    conv.add_segment((4, 5), (14, 10))
    conv.add_segment((-2, -8), (4, 5))
    return conv, 14, 9, 4


def dented():
    """A dented shape """
    ln = [
        (0, 0),
        (3, 0),
        (4, 15),
        (5, 0),
        (7, 0),
        (8, 15),
        (9, 0),
        (12, 0),
        (12, 50),
        (11, 50),
        (10, 35),
        (9, 50),
        (7, 50),
        (6, 35),
        (5, 50),
        (3, 50),
        (2, 35),
        (1, 50),
        (0, 50),
        (0, 0),
    ]
    conv = ToPointsAndSegments()
    conv.add_linestring(ln)
    return conv, 56, 38, 9


def dented2():
    """Another dented shape """
    ln = [
        (-25, 0),
        (3, 0),
        (4, 1),
        (5, 0),
        (7, 0),
        (8, 1),
        (9, 0),
        (37, 0),
        (37, 50),
        (11, 50),
        (10, 49),
        (9, 50),
        (3, 50),
        (2, 49),
        (1, 50),
        (-25, 50),
        (-25, 0),
    ]
    conv = ToPointsAndSegments()
    conv.add_linestring(ln)
    return conv, 48, 33, 8


def dented3():
    """Another dented shape """
    ln = [
        (-25, 0),
        (3, 0),
        (4, 1),
        (5, 0),
        (6, 0),
        (7, 0),
        (8, 1),
        (9, 0),
        (37, 0),
        (37, 50),
        (11, 50),
        (10, 49),
        (9, 50),
        (6, 50),
        (3, 50),
        (2, 49),
        (1, 50),
        (-25, 50),
        (-25, 0),
    ]
    conv = ToPointsAndSegments()
    conv.add_linestring(ln)
    return conv, 52, 35, 10


def tiny_v():
    """ Tiny dent """
    conv = ToPointsAndSegments()
    polygon = [
        [
            (-10, 0),
            (-10.0, 100.0),
            (100.0, 100.0),
            (100.0, 0.0),
            (2.0, 0.0),
            (1, -1),
            (0, 0),
            (-10, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 17, 11, 7


def nested_hexagon():
    """Nested hexagon"""
    poly = [
        [
            (0.86603, -0.5),
            (0.86603, 0.5),
            (0.0, 1.0),
            (-0.86603, 0.5),
            (-0.86603, -0.5),
            (-0.0, -1.0),
            (0.86603, -0.5),
        ],
        [
            (1.29904, -0.75),
            (1.29904, 0.75),
            (0.0, 1.5),
            (-1.29904, 0.75),
            (-1.29904, -0.75),
            (-0.0, -1.5),
            (1.29904, -0.75),
        ],
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 36, 25, 6


def nested_hexagon_stretched():
    """A stretched, nested hexagon"""
    poly = [
        [
            (0.86603, -0.5),
            (0.86603, 1.5),
            (0.0, 2.0),
            (-0.86603, 1.5),
            (-0.86603, -0.5),
            (-0.0, -1.0),
            (0.86603, -0.5),
        ],
        [
            (1.29904, -0.75),
            (1.29904, 1.75),
            (0.0, 2.5),
            (-1.29904, 1.75),
            (-1.29904, -0.75),
            (-0.0, -1.5),
            (1.29904, -0.75),
        ],
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 35, 24, 6


def L_0():
    "L shape 0"
    poly = [
        [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (5, -2),
            (5, -3),
            (5, -4),
            (5, -5),
            (6, -5),
            (6, 1),
            (0, 1),
            (0, 0),
        ]
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 39, 27, 6


def L_1():
    "L shape 1"
    poly = [
        [
            (0, 0),
            (1, 0),
            (2, 0),
            (3, 0),
            (4, 0),
            (5, 0),
            (5, -1),
            (5, -2),
            (5, -3),
            (5, -4),
            (5, -5),
            (6, -5),
            (6, 1),
            (0, 1),
            (0, 0),
        ]
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 42, 29, 6


def test_L_2():
    "L shape 2"
    poly = [
        [
            (5, 0),
            (5, -1),
            (5, -2),
            (5, -3),
            (5, -4),
            (5, -5),
            (7, -5),
            (7, 0),
            (8, 0),
            (9, 0),
            (10, 0),
            (11, 0),
            (11, 1),
            (5, 1),
            (5, 0),
        ]
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 40, 27, 11


def parallel_dent():
    """Simple parallel event"""
    conv = ToPointsAndSegments()

    lines = [
        [[0.0, 0.0], [10.0, 0.0]],
        [[10.0, 0.0], [10.0, 10.0]],
        [[10.0, 10.0], [1.0, 10.0]],
        [[1.0, 10.0], [1.0, 7.0]],
        [[1.0, 7.0], [3.0, 7.0]],
        [[3.0, 7.0], [3.0, 6.5]],
        [[3.0, 6.5], [0.0, 6.5]],
        [[0.0, 6.5], [0.0, 0.0]],
    ]
    for line in lines:
        start, end = map(tuple, line)
        conv.add_point(start)
        conv.add_point(end)
        conv.add_segment(start, end)
    return conv, 23, 16, 6


def unequal_dent():
    """Unequal dent"""
    conv = ToPointsAndSegments()
    lines = [
        [[51046.4, 391515.7], [51046.3, 391516.65]],
        [[51047.95, 391513.05], [51047.55, 391515.85]],
        [[51047.55, 391515.85], [51046.4, 391515.7]],
        [[51047.45, 391516.8], [51046.9, 391520.8]],
        [[51046.3, 391516.65], [51047.45, 391516.8]],
        [[51055, 391521], [51057, 391514]],
        [[51046.9, 391520.8], [51055, 391521]],
        [[51047.95, 391513.05], [51057, 391514]],
    ]
    for line in lines:
        start, end = map(tuple, line)
        conv.add_point(start)
        conv.add_point(end)
        conv.add_segment(start, end)
    return conv, 23, 16, 6


def dent_unequal_wavefront_side_flipped_y():
    "Simple parallel event, starting from wavefront side"

    def flip_y(pt):
        return (pt[0], -pt[1])

    conv = ToPointsAndSegments()
    lines = [
        [[51046.4, 391515.7], [51046.3, 391516.65]],
        [[51047.95, 391513.05], [51047.55, 391515.85]],
        [[51047.55, 391515.85], [51046.4, 391515.7]],
        [[51047.45, 391516.8], [51046.9, 391520.8]],
        [[51046.3, 391516.65], [51047.45, 391516.8]],
        [[51055, 391521], [51057, 391514]],
        [[51046.9, 391520.8], [51055, 391521]],
        [[51047.95, 391513.05], [51057, 391514]],
    ]
    for line in lines:
        start, end = map(tuple, map(flip_y, line))
        conv.add_point(start)
        conv.add_point(end)
        conv.add_segment(start, end)
    return conv, 23, 16, 6


def simple_square():
    "A simple parallel collapsing square"
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (10, 0), (10, 10), (0, 10), (0, 0)]]
    conv.add_polygon(polygon)
    return conv, 8, 5, 4


def simple_rectangle():
    "A simple parallel collapsing rectangle"
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (10, 0), (10, 5), (0, 5), (0, 0)]]
    conv.add_polygon(polygon)
    return conv, 9, 6, 4


def dent_unequal_top():
    """dent unequal top"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0, 0),
            (10.0, 0),
            (10, 20),
            (-0.5, 20.0),
            (-0.5, 11.0),
            (-1, 11),
            (-1, 10),
            (0, 10),
            (0, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8


def dent_unequal_bottom():
    """dent unequal bottom"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (-0.5, 0),
            (10.0, 0),
            (10, 20),
            (0, 20.0),
            (0, 11.0),
            (-1, 11),
            (-1, 10),
            (-0.5, 10),
            (-0.5, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 21, 14, 8


def diamantlike2():
    """diamant - like"""
    conv = ToPointsAndSegments()
    conv.add_polygon([[(-15, 0), (-1, 0), (0, -1), (1, 0), (15, 0), (0, 15), (-15, 0)]])
    return conv, 13, 8, 6


def test_squarish1():
    """squarish 1"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(4, 0), (5, 0), (5, 2), (5, 3), (5, 4), (5, 10), (4, 10), (4, 0)]]
    )
    return conv, 18, 12, 7


def test_squarish2():
    """squarish 2"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(5, 0), (4, 0), (4, 2), (4, 3), (4, 4), (4, 10), (5, 10), (5, 0)]]
    )
    return conv, 18, 12, 7


def test_simple_squarish():
    """simple squarish"""
    segments = [
        [(0, 0), (5, 0)],
        [(5, 0), (5, 10)],
        [(5, 10), (0, 10)],
        [(0, 10), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 9, 6, 4


def test_koch_rec1():
    """Koch curve recursing once"""
    ring = [
        (0.0, 0.0),
        (0.4999999999999999, 0.8660254037844387),
        (-3.3306690738754696e-16, 1.7320508075688772),
        (0.9999999999999997, 1.7320508075688776),
        (1.4999999999999993, 2.5980762113533165),
        (1.9999999999999991, 1.7320508075688776),
        (2.999999999999999, 1.7320508075688774),
        (2.499999999999999, 0.8660254037844389),
        (2.9999999999999987, 1.1102230246251565e-16),
        (1.9999999999999987, 2.33486982377251e-16),
        (1.4999999999999982, -0.8660254037844382),
        (0.9999999999999984, 5.551115123125783e-16),
        (0, 0),
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 24, 13, 12


def test_tudelft_logo():
    "Failing case: missed event (top of E) + wavefront linked list is messed up after parallel events"
    polys = [
        # flame
        [
            (28.2387, 57.1504),
            (27.7545962891, 57.0337472656),
            (27.2828078125, 56.993484375),
            (26.8394935547, 57.0375167969),
            (26.4408125, 57.17375),
            (26.1029236328, 57.4100894531),
            (25.8419859375, 57.754440625),
            (25.6741583984, 58.2147089844),
            (25.6156, 58.7988),
            (25.6856849121, 59.2881812744),
            (25.8839386719, 59.7683330078),
            (26.1934848145, 60.2400170654),
            (26.597446875, 60.7039953125),
            (27.6211128906, 61.6118818359),
            (28.819925, 62.4980875),
            (30.0588714844, 63.3687072266),
            (31.202940625, 64.2298359375),
            (32.1171207031, 65.0875685547),
            (32.4458111816, 65.5170659912),
            (32.6664, 65.948),
            (32.8248125, 66.6851625),
            (32.7710109375, 66.9061765625),
            (32.6176, 66.9805),
            (32.5208703125, 66.9222546875),
            (32.4679125, 66.7729125),
            (32.3706484375, 66.5442390625),
            (32.141, 66.248),
            (31.1034759766, 65.3984353516),
            (29.9355515625, 64.7423015625),
            (28.6692482422, 64.2321388672),
            (27.3365875, 63.8204875),
            (24.6002796875, 63.1028796875),
            (23.2606755859, 62.7020037109),
            (21.9828, 62.2098),
            (20.9997419922, 61.7483013672),
            (19.7656484375, 61.0788734375),
            (18.4207775391, 60.1820806641),
            (17.1053875, 59.0384875),
            (16.5025784912, 58.3680671631),
            (15.9597365234, 57.6286583984),
            (15.4943938721, 56.8178317627),
            (15.1240828125, 55.9331578125),
            (14.8663356201, 54.9722071045),
            (14.7386845703, 53.9325501953),
            (14.7586619385, 52.8117576416),
            (14.9438, 51.6074),
            (15.122925, 50.8023),
            (15.252640625, 50.40393125),
            (15.3949, 50.2336),
            (15.5243578125, 50.3437421875),
            (15.5897375, 50.6433625),
            (15.6117, 51.6262),
            (15.6561465332, 52.3362411621),
            (15.8000691406, 52.9857136719),
            (16.031892334, 53.5809723145),
            (16.340040625, 54.128371875),
            (17.1390105469, 55.1050128906),
            (18.104375, 55.966475),
            (20.163871875, 57.547215625),
            (21.0727964844, 58.3681707031),
            (21.7777, 59.2773),
            (22.104725, 59.739675),
            (22.2554875, 59.862834375),
            (22.3512, 59.8191),
            (22.3023, 59.3027),
            (22.0503148438, 58.5393394531),
            (21.6885625, 57.836665625),
            (20.851325, 56.570375),
            (20.4836242188, 55.9852566406),
            (20.221725, 55.417821875),
            (20.1195195312, 54.8573199219),
            (20.2309, 54.293),
            (20.6030839844, 53.7075248047),
            (21.082534375, 53.4021359375),
            (21.6320488281, 53.3341009766),
            (22.214425, 53.4606875),
            (22.7924605469, 53.7391630859),
            (23.328953125, 54.1267953125),
            (23.7867003906, 54.5808517578),
            (24.1285, 55.0586),
            (24.368925, 55.470225),
            (24.465971875, 55.57165625),
            (24.5609, 55.5859),
            (24.6368625, 55.3106625),
            (24.5941, 54.791),
            (24.2621640625, 53.2469984375),
            (23.7833125, 51.9836375),
            (23.4592181641, 51.4272880859),
            (23.0629046875, 50.9052078125),
            (22.0063, 49.916),
            (21.566953125, 49.6562546875),
            (21.130475, 49.4675625),
            (20.815009375, 49.2970390625),
            (20.7395761719, 49.2020642578),
            (20.7387, 49.0918),
            (20.9814125, 49.0273125),
            (21.4195, 49.0469),
            (22.2465202881, 49.156970874),
            (23.0534919922, 49.3736341797),
            (23.8374688721, 49.6869346924),
            (24.5955046875, 50.0869171875),
            (26.0219681641, 51.1071072266),
            (27.3093125, 52.3545625),
            (28.4339677734, 53.7496412109),
            (29.3723640625, 55.2127015625),
            (30.1009314453, 56.6641017578),
            (30.5961, 58.0242),
            (30.6886375, 58.3597625),
            (30.6215, 58.5781),
            (30.509940625, 58.5979578125),
            (30.381, 58.5274875),
            (30.0922, 58.2668),
            (29.2161125, 57.616425),
            (28.2387, 57.1504),
        ],
        # T
        [
            (15.5055, 28.7004),
            (20.8063, 28.7004),
            (20.8063, 44.1211),
            (26.7445, 44.1211),
            (26.7445, 47.8328),
            (9.5668, 47.8328),
            (9.5668, 44.1211),
            (15.5055, 44.1211),
            (15.5055, 28.7004),
        ],
        # U
        [
            (38.3852, 32.0156),
            (39.2659501953, 32.0912681641),
            (40.0374453125, 32.3105390625),
            (40.6971646484, 32.6618123047),
            (41.2425875, 33.1334875),
            (41.6711931641, 33.7139642578),
            (41.9804609375, 34.3916421875),
            (42.1678701172, 35.1549208984),
            (42.2309, 35.9922),
            (42.2309, 47.834),
            (47.5316, 47.834),
            (47.5316, 35.7273),
            (47.4732092773, 34.7657740479),
            (47.3213726562, 33.8784173828),
            (47.081449707, 33.063555542),
            (46.7588, 32.3195140625),
            (46.3587831055, 31.6446184814),
            (45.8867585938, 31.0371943359),
            (45.3480860352, 30.4955671631),
            (44.748125, 30.0180625),
            (44.0922350586, 29.6030058838),
            (43.3857757812, 29.2487228516),
            (41.8425875, 28.7157796875),
            (40.1614367187, 28.4058373047),
            (38.3852, 28.3055),
            (36.6090451172, 28.4058373047),
            (34.9279234375, 28.7157796875),
            (33.3847244141, 29.2487228516),
            (32.6782488525, 29.6030058838),
            (32.0223375, 30.0180625),
            (31.4223515381, 30.4955671631),
            (30.8836521484, 31.0371943359),
            (30.4116005127, 31.6446184814),
            (30.0115578125, 32.3195140625),
            (29.6888852295, 33.063555542),
            (29.4489439453, 33.8784173828),
            (29.2970951416, 34.7657740479),
            (29.2387, 35.7273),
            (29.2387, 47.834),
            (34.5395, 47.834),
            (34.5395, 35.9922),
            (34.6025257812, 35.1549208984),
            (34.789925, 34.3916421875),
            (35.0991804687, 33.7139642578),
            (35.527775, 33.1334875),
            (36.0731914062, 32.6618123047),
            (36.7329125, 32.3105390625),
            (37.5044210937, 32.0912681641),
            (38.3852, 32.0156),
        ],
        # D -- exterior
        [
            (55.4875, 45.5563),
            (59.4066, 45.5563),
            (60.2057835693, 45.5178564697),
            (60.9454076172, 45.4051830078),
            (61.6265759033, 45.2222653076),
            (62.2503921875, 44.9730890625),
            (62.8179602295, 44.6616399658),
            (63.3303837891, 44.2919037109),
            (64.1942125, 43.3935125),
            (64.8507083984, 42.3098009766),
            (65.3087015625, 41.0726546875),
            (65.5770220703, 39.7139591797),
            (65.6645, 38.2656),
            (65.5770220703, 36.8175103516),
            (65.3087015625, 35.4592765625),
            (64.8507083984, 34.2227138672),
            (64.1942125, 33.1396375),
            (63.3303837891, 32.2418626953),
            (62.8179602295, 31.8724056396),
            (62.2503921875, 31.5612046875),
            (61.6265759033, 31.3122367432),
            (60.9454076172, 31.1294787109),
            (60.2057835693, 31.0169074951),
            (59.4066, 30.9785),
            (55.4875, 30.9785),
            (55.4875, 45.5563),
        ],
        # D -- interior
        [
            (52.8324, 28.7004),
            (59.4059, 28.7004),
            (60.8560672363, 28.7788331543),
            (62.1440332031, 29.0031808594),
            (63.2792692871, 29.3570154785),
            (64.271246875, 29.823909375),
            (65.1294373535, 30.3874349121),
            (65.8633121094, 31.0311644531),
            (66.4823425293, 31.7386703613),
            (66.996, 32.493525),
            (67.4137559082, 33.2793007324),
            (67.7450816406, 34.0795699219),
            (68.186328125, 35.657878125),
            (68.3955105469, 37.0970285156),
            (68.4484, 38.2656),
            (68.3955105469, 39.4344525391),
            (68.186328125, 40.8740328125),
            (67.7450816406, 42.4528623047),
            (67.4137559082, 43.2534084717),
            (66.996, 44.0394625),
            (66.4823425293, 44.7945895752),
            (65.8633121094, 45.5023548828),
            (65.1294373535, 46.1463236084),
            (64.271246875, 46.7100609375),
            (63.2792692871, 47.1771320557),
            (62.1440332031, 47.5311021484),
            (60.8560672363, 47.7555364014),
            (59.4059, 47.834),
            (52.8324, 47.834),
            (52.8324, 28.7004),
        ],
        #          #e
        #          #e -- outershell
        [
            (82.9195, 34.8762),
            (82.9195, 36.123),
            (82.8224828125, 37.4505816406),
            (82.53454375, 38.658784375),
            (82.0603515625, 39.7298449219),
            (81.404575, 40.646),
            (80.5718828125, 41.3894863281),
            (79.56694375, 41.942540625),
            (78.3944265625, 42.2873996094),
            (77.059, 42.4063),
            (76.2952375244, 42.3687171631),
            (75.5838064453, 42.2585341797),
            (74.9242850342, 42.0795993408),
            (74.3162515625, 41.8357609375),
            (73.7592843018, 41.5308672607),
            (73.2529615234, 41.1687666016),
            (72.3905625, 40.2883375),
            (71.7256806641, 39.2252599609),
            (71.2549421875, 38.0103203125),
            (70.9749732422, 36.6743048828),
            (70.8824, 35.248),
            (70.9637001953, 33.823009375),
            (71.2144078125, 32.50744375),
            (71.6447333984, 31.3261375),
            (72.2648875, 30.303925),
            (73.0850806641, 29.465640625),
            (73.5733826904, 29.1232322266),
            (74.1155234375, 28.83611875),
            (74.7127792236, 28.6074044922),
            (75.3664263672, 28.44019375),
            (76.848, 28.3027),
            (77.9991910156, 28.3734771484),
            (79.058021875, 28.5858296875),
            (80.0117917969, 28.9397892578),
            (80.8478, 29.4353875),
            (81.5533457031, 30.0726560547),
            (82.115728125, 30.8516265625),
            (82.5222464844, 31.7723306641),
            (82.7602, 32.8348),
            (80.1098, 32.8348),
            (79.9671755859, 32.1632625),
            (79.7567359375, 31.59635),
            (79.4750064453, 31.1294125),
            (79.1185125, 30.7578),
            (78.6837794922, 30.4768625),
            (78.1673328125, 30.28195),
            (77.5656978516, 30.1684125),
            (76.8754, 30.1316),
            (75.9894021484, 30.2347720703),
            (75.2544671875, 30.5276953125),
            (74.6604455078, 30.9854802734),
            (74.1971875, 31.5832375),
            (73.8545435547, 32.2960775391),
            (73.6223640625, 33.0991109375),
            (73.4904994141, 33.9674482422),
            (73.4488, 34.8762),
            (82.9195, 34.8762),
            (82.9195, 34.8762),
        ],
        # e -- innershell
        [
            (73.5055, 36.6262),
            (73.5694832031, 37.3917933594),
            (73.744890625, 38.118946875),
            (74.0270464844, 38.7880457031),
            (74.411275, 39.379475),
            (74.8929003906, 39.8736199219),
            (75.467246875, 40.250865625),
            (76.1296386719, 40.4915972656),
            (76.8754, 40.5762),
            (77.7209189453, 40.4999767578),
            (78.4335015625, 40.2795953125),
            (79.0193740234, 39.9274880859),
            (79.4847625, 39.4560875),
            (79.8358931641, 38.8778259766),
            (80.0789921875, 38.2051359375),
            (80.2202857422, 37.4504498047),
            (80.266, 36.6262),
            (73.5055, 36.6262),
        ],
        # l
        [
            (85.973, 28.6992),
            (88.49331, 28.6992),
            (88.49331, 47.834),
            (85.973, 47.834),
            (85.973, 28.6992),
            (85.973, 28.6992),
        ],
        # f
        [
            (96.3883, 28.7004),
            (96.3883, 40.2512),
            (99.4605, 40.2512),
            (99.4605, 42.0027),
            (96.3883, 42.0027),
            (96.3883, 44.1512),
            (96.4229054688, 44.6702857422),
            (96.52635625, 45.0817171875),
            (96.6981039062, 45.3973431641),
            (96.9376, 45.6290125),
            (97.2442960938, 45.7885740234),
            (97.61764375, 45.8878765625),
            (98.5621, 45.9531),
            (99.8336, 45.875),
            (99.8336, 47.9656),
            (98.9403125, 48.1487),
            (98.0309, 48.2313),
            (97.1673613281, 48.1749609375),
            (96.374484375, 48.004725),
            (95.6659777344, 47.7187640625),
            (95.05555, 47.31525),
            (94.5569097656, 46.7923546875),
            (94.183765625, 46.14825),
            (93.9498261719, 45.3811078125),
            (93.8688, 44.4891),
            (93.8688, 42.0027),
            (91.273, 42.0027),
            (91.273, 40.2512),
            (93.8688, 40.2512),
            (93.8688, 28.7004),
            (96.3883, 28.7004),
        ],
        # t
        [
            (100.908, 42.0027),
            (100.908, 40.2512),
            (103.188, 40.2512),
            (103.188, 31.7734),
            (103.250359375, 30.4847203125),
            (103.393189453, 29.8978896484),
            (103.668125, 29.3748875),
            (104.118419922, 28.9348306641),
            (104.787328125, 28.5968359375),
            (105.718103516, 28.3800201172),
            (106.954, 28.3035),
            (107.811, 28.3438375),
            (108.677, 28.4609),
            (108.677, 30.3953),
            (107.35, 30.2371),
            (106.713328125, 30.322746875),
            (106.191125, 30.58245),
            (105.837859375, 31.020353125),
            (105.708, 31.6406),
            (105.708, 40.2512),
            (108.782, 40.2512),
            (108.782, 42.0027),
            (105.708, 42.0027),
            (105.708, 45.634),
            (103.188, 44.8391),
            (103.188, 42.0012),
            (100.908, 42.0027),
        ],
    ]
    conv = ToPointsAndSegments()
    for ring in polys:
        dedup = []
        for cur, nxt in zip(ring, ring[1:]):
            if cur != nxt:
                dedup.append(cur)
        dedup += [dedup[0]]
        conv.add_polygon([dedup])
    return conv, 1398, 1043, 14


def test_tudelft_logo_E():
    """The small letter 'e' of the TU Delft logo"""
    polys = [
        #          #e
        #          #e -- outershell
        [
            (82.9195, 34.8762),
            (82.9195, 36.123),
            (82.8224828125, 37.4505816406),
            (82.53454375, 38.658784375),
            (82.0603515625, 39.7298449219),
            (81.404575, 40.646),
            (80.5718828125, 41.3894863281),
            (79.56694375, 41.942540625),
            (78.3944265625, 42.2873996094),
            (77.059, 42.4063),
            (76.2952375244, 42.3687171631),
            (75.5838064453, 42.2585341797),
            (74.9242850342, 42.0795993408),
            (74.3162515625, 41.8357609375),
            (73.7592843018, 41.5308672607),
            (73.2529615234, 41.1687666016),
            (72.3905625, 40.2883375),
            (71.7256806641, 39.2252599609),
            (71.2549421875, 38.0103203125),
            (70.9749732422, 36.6743048828),
            (70.8824, 35.248),
            (70.9637001953, 33.823009375),
            (71.2144078125, 32.50744375),
            (71.6447333984, 31.3261375),
            (72.2648875, 30.303925),
            (73.0850806641, 29.465640625),
            (73.5733826904, 29.1232322266),
            (74.1155234375, 28.83611875),
            (74.7127792236, 28.6074044922),
            (75.3664263672, 28.44019375),
            (76.848, 28.3027),
            (77.9991910156, 28.3734771484),
            (79.058021875, 28.5858296875),
            (80.0117917969, 28.9397892578),
            (80.8478, 29.4353875),
            (81.5533457031, 30.0726560547),
            (82.115728125, 30.8516265625),
            (82.5222464844, 31.7723306641),
            (82.7602, 32.8348),
            (80.1098, 32.8348),
            (79.9671755859, 32.1632625),
            (79.7567359375, 31.59635),
            (79.4750064453, 31.1294125),
            (79.1185125, 30.7578),
            (78.6837794922, 30.4768625),
            (78.1673328125, 30.28195),
            (77.5656978516, 30.1684125),
            (76.8754, 30.1316),
            (75.9894021484, 30.2347720703),
            (75.2544671875, 30.5276953125),
            (74.6604455078, 30.9854802734),
            (74.1971875, 31.5832375),
            (73.8545435547, 32.2960775391),
            (73.6223640625, 33.0991109375),
            (73.4904994141, 33.9674482422),
            (73.4488, 34.8762),
            (82.9195, 34.8762),
            (82.9195, 34.8762),
        ],
        # e -- innershell
        [
            (73.5055, 36.6262),
            (73.5694832031, 37.3917933594),
            (73.744890625, 38.118946875),
            (74.0270464844, 38.7880457031),
            (74.411275, 39.379475),
            (74.8929003906, 39.8736199219),
            (75.467246875, 40.250865625),
            (76.1296386719, 40.4915972656),
            (76.8754, 40.5762),
            (77.7209189453, 40.4999767578),
            (78.4335015625, 40.2795953125),
            (79.0193740234, 39.9274880859),
            (79.4847625, 39.4560875),
            (79.8358931641, 38.8778259766),
            (80.0789921875, 38.2051359375),
            (80.2202857422, 37.4504498047),
            (80.266, 36.6262),
            (73.5055, 36.6262),
        ],
    ]
    conv = ToPointsAndSegments()
    for ring in polys:
        dedup = []
        for cur, nxt in zip(ring, ring[1:]):
            if cur != nxt:
                dedup.append(cur)
        dedup += [dedup[0]]
        conv.add_polygon([dedup])
    return conv, 258, 186, 31


def test_dented_parallel_WITH_intermediate_nodes():
    """Letter H - parallel mid"""
    #### FIXME: Interestingly the following input, generates a reasonable skeleton
    #### However, it also creates skeletons of 0 units length (starting and stopping in the same node ???)
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (9.5, 10)],  #
        [(9.5, 10), (9.5, 10 - 0.1)],
        [(9.5, 10 - 0.1), (9.5 + 0.1, 10 - 0.1)],
        [(9.5 + 0.1, 10 - 0.1), (9.5 + 0.1, 10)],  #
        [(9.5 + 0.1, 10), (11, 10)],  #
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (11, 21)],
        [(11, 21), (11, 10.1)],
        [(11, 10.1), (9.6333, 10.1)],
        [(9.6333, 10.1), (9.4, 10.1)],
        [(9.4, 10.1), (9.0, 10.1)],
        [(9, 10.1), (9, 21)],
        [(9, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 57, 40, 6


def test_straight_parallel_intermediates():
    """Letter H - parallel mid"""
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (9.13, 10)],  #
        [(9.13, 10), (9.33, 10)],  #
        [(9.33, 10), (9.5, 10)],
        [(9.5, 10), (10.5, 10)],
        [(10.5, 10), (11, 10)],  #
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (11, 21)],
        [(11, 21), (11, 10.1)],
        [(11, 10.1), (9.0, 10.1)],
        [(9, 10.1), (9, 21)],
        [(9, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 51, 36, 6


def test_letter_h_midmid_manyvert():
    """Letter H - parallel mid"""
    # FAILING test
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (9.13, 10)],  #
        [(9.13, 10), (9.33, 10)],  #
        [(9.33, 10), (9.5, 10)],
        [(9.5, 10), (9.8, 10)],  #
        [(9.8, 10), (10, 10)],  #
        [(10, 10), (10.5, 10)],  #
        [(10.5, 10), (11, 10)],  #
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (11, 21)],
        [(11, 21), (11, 10.1)],
        [(11, 10.1), (9.8, 10.1)],
        [(9.8, 10.1), (9, 10.1)],
        [(9, 10.1), (9, 21)],
        [(9, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 61, 43, 6


def test_letter_h_midmid():
    """Letter H - parallel mid"""
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (11, 10)],
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (11, 21)],
        [(11, 21), (11, 11)],
        [(11, 11), (9, 11)],
        [(9, 11), (9, 21)],
        [(9, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 35, 24, 6


def test_letter_h_halfleft():
    """Letter H - parallel - half left"""
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (11, 10)],
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (10, 21)],  #
        [(10, 21), (10, 11)],  #
        [(10, 11), (9, 11)],  #
        [(9, 11), (9, 21)],
        [(9, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 35, 24, 6


def test_letter_h_halfright():
    """Letter H - half right"""
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (11, 10)],
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (11, 21)],
        [(11, 21), (11, 11)],
        [(11, 11), (10, 11)],  #
        [(10, 11), (10, 21)],  #
        [(10, 21), (0, 21)],  #
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 36, 25, 6


def test_letter_h_bottom_halfleft():
    """Letter H - parallel - bottom half left"""
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (10, 10)],
        [(10, 10), (10, 0)],
        [(10, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (11, 21)],
        [(11, 21), (11, 11)],
        [(11, 11), (9, 11)],
        [(9, 11), (9, 21)],
        [(9, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 35, 24, 6


def test_letter_h_bottom_halfleft():
    """Letter H - parallel - bottom half left"""
    segments = [
        [(0, 0), (9, 0)],
        [(9, 0), (9, 10)],
        [(9, 10), (11, 10)],
        [(11, 10), (11, 0)],
        [(11, 0), (21, 0)],
        [(21, 0), (21, 21)],
        [(21, 21), (12, 21)],
        [(12, 21), (12, 11)],
        [(12, 11), (10, 11)],
        [(10, 11), (10, 21)],
        [(10, 21), (0, 21)],
        [(0, 21), (0, 0)],
    ]
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 37, 26, 6


def sfcgal_bug_111():
    """Rather large poly

    from: https://github.com/Oslandia/SFCGAL/issues/111
    """

    poly = [
        [
            (-86.53986, 32.35124),
            (-86.54, 32.35202),
            (-86.54122, 32.35622),
            (-86.5424, 32.3611),
            (-86.54368, 32.36537),
            (-86.54456, 32.36679),
            (-86.54509, 32.36723),
            (-86.54565, 32.36764),
            (-86.54625, 32.36801),
            (-86.54679, 32.3683),
            (-86.54744, 32.3686),
            (-86.54802, 32.36881),
            (-86.5486, 32.36897),
            (-86.54911, 32.36907),
            (-86.54982, 32.36913),
            (-86.55044, 32.36911),
            (-86.55379, 32.36878),
            (-86.55473, 32.36867),
            (-86.55599, 32.3686),
            (-86.55683, 32.3686),
            (-86.55767, 32.36864),
            (-86.5585, 32.36873),
            (-86.55933, 32.36885),
            (-86.56025, 32.36946),
            (-86.563, 32.37094),
            (-86.56472, 32.37169),
            (-86.56526, 32.37209),
            (-86.56575, 32.37241),
            (-86.56864, 32.37416),
            (-86.57102, 32.37512),
            (-86.57266, 32.37549),
            (-86.5742, 32.3758),
            (-86.57513, 32.37597),
            (-86.57586, 32.37606),
            (-86.57669, 32.3761),
            (-86.57763, 32.37607),
            (-86.57857, 32.37596),
            (-86.57938, 32.37581),
            (-86.57998, 32.37565),
            (-86.58203, 32.37503),
            (-86.58221, 32.37478),
            (-86.58247, 32.3743),
            (-86.5828, 32.37408),
            (-86.58309, 32.37383),
            (-86.58412, 32.37257),
            (-86.58475, 32.37197),
            (-86.58517, 32.37146),
            (-86.58559, 32.37084),
            (-86.58817, 32.36769),
            (-86.58904, 32.36538),
            (-86.58999, 32.36276),
            (-86.59021, 32.36235),
            (-86.59046, 32.36207),
            (-86.59076, 32.36182),
            (-86.59217, 32.36106),
            (-86.59236, 32.36099),
            (-86.59267, 32.36092),
            (-86.59298, 32.3609),
            (-86.59319, 32.36092),
            (-86.5936, 32.36102),
            (-86.59396, 32.3612),
            (-86.59533, 32.36137),
            (-86.59825, 32.36329),
            (-86.60223, 32.36609),
            (-86.60281, 32.36631),
            (-86.60346, 32.36661),
            (-86.60401, 32.36689),
            (-86.60722, 32.36875),
            (-86.61216, 32.37209),
            (-86.61286, 32.37262),
            (-86.61358, 32.37326),
            (-86.61405, 32.37373),
            (-86.61533, 32.37516),
            (-86.61578, 32.37597),
            (-86.61613, 32.37682),
            (-86.61631, 32.37743),
            (-86.61641, 32.37797),
            (-86.61648, 32.3785),
            (-86.61651, 32.37913),
            (-86.61649, 32.37958),
            (-86.61644, 32.38012),
            (-86.61608, 32.38222),
            (-86.6154, 32.38401),
            (-86.61466, 32.38617),
            (-86.61394, 32.38814),
            (-86.61366, 32.38919),
            (-86.61347, 32.39026),
            (-86.61339, 32.39115),
            (-86.6133, 32.39344),
            (-86.6135, 32.39731),
            (-86.6136, 32.3981),
            (-86.61374, 32.39889),
            (-86.61394, 32.39976),
            (-86.61408, 32.40029),
            (-86.6143, 32.40089),
            (-86.61452, 32.4014),
            (-86.61478, 32.40189),
            (-86.61512, 32.40245),
            (-86.61574, 32.40329),
            (-86.61711, 32.40485),
            (-86.61944, 32.40627),
            (-86.61988, 32.40649),
            (-86.62026, 32.40663),
            (-86.62065, 32.40675),
            (-86.62115, 32.40684),
            (-86.62167, 32.40688),
            (-86.62208, 32.40687),
            (-86.62239, 32.40683),
            (-86.6228, 32.40672),
            (-86.62326, 32.4065),
            (-86.62366, 32.40621),
            (-86.62488, 32.40487),
            (-86.62644, 32.40383),
            (-86.62881, 32.40266),
            (-86.62927, 32.40245),
            (-86.62975, 32.40228),
            (-86.63014, 32.40216),
            (-86.63096, 32.40201),
            (-86.63147, 32.40196),
            (-86.632, 32.40194),
            (-86.63325, 32.40202),
            (-86.63398, 32.40212),
            (-86.634322, 32.4021809041096),
            (-86.634322, 32.404945),
            (-86.63397, 32.40533),
            (-86.63368, 32.40636),
            (-86.63438, 32.40688),
            (-86.634322, 32.40712),
            (-86.634322, 32.4115382564103),
            (-86.63409, 32.4118),
            (-86.63431, 32.41309),
            (-86.63403, 32.41353),
            (-86.63359, 32.41415),
            (-86.63365, 32.41513),
            (-86.63452, 32.41597),
            (-86.63441, 32.41692),
            (-86.6346, 32.41797),
            (-86.63472, 32.41812),
            (-86.63509, 32.41858),
            (-86.63586, 32.4194),
            (-86.63623, 32.42124),
            (-86.63322, 32.42324),
            (-86.63134, 32.4245),
            (-86.62861, 32.42487),
            (-86.62893, 32.43063),
            (-86.62895, 32.43125),
            (-86.62899, 32.43207),
            (-86.62895, 32.43257),
            (-86.62867, 32.43362),
            (-86.62863, 32.43378),
            (-86.62798, 32.43607),
            (-86.62761, 32.43717),
            (-86.62772, 32.43717),
            (-86.63013, 32.43715),
            (-86.63297, 32.43713),
            (-86.63303, 32.43713),
            (-86.63359, 32.4406),
            (-86.63374, 32.44202),
            (-86.63382, 32.44344),
            (-86.63389, 32.44727),
            (-86.63389, 32.4474),
            (-86.63162, 32.44738),
            (-86.62464, 32.45148),
            (-86.62434, 32.45221),
            (-86.62436, 32.45231),
            (-86.62445, 32.45243),
            (-86.62454, 32.45255),
            (-86.62465, 32.45266),
            (-86.62477, 32.45277),
            (-86.6249, 32.45288),
            (-86.62504, 32.45298),
            (-86.62519, 32.45309),
            (-86.62536, 32.45319),
            (-86.62543, 32.45323),
            (-86.62552, 32.45326),
            (-86.62563, 32.45329),
            (-86.62574, 32.45331),
            (-86.62588, 32.45332),
            (-86.62602, 32.45332),
            (-86.62618, 32.45332),
            (-86.627871611139, 32.4533045514964),
            (-86.63431, 32.4553),
            (-86.63522, 32.45909),
            (-86.63538, 32.45991),
            (-86.63599, 32.46301),
            (-86.63613, 32.46353),
            (-86.63634, 32.46459),
            (-86.63771, 32.46427),
            (-86.63849, 32.46408),
            (-86.639, 32.46395),
            (-86.63952, 32.46379),
            (-86.63976, 32.46368),
            (-86.63996, 32.46357),
            (-86.64018, 32.46342),
            (-86.64039, 32.46325),
            (-86.64056, 32.46309),
            (-86.64073, 32.46289),
            (-86.64084, 32.46274),
            (-86.641, 32.4625),
            (-86.64119, 32.46208),
            (-86.64138, 32.46165),
            (-86.64142, 32.46155),
            (-86.64261, 32.46171),
            (-86.64345, 32.46211),
            (-86.64524, 32.46472),
            (-86.64546, 32.46526),
            (-86.64545, 32.46568),
            (-86.64584, 32.46598),
            (-86.64589, 32.46681),
            (-86.6605, 32.4853),
            (-86.66142, 32.48363),
            (-86.66288, 32.48032),
            (-86.66314, 32.47985),
            (-86.66379, 32.47883),
            (-86.66396, 32.47852),
            (-86.66412, 32.47811),
            (-86.66455, 32.4768),
            (-86.66586, 32.47391),
            (-86.66603, 32.47341),
            (-86.66646, 32.47197),
            (-86.6669, 32.47),
            (-86.66703, 32.46929),
            (-86.66745, 32.46641),
            (-86.66751, 32.46627),
            (-86.66803, 32.46542),
            (-86.66815, 32.46511),
            (-86.66818, 32.46487),
            (-86.66816, 32.46471),
            (-86.66809, 32.46455),
            (-86.66742, 32.4635),
            (-86.66639, 32.46207),
            (-86.6655, 32.46103),
            (-86.66502, 32.46052),
            (-86.66445, 32.45909),
            (-86.66314, 32.45618),
            (-86.6625870561837, 32.4546190347134),
            (-86.66314, 32.45452),
            (-86.66384, 32.4545),
            (-86.66478, 32.45438),
            (-86.66511, 32.45434),
            (-86.66517, 32.45391),
            (-86.66505, 32.45354),
            (-86.66602, 32.4551),
            (-86.66606, 32.45506),
            (-86.66631, 32.45497),
            (-86.6669, 32.45486),
            (-86.66711, 32.45485),
            (-86.66721, 32.45489),
            (-86.66729, 32.45495),
            (-86.66772, 32.45556),
            (-86.66773, 32.45563),
            (-86.66755, 32.45578),
            (-86.66753, 32.45583),
            (-86.66757, 32.45594),
            (-86.66755, 32.45619),
            (-86.66745, 32.45635),
            (-86.6674, 32.45639),
            (-86.66735, 32.45639),
            (-86.66738, 32.4565),
            (-86.66748, 32.45662),
            (-86.66757, 32.45668),
            (-86.66775, 32.45672),
            (-86.66794, 32.45672),
            (-86.66807, 32.45668),
            (-86.66829, 32.45656),
            (-86.66833, 32.45651),
            (-86.66838, 32.45639),
            (-86.66844, 32.45605),
            (-86.66849, 32.45537),
            (-86.66847, 32.45522),
            (-86.66843, 32.45514),
            (-86.6683, 32.45501),
            (-86.6678, 32.45464),
            (-86.66739, 32.45449),
            (-86.66726, 32.45436),
            (-86.6671, 32.45407),
            (-86.66703, 32.45386),
            (-86.66699, 32.45356),
            (-86.66698, 32.45247),
            (-86.66695, 32.45237),
            (-86.6668, 32.4521),
            (-86.66668, 32.45194),
            (-86.66665, 32.45181),
            (-86.66665, 32.45169),
            (-86.66682, 32.45138),
            (-86.66686, 32.45124),
            (-86.66685, 32.45111),
            (-86.66682, 32.45103),
            (-86.66677, 32.45095),
            (-86.66669, 32.45089),
            (-86.66648, 32.4508),
            (-86.66617, 32.45071),
            (-86.66535, 32.45041),
            (-86.66519, 32.4503),
            (-86.66507, 32.45014),
            (-86.66499, 32.44999),
            (-86.66496, 32.44983),
            (-86.66498, 32.44936),
            (-86.66501, 32.44922),
            (-86.66517, 32.44893),
            (-86.66518, 32.44883),
            (-86.66513, 32.44868),
            (-86.66506, 32.44862),
            (-86.66482, 32.44846),
            (-86.66466, 32.44832),
            (-86.66451, 32.44783),
            (-86.6645, 32.44775),
            (-86.66494, 32.44777),
            (-86.66747, 32.44763),
            (-86.66758, 32.44756),
            (-86.67144, 32.45103),
            (-86.67393, 32.45331),
            (-86.67505, 32.45454),
            (-86.67535, 32.45498),
            (-86.67553, 32.45527),
            (-86.67569, 32.45567),
            (-86.67576, 32.45617),
            (-86.67582, 32.45968),
            (-86.67584, 32.46073),
            (-86.67588, 32.46108),
            (-86.676, 32.46171),
            (-86.67618, 32.46219),
            (-86.67645, 32.46267),
            (-86.67685, 32.46319),
            (-86.67765, 32.46405),
            (-86.67816, 32.46461),
            (-86.67853, 32.46518),
            (-86.67877, 32.46586),
            (-86.67892, 32.46658),
            (-86.67904, 32.46715),
            (-86.68027, 32.47329),
            (-86.68198, 32.47772),
            (-86.68249, 32.47851),
            (-86.68366, 32.48004),
            (-86.68814, 32.48543),
            (-86.69026, 32.48777),
            (-86.69134, 32.48893),
            (-86.6925, 32.48857),
            (-86.6929, 32.48853),
            (-86.69331, 32.48853),
            (-86.69492, 32.48868),
            (-86.69814, 32.48906),
            (-86.69832, 32.48913),
            (-86.69848, 32.48922),
            (-86.6988, 32.48942),
            (-86.69905, 32.48989),
            (-86.69964, 32.49126),
            (-86.6998, 32.49169),
            (-86.69987, 32.49247),
            (-86.70012, 32.49303),
            (-86.70051, 32.49346),
            (-86.70084, 32.49369),
            (-86.70107, 32.49395),
            (-86.70195, 32.49522),
            (-86.70203, 32.4956),
            (-86.70222, 32.49608),
            (-86.70291, 32.49759),
            (-86.70297, 32.49805),
            (-86.70295, 32.49854),
            (-86.70292, 32.49911),
            (-86.70296, 32.49928),
            (-86.70309, 32.4995),
            (-86.7038, 32.50014),
            (-86.70427, 32.50045),
            (-86.70484, 32.50077),
            (-86.70513, 32.50089),
            (-86.70537, 32.50107),
            (-86.70577, 32.50153),
            (-86.70605, 32.50205),
            (-86.70636, 32.50246),
            (-86.7065, 32.50256),
            (-86.70668, 32.50262),
            (-86.70677, 32.50263),
            (-86.70754, 32.50262),
            (-86.70802, 32.50266),
            (-86.7083, 32.5027),
            (-86.70916, 32.50288),
            (-86.70963, 32.50305),
            (-86.71038, 32.50344),
            (-86.71095, 32.50364),
            (-86.71113, 32.50373),
            (-86.71182, 32.5041),
            (-86.71202, 32.50439),
            (-86.71233, 32.50474),
            (-86.71237, 32.50492),
            (-86.71229, 32.50511),
            (-86.71226, 32.50572),
            (-86.71237, 32.50591),
            (-86.71248, 32.50603),
            (-86.71279, 32.50626),
            (-86.71314, 32.5066),
            (-86.7139, 32.50707),
            (-86.71403, 32.50718),
            (-86.71421, 32.50736),
            (-86.71437, 32.50759),
            (-86.71463, 32.5081),
            (-86.71476, 32.5084),
            (-86.71483, 32.50864),
            (-86.71497, 32.50916),
            (-86.71513, 32.50903),
            (-86.71559, 32.5088),
            (-86.71671, 32.50832),
            (-86.7171, 32.50817),
            (-86.71759, 32.50803),
            (-86.71795, 32.50795),
            (-86.71841, 32.50789),
            (-86.72054, 32.5078),
            (-86.72082, 32.50775),
            (-86.721, 32.50769),
            (-86.7217, 32.50736),
            (-86.72201, 32.50716),
            (-86.72399, 32.50543),
            (-86.72441, 32.50511),
            (-86.72544, 32.5044),
            (-86.72647, 32.50377),
            (-86.7281, 32.50322),
            (-86.73176, 32.50213),
            (-86.73274, 32.50178),
            (-86.73305, 32.50178),
            (-86.73384, 32.50177),
            (-86.73408, 32.50169),
            (-86.73428, 32.50179),
            (-86.7345, 32.50201),
            (-86.73478, 32.50224),
            (-86.73499, 32.50259),
            (-86.73572, 32.50302),
            (-86.73688, 32.5038),
            (-86.73729, 32.50417),
            (-86.73764, 32.50452),
            (-86.73766, 32.50471),
            (-86.7376, 32.50503),
            (-86.73745, 32.50553),
            (-86.73734, 32.50575),
            (-86.73703, 32.50619),
            (-86.73681, 32.50663),
            (-86.73661, 32.50679),
            (-86.73632, 32.50681),
            (-86.7359, 32.50663),
            (-86.73516, 32.50607),
            (-86.73497, 32.5061),
            (-86.73468, 32.50627),
            (-86.73445, 32.5065),
            (-86.7342, 32.50689),
            (-86.73423, 32.50722),
            (-86.7345, 32.50774),
            (-86.7348, 32.50859),
            (-86.73484, 32.50906),
            (-86.73501, 32.50936),
            (-86.73525, 32.50958),
            (-86.7356, 32.50986),
            (-86.73568, 32.51022),
            (-86.73556, 32.5113),
            (-86.73538, 32.51184),
            (-86.73532, 32.51237),
            (-86.73533, 32.51359),
            (-86.73522, 32.51445),
            (-86.73495, 32.51541),
            (-86.73453, 32.51666),
            (-86.73439, 32.51695),
            (-86.73424, 32.51707),
            (-86.73388, 32.51717),
            (-86.73334, 32.51728),
            (-86.73293, 32.51746),
            (-86.73267, 32.51764),
            (-86.73249, 32.51804),
            (-86.73222, 32.51876),
            (-86.73178, 32.51878),
            (-86.73151, 32.51881),
            (-86.73152, 32.51931),
            (-86.73148, 32.51976),
            (-86.73105, 32.52162),
            (-86.73087, 32.5221),
            (-86.73063, 32.52251),
            (-86.73064, 32.52266),
            (-86.73077, 32.52288),
            (-86.73098, 32.52315),
            (-86.73077, 32.52324),
            (-86.7305, 32.52332),
            (-86.72843, 32.5235),
            (-86.72475, 32.52368),
            (-86.72456, 32.52371),
            (-86.72428, 32.52381),
            (-86.7235, 32.52429),
            (-86.72323, 32.5244),
            (-86.72303, 32.52444),
            (-86.72238, 32.52453),
            (-86.72219, 32.52452),
            (-86.72195, 32.52441),
            (-86.72157, 32.52395),
            (-86.72135, 32.52382),
            (-86.72108, 32.52377),
            (-86.72043, 32.52375),
            (-86.71995, 32.52373),
            (-86.71968, 32.52368),
            (-86.7194, 32.52354),
            (-86.71908, 32.52329),
            (-86.71836, 32.52251),
            (-86.71821, 32.5224),
            (-86.71795, 32.5223),
            (-86.71724, 32.52215),
            (-86.71679, 32.52208),
            (-86.7166, 32.52207),
            (-86.71623, 32.5221),
            (-86.71584, 32.5222),
            (-86.71536, 32.52238),
            (-86.71501, 32.52257),
            (-86.71479, 32.52275),
            (-86.71459, 32.52296),
            (-86.71434, 32.52336),
            (-86.71415, 32.52376),
            (-86.71398, 32.52394),
            (-86.71384, 32.52403),
            (-86.71368, 32.5241),
            (-86.71267, 32.5243),
            (-86.7124, 32.52441),
            (-86.71216, 32.52456),
            (-86.71168, 32.52479),
            (-86.71141, 32.52482),
            (-86.71112, 32.52483),
            (-86.70989, 32.52465),
            (-86.70931, 32.52461),
            (-86.70847, 32.5246),
            (-86.70799, 32.52448),
            (-86.70727, 32.52427),
            (-86.70652, 32.52396),
            (-86.70602, 32.52388),
            (-86.70571, 32.52387),
            (-86.70434, 32.52395),
            (-86.70378, 32.52408),
            (-86.703, 32.5243),
            (-86.70291, 32.52434),
            (-86.7028, 32.5244),
            (-86.7026, 32.52431),
            (-86.70259, 32.52844),
            (-86.70273, 32.53108),
            (-86.70277, 32.53201),
            (-86.70288, 32.53285),
            (-86.70304, 32.53324),
            (-86.7033, 32.5337),
            (-86.70392, 32.53429),
            (-86.70538, 32.5354),
            (-86.70607, 32.53608),
            (-86.70636, 32.53645),
            (-86.70667, 32.53706),
            (-86.70694, 32.53802),
            (-86.70701, 32.53837),
            (-86.70712, 32.53918),
            (-86.70719, 32.53957),
            (-86.70733, 32.54005),
            (-86.70761, 32.54083),
            (-86.7078, 32.54117),
            (-86.70818, 32.54178),
            (-86.70861, 32.54241),
            (-86.70997, 32.54444),
            (-86.71078, 32.54569),
            (-86.7111, 32.5464),
            (-86.7112, 32.54692),
            (-86.71124, 32.54741),
            (-86.71129, 32.54937),
            (-86.71132, 32.55244),
            (-86.7113, 32.5527),
            (-86.71126, 32.55287),
            (-86.71108, 32.55334),
            (-86.71081, 32.55395),
            (-86.71068, 32.55436),
            (-86.71048, 32.55551),
            (-86.71019, 32.55704),
            (-86.70981, 32.55686),
            (-86.70963, 32.55679),
            (-86.70938, 32.55674),
            (-86.70846, 32.55668),
            (-86.70823, 32.55659),
            (-86.70812, 32.55648),
            (-86.70781, 32.55591),
            (-86.70752, 32.55551),
            (-86.70729, 32.55529),
            (-86.70712, 32.55525),
            (-86.70686, 32.55529),
            (-86.70655, 32.55529),
            (-86.70587, 32.55522),
            (-86.70556, 32.55515),
            (-86.7053, 32.555),
            (-86.70505, 32.55482),
            (-86.70487, 32.55461),
            (-86.70432, 32.55348),
            (-86.70339, 32.55215),
            (-86.70316, 32.55207),
            (-86.70228, 32.5516),
            (-86.7014, 32.55118),
            (-86.70117, 32.55102),
            (-86.70091, 32.55079),
            (-86.70076, 32.55071),
            (-86.70012, 32.55056),
            (-86.69956, 32.55122),
            (-86.69934, 32.55168),
            (-86.69922, 32.55256),
            (-86.69932, 32.55295),
            (-86.70004, 32.55449),
            (-86.70046, 32.55556),
            (-86.71184, 32.56824),
            (-86.71139, 32.57359),
            (-86.71134, 32.57383),
            (-86.7088, 32.57943),
            (-86.70847, 32.5799),
            (-86.70822, 32.58038),
            (-86.70799, 32.58092),
            (-86.70711, 32.58399),
            (-86.70698, 32.5846),
            (-86.707, 32.58487),
            (-86.70706, 32.58512),
            (-86.70248, 32.59057),
            (-86.70303, 32.59178),
            (-86.70439, 32.59296),
            (-86.70532, 32.59377),
            (-86.70581, 32.59423),
            (-86.70599, 32.5944),
            (-86.70626, 32.59468),
            (-86.70658, 32.59503),
            (-86.70712, 32.59566),
            (-86.70773, 32.59646),
            (-86.70791, 32.5967),
            (-86.7079192324744, 32.5967567137711),
            (-86.7050274138804, 32.5938131528961),
            (-86.69915, 32.59468),
            (-86.69791, 32.59382),
            (-86.68645, 32.60023),
            (-86.68275, 32.61445),
            (-86.68313, 32.6148),
            (-86.68323, 32.61492),
            (-86.68333, 32.61514),
            (-86.68338, 32.61542),
            (-86.68337, 32.61649),
            (-86.6839, 32.61761),
            (-86.6844, 32.61846),
            (-86.68727, 32.62514),
            (-86.68822, 32.62635),
            (-86.68739, 32.62595),
            (-86.68689, 32.62594),
            (-86.68634, 32.62595),
            (-86.68417, 32.62617),
            (-86.68272, 32.62624),
            (-86.6821, 32.62616),
            (-86.68064, 32.6258),
            (-86.67998, 32.62566),
            (-86.67958, 32.62566),
            (-86.6791, 32.62573),
            (-86.67837, 32.62579),
            (-86.67608, 32.62582),
            (-86.67581, 32.62579),
            (-86.67554, 32.62572),
            (-86.67497, 32.62549),
            (-86.67446, 32.62524),
            (-86.6742, 32.62521),
            (-86.67382, 32.62523),
            (-86.67324, 32.62564),
            (-86.67142, 32.62651),
            (-86.67024, 32.62705),
            (-86.66968, 32.62729),
            (-86.66924, 32.62752),
            (-86.66868, 32.62791),
            (-86.66792, 32.62854),
            (-86.66759, 32.62893),
            (-86.66732, 32.6293),
            (-86.66714, 32.62961),
            (-86.66685, 32.63023),
            (-86.66618, 32.63219),
            (-86.66598, 32.63312),
            (-86.66588, 32.63375),
            (-86.66581, 32.63443),
            (-86.66577, 32.6389),
            (-86.66567, 32.63957),
            (-86.66552, 32.64008),
            (-86.66385, 32.6437),
            (-86.66364, 32.64442),
            (-86.66351, 32.64495),
            (-86.66309, 32.64692),
            (-86.66198, 32.65232),
            (-86.66178, 32.65334),
            (-86.66168, 32.65366),
            (-86.66153, 32.65396),
            (-86.66132, 32.65427),
            (-86.66103, 32.65453),
            (-86.66075, 32.65477),
            (-86.66036, 32.65503),
            (-86.65639, 32.65691),
            (-86.65402, 32.65808),
            (-86.65374, 32.6582),
            (-86.65357, 32.65829),
            (-86.65334, 32.65847),
            (-86.65286, 32.65894),
            (-86.65267, 32.65915),
            (-86.65246, 32.65946),
            (-86.65234, 32.65971),
            (-86.65223, 32.66005),
            (-86.6518, 32.66188),
            (-86.65168, 32.66229),
            (-86.65148, 32.66277),
            (-86.65127, 32.66315),
            (-86.64977, 32.6654),
            (-86.64938, 32.66593),
            (-86.64871, 32.66669),
            (-86.64688, 32.66858),
            (-86.64653, 32.66902),
            (-86.64624, 32.66949),
            (-86.64583, 32.6703),
            (-86.64547, 32.67129),
            (-86.64494, 32.67294),
            (-86.64426, 32.67464),
            (-86.64392, 32.67537),
            (-86.64355, 32.6761),
            (-86.64259, 32.67778),
            (-86.64225, 32.67855),
            (-86.64217, 32.67889),
            (-86.64218, 32.67923),
            (-86.6423, 32.67974),
            (-86.64242, 32.68007),
            (-86.64265, 32.68047),
            (-86.64326, 32.68121),
            (-86.64467, 32.68287),
            (-86.64691, 32.68534),
            (-86.64724, 32.68579),
            (-86.64607, 32.68675),
            (-86.64474, 32.68793),
            (-86.64416, 32.68831),
            (-86.64361, 32.68856),
            (-86.64314, 32.68871),
            (-86.64254, 32.6888),
            (-86.64108, 32.68883),
            (-86.63978, 32.6888),
            (-86.63936, 32.68876),
            (-86.63885, 32.68865),
            (-86.63467, 32.68738),
            (-86.63081, 32.68623),
            (-86.62896, 32.6857),
            (-86.62543, 32.68463),
            (-86.62298, 32.68389),
            (-86.6223, 32.68381),
            (-86.62138, 32.68384),
            (-86.62021, 32.68406),
            (-86.61969, 32.68414),
            (-86.61321, 32.68557),
            (-86.61081, 32.68603),
            (-86.6103, 32.68608),
            (-86.6053, 32.68633),
            (-86.60545, 32.68495),
            (-86.60548, 32.68352),
            (-86.60546, 32.6821),
            (-86.60536, 32.68064),
            (-86.60528, 32.67924),
            (-86.60523, 32.67785),
            (-86.60519, 32.67371),
            (-86.60504, 32.66957),
            (-86.60499, 32.66673),
            (-86.60487, 32.66605),
            (-86.60457, 32.66518),
            (-86.60412, 32.66429),
            (-86.60309, 32.66248),
            (-86.60284, 32.6619),
            (-86.60268, 32.66138),
            (-86.60254, 32.66077),
            (-86.60229, 32.65897),
            (-86.60182, 32.65585),
            (-86.60169, 32.65511),
            (-86.60153, 32.65463),
            (-86.60123, 32.65378),
            (-86.60094, 32.65293),
            (-86.60075, 32.65231),
            (-86.60066, 32.65186),
            (-86.60063, 32.65142),
            (-86.60062, 32.64815),
            (-86.60053, 32.64359),
            (-86.60047, 32.64209),
            (-86.60045, 32.63917),
            (-86.6004, 32.63675),
            (-86.60041, 32.63621),
            (-86.60044, 32.63596),
            (-86.60053, 32.63563),
            (-86.60064, 32.6354),
            (-86.60081, 32.6351),
            (-86.60103, 32.63481),
            (-86.6014, 32.6344),
            (-86.60168, 32.63415),
            (-86.602, 32.63393),
            (-86.60249, 32.63366),
            (-86.60258, 32.63361),
            (-86.60325, 32.63321),
            (-86.60377, 32.63281),
            (-86.6042, 32.63234),
            (-86.60444, 32.63191),
            (-86.60452, 32.6317),
            (-86.60453, 32.63168),
            (-86.60463, 32.63138),
            (-86.60469, 32.63081),
            (-86.60467, 32.62925),
            (-86.60449, 32.62224),
            (-86.60446, 32.61906),
            (-86.60442, 32.61787),
            (-86.6044, 32.61197),
            (-86.60442, 32.61029),
            (-86.60438, 32.60304),
            (-86.6044, 32.60096),
            (-86.60436, 32.59906),
            (-86.60438, 32.59795),
            (-86.60423, 32.59709),
            (-86.60411, 32.59666),
            (-86.60398, 32.59633),
            (-86.60346, 32.59542),
            (-86.60308, 32.59497),
            (-86.60184, 32.59358),
            (-86.59996, 32.59372),
            (-86.59634, 32.59373),
            (-86.59481, 32.59376),
            (-86.59348, 32.59381),
            (-86.58996, 32.5938),
            (-86.58987, 32.59428),
            (-86.58856, 32.59625),
            (-86.58821, 32.59642),
            (-86.58762, 32.59687),
            (-86.58742, 32.59706),
            (-86.58728, 32.59732),
            (-86.58721, 32.59756),
            (-86.58369, 32.60021),
            (-86.5833, 32.60022),
            (-86.58316, 32.60028),
            (-86.5814112139087, 32.6009481682707),
            (-86.58182, 32.60093),
            (-86.58306, 32.60089),
            (-86.5859, 32.60087),
            (-86.5863, 32.60091),
            (-86.58652, 32.60104),
            (-86.58634, 32.60147),
            (-86.58617, 32.60174),
            (-86.58566, 32.60252),
            (-86.58504, 32.6037),
            (-86.58446, 32.60487),
            (-86.58436, 32.60513),
            (-86.58429, 32.60542),
            (-86.58287, 32.60545),
            (-86.58251, 32.6055),
            (-86.58231, 32.60562),
            (-86.58199, 32.60616),
            (-86.58175, 32.60682),
            (-86.58143, 32.60794),
            (-86.58137, 32.60827),
            (-86.58138, 32.60895),
            (-86.58154, 32.61019),
            (-86.5816, 32.61092),
            (-86.58159, 32.61128),
            (-86.58166, 32.61324),
            (-86.57898, 32.61288),
            (-86.57853, 32.61279),
            (-86.57819, 32.61267),
            (-86.57775, 32.61246),
            (-86.57524, 32.61102),
            (-86.57452, 32.61068),
            (-86.57359, 32.61033),
            (-86.57312, 32.61021),
            (-86.57262, 32.61014),
            (-86.57134, 32.61015),
            (-86.57102, 32.6101),
            (-86.57073, 32.61),
            (-86.57018, 32.60963),
            (-86.56943, 32.60921),
            (-86.56933, 32.60918),
            (-86.56885, 32.60907),
            (-86.56743, 32.60899),
            (-86.56713, 32.60891),
            (-86.56686, 32.60877),
            (-86.56658, 32.6085),
            (-86.56636, 32.60823),
            (-86.56612, 32.60782),
            (-86.56577, 32.60721),
            (-86.56567, 32.60706),
            (-86.56546, 32.60678),
            (-86.56485, 32.60611),
            (-86.56425, 32.60554),
            (-86.56381, 32.60522),
            (-86.56364, 32.60514),
            (-86.56345, 32.60508),
            (-86.56325, 32.60505),
            (-86.56304, 32.60506),
            (-86.56294, 32.60508),
            (-86.56269, 32.60522),
            (-86.55945, 32.60759),
            (-86.55775, 32.60895),
            (-86.55717, 32.60932),
            (-86.55676, 32.60954),
            (-86.55586, 32.60987),
            (-86.55446, 32.61022),
            (-86.55291, 32.61042),
            (-86.55252, 32.61052),
            (-86.55224, 32.61064),
            (-86.55042, 32.61158),
            (-86.55005, 32.61173),
            (-86.54976, 32.61179),
            (-86.54809, 32.61202),
            (-86.54774, 32.61203),
            (-86.54768, 32.61245),
            (-86.54763, 32.61294),
            (-86.54762, 32.61328),
            (-86.54768, 32.6143),
            (-86.54775, 32.6156),
            (-86.54787, 32.61781),
            (-86.5479, 32.61861),
            (-86.54789, 32.61913),
            (-86.54785, 32.6194),
            (-86.54779, 32.61963),
            (-86.54769, 32.61987),
            (-86.54757, 32.6201),
            (-86.54728, 32.62054),
            (-86.54682, 32.62122),
            (-86.54621, 32.62209),
            (-86.54578, 32.62272),
            (-86.54575, 32.62276),
            (-86.54508, 32.62374),
            (-86.54479, 32.62416),
            (-86.54448, 32.62456),
            (-86.54414, 32.62496),
            (-86.54362, 32.62556),
            (-86.54305, 32.62614),
            (-86.54247, 32.62673),
            (-86.54051, 32.62873),
            (-86.5389, 32.63037),
            (-86.53853, 32.63078),
            (-86.53821, 32.63122),
            (-86.53806, 32.63148),
            (-86.53787, 32.63193),
            (-86.53778, 32.63224),
            (-86.53762, 32.6331),
            (-86.53746, 32.63419),
            (-86.53738, 32.63462),
            (-86.53727, 32.63507),
            (-86.53717, 32.63534),
            (-86.53707, 32.63553),
            (-86.53681, 32.63594),
            (-86.53648, 32.63632),
            (-86.53598, 32.63676),
            (-86.53506, 32.63755),
            (-86.53482, 32.63777),
            (-86.53456, 32.63807),
            (-86.53443, 32.63825),
            (-86.53424, 32.63857),
            (-86.53414, 32.63882),
            (-86.53403, 32.63918),
            (-86.53375, 32.64041),
            (-86.53368, 32.64064),
            (-86.53358, 32.6409),
            (-86.53344, 32.64114),
            (-86.5332, 32.64149),
            (-86.5329, 32.64179),
            (-86.53228, 32.6423),
            (-86.53185, 32.64265),
            (-86.53144, 32.64301),
            (-86.5311, 32.64339),
            (-86.53092, 32.64365),
            (-86.53077, 32.64393),
            (-86.53063, 32.64428),
            (-86.53051, 32.64468),
            (-86.53049, 32.64491),
            (-86.53048, 32.64513),
            (-86.53049, 32.64534),
            (-86.53052, 32.64561),
            (-86.53056, 32.64577),
            (-86.53065, 32.64602),
            (-86.53082, 32.6464),
            (-86.53101, 32.64676),
            (-86.53124, 32.64709),
            (-86.53162, 32.64765),
            (-86.53191, 32.64811),
            (-86.53216, 32.64858),
            (-86.53233, 32.64908),
            (-86.53247, 32.6496),
            (-86.53268, 32.65068),
            (-86.53294, 32.65207),
            (-86.53316, 32.65321),
            (-86.53343, 32.65455),
            (-86.53368, 32.65595),
            (-86.53376, 32.6565),
            (-86.53377, 32.65705),
            (-86.53376, 32.6576),
            (-86.53369, 32.65814),
            (-86.53365, 32.65866),
            (-86.53363, 32.65892),
            (-86.53287, 32.65894),
            (-86.53163, 32.65897),
            (-86.5305, 32.6589),
            (-86.52709, 32.65849),
            (-86.52654, 32.65794),
            (-86.52535, 32.65724),
            (-86.52408, 32.65625),
            (-86.52258, 32.65494),
            (-86.52164, 32.6544),
            (-86.52094, 32.65409),
            (-86.51499, 32.65187),
            (-86.51425, 32.65165),
            (-86.51405, 32.65161),
            (-86.51278, 32.65155),
            (-86.5126, 32.65152),
            (-86.51234, 32.65144),
            (-86.51196, 32.65125),
            (-86.50954, 32.64934),
            (-86.50923, 32.64898),
            (-86.50873, 32.64815),
            (-86.50838, 32.64742),
            (-86.50816, 32.64686),
            (-86.50795, 32.64626),
            (-86.50777, 32.64565),
            (-86.50741, 32.6437),
            (-86.50724, 32.64279),
            (-86.50712, 32.64255),
            (-86.50677, 32.64208),
            (-86.50567, 32.64099),
            (-86.50501, 32.6401),
            (-86.50454, 32.63942),
            (-86.50437, 32.63924),
            (-86.50367, 32.63868),
            (-86.5015, 32.63698),
            (-86.50113, 32.63664),
            (-86.50067, 32.63606),
            (-86.50012, 32.63536),
            (-86.4995, 32.63463),
            (-86.49877, 32.63399),
            (-86.49852, 32.63371),
            (-86.49815, 32.63313),
            (-86.49739, 32.63166),
            (-86.49692, 32.63079),
            (-86.4967, 32.63048),
            (-86.49583, 32.62936),
            (-86.49399, 32.62708),
            (-86.49338, 32.62642),
            (-86.4925, 32.62543),
            (-86.4915, 32.62465),
            (-86.49036, 32.62393),
            (-86.4902, 32.62386),
            (-86.48971, 32.62369),
            (-86.49008, 32.62257),
            (-86.48868, 32.62193),
            (-86.48873, 32.62183),
            (-86.48878, 32.62163),
            (-86.48883, 32.62093),
            (-86.48882, 32.61962),
            (-86.48873, 32.61665),
            (-86.49039, 32.6144),
            (-86.49106, 32.61264),
            (-86.49124, 32.6119),
            (-86.49132, 32.61087),
            (-86.49109, 32.60782),
            (-86.49113, 32.6073),
            (-86.49124, 32.60679),
            (-86.4913, 32.60663),
            (-86.49201, 32.6051),
            (-86.49305, 32.60207),
            (-86.49359, 32.60031),
            (-86.49405, 32.59933),
            (-86.49431, 32.59896),
            (-86.49465, 32.59863),
            (-86.49642, 32.59741),
            (-86.49634, 32.59579),
            (-86.49639, 32.59429),
            (-86.49633, 32.59393),
            (-86.49624, 32.59367),
            (-86.49565, 32.59235),
            (-86.49495, 32.59092),
            (-86.49487, 32.59079),
            (-86.49476, 32.59068),
            (-86.49444, 32.59048),
            (-86.49431, 32.59045),
            (-86.49327, 32.59074),
            (-86.49257, 32.59089),
            (-86.49228, 32.59093),
            (-86.48866, 32.59096),
            (-86.48767, 32.59096),
            (-86.48642, 32.59097),
            (-86.48601, 32.59092),
            (-86.4853, 32.59076),
            (-86.48526, 32.59015),
            (-86.48531, 32.58991),
            (-86.48532, 32.58953),
            (-86.4853, 32.58938),
            (-86.48523, 32.58924),
            (-86.4852, 32.58909),
            (-86.48521, 32.58842),
            (-86.48401, 32.58924),
            (-86.48385, 32.58965),
            (-86.484, 32.5905),
            (-86.48073, 32.58978),
            (-86.47984, 32.58946),
            (-86.47961, 32.58932),
            (-86.47944, 32.58912),
            (-86.47931, 32.58884),
            (-86.47922, 32.58793),
            (-86.47919, 32.58736),
            (-86.47915, 32.58703),
            (-86.4791, 32.5869),
            (-86.47899, 32.58678),
            (-86.47892, 32.58674),
            (-86.47864, 32.58663),
            (-86.47824, 32.58656),
            (-86.4774, 32.58653),
            (-86.47645, 32.58656),
            (-86.47605, 32.58651),
            (-86.47568, 32.58642),
            (-86.47516, 32.5862),
            (-86.47449, 32.5858),
            (-86.47364, 32.5851),
            (-86.47341, 32.58484),
            (-86.47328, 32.58463),
            (-86.47214, 32.58237),
            (-86.47137, 32.58075),
            (-86.47126, 32.58041),
            (-86.47095, 32.57864),
            (-86.47089, 32.57851),
            (-86.47078, 32.57841),
            (-86.46989, 32.57927),
            (-86.46929, 32.578),
            (-86.46897, 32.57729),
            (-86.46866, 32.57657),
            (-86.46838, 32.57585),
            (-86.46811, 32.57511),
            (-86.46763, 32.57528),
            (-86.46789, 32.57586),
            (-86.46831, 32.57674),
            (-86.46862, 32.57734),
            (-86.46909, 32.57823),
            (-86.46969, 32.57941),
            (-86.4695, 32.57954),
            (-86.46904, 32.57981),
            (-86.46856, 32.58005),
            (-86.46807, 32.58024),
            (-86.46759, 32.5804),
            (-86.46646, 32.58073),
            (-86.46605, 32.58087),
            (-86.46567, 32.58104),
            (-86.46535, 32.58123),
            (-86.46508, 32.58142),
            (-86.46487, 32.58161),
            (-86.46463, 32.58183),
            (-86.46447, 32.582),
            (-86.46436, 32.58217),
            (-86.46428, 32.58235),
            (-86.46428, 32.58176),
            (-86.46428, 32.5813),
            (-86.4643, 32.58036),
            (-86.4643, 32.57875),
            (-86.46431, 32.57705),
            (-86.4643, 32.57464),
            (-86.46429, 32.57276),
            (-86.46428, 32.57176),
            (-86.46381, 32.57175),
            (-86.4633, 32.57174),
            (-86.46311, 32.57172),
            (-86.463, 32.57169),
            (-86.46295, 32.57166),
            (-86.46288, 32.57158),
            (-86.46285, 32.57148),
            (-86.46286, 32.57137),
            (-86.46291, 32.57125),
            (-86.46298, 32.5712),
            (-86.46307, 32.57117),
            (-86.46428, 32.57113),
            (-86.46428, 32.5704),
            (-86.46425, 32.56989),
            (-86.46421, 32.56939),
            (-86.46414, 32.5689),
            (-86.46406, 32.56842),
            (-86.464, 32.56809),
            (-86.46395, 32.56787),
            (-86.46392, 32.56771),
            (-86.46387, 32.56748),
            (-86.46374, 32.567),
            (-86.4636, 32.56652),
            (-86.46344, 32.56605),
            (-86.46304, 32.56485),
            (-86.46281, 32.56416),
            (-86.46273, 32.56393),
            (-86.46255, 32.56337),
            (-86.46223, 32.56239),
            (-86.462, 32.56166),
            (-86.46199, 32.56164),
            (-86.4619, 32.5614),
            (-86.46176, 32.56098),
            (-86.46173, 32.5609),
            (-86.46155, 32.5604),
            (-86.46135, 32.55989),
            (-86.46114, 32.55938),
            (-86.46093, 32.55892),
            (-86.4608, 32.55863),
            (-86.46021, 32.55734),
            (-86.45953, 32.55583),
            (-86.45929, 32.5553),
            (-86.45919, 32.55509),
            (-86.45897, 32.55462),
            (-86.45864, 32.5539),
            (-86.45858, 32.55377),
            (-86.45842, 32.55341),
            (-86.45822, 32.55292),
            (-86.45806, 32.55243),
            (-86.45795, 32.55195),
            (-86.45787, 32.55147),
            (-86.45786, 32.55138),
            (-86.45784, 32.55109),
            (-86.45784, 32.55102),
            (-86.45783, 32.5509),
            (-86.45776, 32.54981),
            (-86.45774, 32.54946),
            (-86.45689, 32.54863),
            (-86.45567, 32.54744),
            (-86.455032975, 32.546826),
            (-86.4547075949367, 32.546826),
            (-86.45458, 32.5467),
            (-86.45396, 32.5461),
            (-86.45378, 32.54592),
            (-86.45275, 32.54491),
            (-86.45215, 32.54433),
            (-86.45158, 32.54376),
            (-86.45177, 32.54361),
            (-86.45102, 32.5428),
            (-86.45097, 32.54275),
            (-86.45154, 32.54236),
            (-86.45647, 32.53908),
            (-86.45629, 32.53795),
            (-86.45619, 32.53733),
            (-86.4561, 32.53688),
            (-86.45609, 32.53684),
            (-86.45594, 32.53586),
            (-86.45584, 32.5351),
            (-86.45576, 32.53434),
            (-86.45571, 32.53386),
            (-86.45571, 32.53383),
            (-86.45567, 32.53343),
            (-86.45566, 32.53332),
            (-86.45563, 32.53297),
            (-86.45561, 32.53277),
            (-86.45554, 32.5321),
            (-86.45546, 32.53125),
            (-86.45545, 32.53111),
            (-86.45536, 32.53026),
            (-86.45529, 32.52965),
            (-86.45527, 32.52937),
            (-86.45523, 32.52895),
            (-86.45522, 32.52883),
            (-86.45522, 32.52875),
            (-86.45521, 32.52828),
            (-86.45523, 32.52774),
            (-86.45527, 32.52719),
            (-86.45532, 32.52664),
            (-86.45539, 32.5261),
            (-86.4555, 32.52555),
            (-86.45563, 32.525),
            (-86.45568, 32.52481),
            (-86.45604, 32.52335),
            (-86.45607, 32.52323),
            (-86.45624, 32.52255),
            (-86.45655, 32.52126),
            (-86.45665, 32.52087),
            (-86.45674, 32.52051),
            (-86.45692, 32.51978),
            (-86.45704, 32.5193),
            (-86.45714, 32.51883),
            (-86.45721, 32.51836),
            (-86.45725, 32.5179),
            (-86.45725, 32.51744),
            (-86.45723, 32.51698),
            (-86.45718, 32.51653),
            (-86.45707, 32.51585),
            (-86.45696, 32.51522),
            (-86.45695, 32.51516),
            (-86.45676, 32.51401),
            (-86.45674, 32.51391),
            (-86.45643, 32.51207),
            (-86.45638, 32.51178),
            (-86.45632, 32.51145),
            (-86.45631, 32.51115),
            (-86.45631, 32.51066),
            (-86.45633, 32.50992),
            (-86.45637, 32.50848),
            (-86.45643, 32.50678),
            (-86.45645, 32.50556),
            (-86.45647, 32.50475),
            (-86.45648, 32.50435),
            (-86.45647, 32.50395),
            (-86.45643, 32.50355),
            (-86.45636, 32.50315),
            (-86.4562, 32.50243),
            (-86.45613, 32.50213),
            (-86.45592, 32.50124),
            (-86.45558, 32.49982),
            (-86.45498, 32.49752),
            (-86.45452, 32.49563),
            (-86.45393, 32.49324),
            (-86.4538, 32.49269),
            (-86.45373, 32.49232),
            (-86.45367, 32.49195),
            (-86.45367, 32.49193),
            (-86.45362, 32.49146),
            (-86.45361, 32.49139),
            (-86.45358, 32.4908),
            (-86.45356, 32.49022),
            (-86.45356, 32.48964),
            (-86.45356, 32.48927),
            (-86.44357, 32.48933),
            (-86.44578, 32.48141),
            (-86.44759, 32.48163),
            (-86.4504, 32.48102),
            (-86.45075, 32.48114),
            (-86.45112, 32.4812),
            (-86.45183, 32.48121),
            (-86.45181, 32.48104),
            (-86.4518, 32.48077),
            (-86.4518, 32.48066),
            (-86.45184, 32.47994),
            (-86.45184, 32.4799),
            (-86.45186, 32.47936),
            (-86.4519, 32.47881),
            (-86.45196, 32.47823),
            (-86.45201, 32.47772),
            (-86.45203, 32.47738),
            (-86.45203, 32.47725),
            (-86.45204, 32.47687),
            (-86.45204, 32.47645),
            (-86.45204, 32.47638),
            (-86.45203, 32.47605),
            (-86.45202, 32.47572),
            (-86.45201, 32.47536),
            (-86.4519, 32.47349),
            (-86.45189, 32.47337),
            (-86.45184, 32.4726),
            (-86.45183, 32.47245),
            (-86.45181, 32.47207),
            (-86.45178, 32.47163),
            (-86.45173, 32.47118),
            (-86.45166, 32.47075),
            (-86.45162, 32.47046),
            (-86.45157, 32.47018),
            (-86.4515, 32.46989),
            (-86.45145, 32.46956),
            (-86.45132, 32.46896),
            (-86.45125, 32.46863),
            (-86.45118, 32.46833),
            (-86.45113, 32.46807),
            (-86.45102, 32.46755),
            (-86.45095, 32.46718),
            (-86.45088, 32.4668),
            (-86.45082, 32.46637),
            (-86.45079, 32.46618),
            (-86.45075, 32.46574),
            (-86.45073, 32.46511),
            (-86.45073, 32.4647),
            (-86.45072, 32.4642),
            (-86.45072, 32.46415),
            (-86.45072, 32.46386),
            (-86.45072, 32.46353),
            (-86.45072, 32.46336),
            (-86.45071, 32.46322),
            (-86.45072, 32.46288),
            (-86.45075, 32.46241),
            (-86.45075, 32.46236),
            (-86.45075, 32.4613),
            (-86.45072, 32.46078),
            (-86.45067, 32.46031),
            (-86.45067, 32.46029),
            (-86.45065, 32.46006),
            (-86.45039, 32.46023),
            (-86.45021, 32.4603),
            (-86.44886, 32.46033),
            (-86.44887, 32.45955),
            (-86.44894, 32.45938),
            (-86.44989, 32.45871),
            (-86.44917, 32.45793),
            (-86.44856, 32.45729),
            (-86.44853, 32.45725),
            (-86.44829, 32.45699),
            (-86.44791, 32.45659),
            (-86.44755, 32.45621),
            (-86.44651, 32.4551),
            (-86.44649, 32.45508),
            (-86.44553, 32.45408),
            (-86.44542, 32.45396),
            (-86.44488, 32.45337),
            (-86.44473, 32.45321),
            (-86.44462, 32.45309),
            (-86.4443, 32.45276),
            (-86.44397, 32.45242),
            (-86.44375, 32.45256),
            (-86.44362, 32.45257),
            (-86.44353, 32.45255),
            (-86.44205, 32.45158),
            (-86.44101, 32.45095),
            (-86.44015, 32.45038),
            (-86.43987, 32.45017),
            (-86.43999, 32.45011),
            (-86.44083, 32.44988),
            (-86.44104, 32.44978),
            (-86.44124, 32.44963),
            (-86.44081, 32.44926),
            (-86.44049, 32.44898),
            (-86.44027, 32.44881),
            (-86.43997, 32.44857),
            (-86.43962, 32.4483),
            (-86.43925, 32.44803),
            (-86.43905, 32.44789),
            (-86.43887, 32.44776),
            (-86.43849, 32.44749),
            (-86.43791, 32.44708),
            (-86.43735, 32.44669),
            (-86.43682, 32.4463),
            (-86.43675, 32.44625),
            (-86.43685, 32.44614),
            (-86.43646, 32.44586),
            (-86.43634, 32.44597),
            (-86.43546, 32.44535),
            (-86.43422, 32.44448),
            (-86.43361, 32.44405),
            (-86.43339, 32.44389),
            (-86.43091, 32.44214),
            (-86.43081, 32.44207),
            (-86.4294, 32.44236),
            (-86.42949, 32.44113),
            (-86.4287, 32.44058),
            (-86.42834, 32.44033),
            (-86.42697, 32.43933),
            (-86.42627, 32.43879),
            (-86.42599, 32.43858),
            (-86.42501, 32.43863),
            (-86.42523, 32.43857),
            (-86.42534, 32.43851),
            (-86.4254, 32.43843),
            (-86.42542, 32.43831),
            (-86.42536, 32.43818),
            (-86.4253, 32.43805),
            (-86.42516, 32.43794),
            (-86.42503, 32.43784),
            (-86.42492, 32.43776),
            (-86.42443, 32.43742),
            (-86.42421, 32.43727),
            (-86.42358, 32.43679),
            (-86.42313, 32.43646),
            (-86.42282, 32.43622),
            (-86.42267, 32.43611),
            (-86.42244, 32.43594),
            (-86.42198, 32.43559),
            (-86.42174, 32.43541),
            (-86.42136, 32.43513),
            (-86.42092, 32.4348),
            (-86.42022, 32.43427),
            (-86.42011, 32.43419),
            (-86.41956, 32.43378),
            (-86.41905, 32.4334),
            (-86.41862, 32.43308),
            (-86.41792, 32.43252),
            (-86.4174, 32.43207),
            (-86.41688, 32.4316),
            (-86.41637, 32.43112),
            (-86.41624, 32.431),
            (-86.41577, 32.43053),
            (-86.41573, 32.43049),
            (-86.41504, 32.42983),
            (-86.4149, 32.4297),
            (-86.41403, 32.42886),
            (-86.41365, 32.42848),
            (-86.41357, 32.4284),
            (-86.41338, 32.4282),
            (-86.41314, 32.42795),
            (-86.41288, 32.42765),
            (-86.41263, 32.42734),
            (-86.41241, 32.42702),
            (-86.4122, 32.42669),
            (-86.41201, 32.42632),
            (-86.41184, 32.42595),
            (-86.41171, 32.42556),
            (-86.41156, 32.42504),
            (-86.41149, 32.42475),
            (-86.41137, 32.42411),
            (-86.41132, 32.42205),
            (-86.41126, 32.41987),
            (-86.41125, 32.41139),
            (-86.4111, 32.41035),
            (-86.41177, 32.41009),
            (-86.41299, 32.40956),
            (-86.41419, 32.40901),
            (-86.4151, 32.40854),
            (-86.41615, 32.40795),
            (-86.41657, 32.40772),
            (-86.41867, 32.40639),
            (-86.42348, 32.40357),
            (-86.4242, 32.40321),
            (-86.42495, 32.40288),
            (-86.42581, 32.40255),
            (-86.4266, 32.4023),
            (-86.42781, 32.402),
            (-86.42915, 32.40178),
            (-86.43169, 32.40153),
            (-86.4363, 32.40099),
            (-86.44094, 32.40037),
            (-86.44245, 32.40028),
            (-86.4446, 32.40026),
            (-86.44523, 32.40029),
            (-86.44574, 32.40037),
            (-86.44615, 32.40045),
            (-86.44664, 32.4006),
            (-86.44712, 32.40078),
            (-86.44766, 32.40105),
            (-86.44816, 32.40137),
            (-86.45087, 32.40356),
            (-86.45175, 32.40412),
            (-86.45367, 32.4052),
            (-86.45414, 32.40541),
            (-86.45462, 32.40558),
            (-86.45511, 32.40572),
            (-86.45552, 32.4058),
            (-86.45735, 32.40606),
            (-86.45776, 32.40609),
            (-86.45827, 32.40606),
            (-86.45867, 32.40598),
            (-86.45905, 32.40586),
            (-86.4595, 32.40564),
            (-86.46032, 32.40511),
            (-86.46061, 32.40485),
            (-86.46086, 32.40456),
            (-86.46107, 32.40425),
            (-86.46122, 32.40391),
            (-86.46135, 32.40348),
            (-86.46142, 32.40303),
            (-86.46143, 32.40241),
            (-86.46134, 32.40179),
            (-86.46127, 32.40153),
            (-86.45993, 32.39778),
            (-86.45962, 32.39626),
            (-86.45957, 32.39581),
            (-86.45955, 32.39536),
            (-86.45961, 32.39495),
            (-86.45979, 32.39456),
            (-86.46092, 32.39302),
            (-86.46139, 32.39243),
            (-86.46182, 32.39171),
            (-86.46209, 32.39115),
            (-86.46236, 32.3905),
            (-86.4625, 32.39007),
            (-86.46262, 32.38953),
            (-86.4627, 32.38882),
            (-86.46269, 32.38819),
            (-86.46224, 32.38482),
            (-86.46222, 32.38376),
            (-86.46198, 32.3809),
            (-86.462, 32.38046),
            (-86.46205, 32.3801),
            (-86.46214, 32.37975),
            (-86.4623, 32.37933),
            (-86.46246, 32.379),
            (-86.46266, 32.37869),
            (-86.46299, 32.37824),
            (-86.46335, 32.37781),
            (-86.46387, 32.37727),
            (-86.46452, 32.37669),
            (-86.46666, 32.37506),
            (-86.46709, 32.3748),
            (-86.46784, 32.37427),
            (-86.46834, 32.37384),
            (-86.46882, 32.37339),
            (-86.47147, 32.37063),
            (-86.47231, 32.36967),
            (-86.47262, 32.36928),
            (-86.47468, 32.36657),
            (-86.47561, 32.36541),
            (-86.47607, 32.36496),
            (-86.4764, 32.36474),
            (-86.47686, 32.36454),
            (-86.47716, 32.36447),
            (-86.47747, 32.36443),
            (-86.47798, 32.36444),
            (-86.47849, 32.36455),
            (-86.47877, 32.36466),
            (-86.4792, 32.36489),
            (-86.48038, 32.36563),
            (-86.48118, 32.36608),
            (-86.48289, 32.36694),
            (-86.48344, 32.36716),
            (-86.48392, 32.36731),
            (-86.48442, 32.36739),
            (-86.48492, 32.36742),
            (-86.48552, 32.36737),
            (-86.48618, 32.36727),
            (-86.48663, 32.36717),
            (-86.48792, 32.36673),
            (-86.48934, 32.36614),
            (-86.48978, 32.36594),
            (-86.49047, 32.36552),
            (-86.49119, 32.36499),
            (-86.49162, 32.36459),
            (-86.49194, 32.36423),
            (-86.49215, 32.36392),
            (-86.49233, 32.3636),
            (-86.49251, 32.36318),
            (-86.49264, 32.36274),
            (-86.4927, 32.36238),
            (-86.49272, 32.36193),
            (-86.49269, 32.36158),
            (-86.49263, 32.36122),
            (-86.49252, 32.36087),
            (-86.49148, 32.35803),
            (-86.49079, 32.35602),
            (-86.48993, 32.35398),
            (-86.48967, 32.35304),
            (-86.48949, 32.35201),
            (-86.48946, 32.35122),
            (-86.48956, 32.35045),
            (-86.48985, 32.34921),
            (-86.49003, 32.34856),
            (-86.49023, 32.34799),
            (-86.49043, 32.34753),
            (-86.49077, 32.34694),
            (-86.49093, 32.34672),
            (-86.4912, 32.34645),
            (-86.49143, 32.34627),
            (-86.4917, 32.34613),
            (-86.49198, 32.34601),
            (-86.4931, 32.34567),
            (-86.49381, 32.3455),
            (-86.49439, 32.34537),
            (-86.4949, 32.34528),
            (-86.4966, 32.34503),
            (-86.5, 32.34425),
            (-86.50324, 32.34306),
            (-86.50344, 32.34301),
            (-86.50446, 32.34284),
            (-86.50538, 32.34274),
            (-86.50621, 32.3427),
            (-86.50767, 32.34271),
            (-86.50872, 32.34263),
            (-86.50935, 32.34254),
            (-86.51445, 32.34166),
            (-86.51597, 32.34134),
            (-86.51937, 32.3405),
            (-86.52327, 32.3399),
            (-86.5269, 32.3394),
            (-86.53291, 32.33874),
            (-86.53504, 32.33947),
            (-86.53558, 32.33972),
            (-86.53608, 32.34004),
            (-86.5366, 32.34046),
            (-86.53699, 32.34088),
            (-86.53727, 32.34125),
            (-86.53917, 32.34414),
            (-86.53943, 32.34462),
            (-86.53964, 32.34512),
            (-86.53978, 32.34564),
            (-86.53986, 32.34625),
            (-86.5398, 32.35044),
            (-86.53986, 32.35124),
        ],
        [
            (-86.56964, 32.49943),
            (-86.57046, 32.50014),
            (-86.57119, 32.50049),
            (-86.57188, 32.50099),
            (-86.57142, 32.50184),
            (-86.5709, 32.50294),
            (-86.57153, 32.50302),
            (-86.57337, 32.50314),
            (-86.57455, 32.50325),
            (-86.57713, 32.50361),
            (-86.57734, 32.50385),
            (-86.5774433237822, 32.5039188825215),
            (-86.57803, 32.50756),
            (-86.5807056269816, 32.5091537850251),
            (-86.58634, 32.51251),
            (-86.58625, 32.51178),
            (-86.58607, 32.51029),
            (-86.586, 32.50981),
            (-86.58593, 32.50953),
            (-86.58582, 32.50924),
            (-86.58565, 32.50888),
            (-86.58547, 32.50856),
            (-86.5852, 32.50819),
            (-86.58478, 32.50776),
            (-86.58447, 32.50751),
            (-86.58429, 32.50739),
            (-86.58317, 32.50676),
            (-86.57853, 32.50426),
            (-86.5774, 32.50365),
            (-86.57537, 32.50255),
            (-86.57197, 32.5007),
            (-86.56964, 32.49943),
        ],
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 6696, 5018, 17


def sfcgal_bug_105a():
    poly = [[(1686350.74365082, 5402217.7661505), (1684030.810026, 5402682.520688), (1684000.0, 5402672.31399816), (1683763.966259, 5402588.179891), (1681281.134295, 5403807.881624), (1683915.838219, 5402676.741864), (1684000.0, 5402711.41802501), (1684020.618162, 5402719.913077), (1687524.6533522, 5404490.5663652), (1687854.358551, 5403919.598884), (1686350.74365082, 5402217.7661505)]]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 30, 21, 7

def sfcgal_bug_105b():
    poly = [[(1869500.0, 5542134.04114701), (1869542.48691877, 5542117.03445929), (1869563.45884117, 5542096.25547497), (1869565.09977432, 5542094.62476936), (1869605.02746282, 5541987.27322033), (1869615.07355377, 5541948.0), (1869583.08175414, 5541948.0), (1869578.6141196, 5541967.06067625), (1869553.09669917, 5542031.99177998), (1869527.78084588, 5542076.81267058), (1869505.06812083, 5542096.72108973), (1869500.0, 5542099.06878245), (1869500.0, 5542134.04114701)]]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 36, 25, 9


def sfcgal_bug_138():
    """SFCGAL Bug 138

    Touching polygonal ring in 1 point.
    See: https://github.com/Oslandia/SFCGAL/issues/138
    """

    conv = ToPointsAndSegments()
    poly = [
        [
            (1925547.06715944, 13587647.6),
            (1925546.0802568, 13587644.2080911),
            (1925566.85674009, 13587638.7784466),
            (1925568.32749709, 13587638.2352911),
            (1925569.66407359, 13587637.4157133),
            (1925570.8151335, 13587636.3511922),
            (1925570.85, 13587636.3031847),
            (1925570.85, 13587622.4070144),
            (1925570.0505545, 13587619.3425667),
            (1925569.507843, 13587617.8711903),
            (1925568.68850829, 13587616.5339638),
            (1925567.624037, 13587615.382276),
            (1925566.355336, 13587614.4603856),
            (1925564.9311608, 13587613.8037204),
            (1925563.4062417, 13587613.4375156),
            (1925561.8391806, 13587613.3758442),
            (1925560.29019859, 13587613.6210764),
            (1925560.2934407, 13587613.6202291),
            (1925561.76458009, 13587613.0768756),
            (1925563.10144889, 13587612.2569574),
            (1925564.2526721, 13587611.1919835),
            (1925565.11802176, 13587610.0),
            (1925514.0, 13587610.0),
            (1925514.0, 13587612.698902),
            (1925524.15476353, 13587647.6),
            (1925547.06715944, 13587647.6),
        ],
        [
            (1925560.29019859, 13587613.6210764),
            (1925558.8188222, 13587614.1637878),
            (1925557.4815957, 13587614.9831226),
            (1925556.32990789, 13587616.0475939),
            (1925555.40801749, 13587617.3162949),
            (1925554.7513522, 13587618.7404701),
            (1925554.3851474, 13587620.2653891),
            (1925554.3234761, 13587621.8324503),
            (1925554.5687082, 13587623.3814323),
            (1925555.0744951, 13587625.3202231),
            (1925535.80126999, 13587630.3570121),
            (1925533.0064687, 13587620.7515068),
            (1925560.29019859, 13587613.6210764),
        ],
    ]
    conv.add_polygon(poly)
    return conv, 136, 100, 6


def sfcgal_bug_133():
    """SFCGAL Bug 133

    Water polygon from OSM.
    See: https://github.com/Oslandia/SFCGAL/issues/133
    """
    conv = ToPointsAndSegments()
    poly = [
        [
            (4.6496243, 43.5206941),
            (4.6525243, 43.5138711),
            (4.6538323, 43.5135961),
            (4.6575601, 43.514063),
            (4.6610893, 43.5289111),
            (4.6611813, 43.5289641),
            (4.6613263, 43.5290541),
            (4.6616743, 43.5292701),
            (4.6662613, 43.5319631),
            (4.6694463, 43.5364301),
            (4.6773003, 43.5426701),
            (4.6773223, 43.5500511),
            (4.6770063, 43.5516341),
            (4.6727913, 43.5583451),
            (4.6499203, 43.5215561),
            (4.6496243, 43.5206941),
        ]
    ]
    conv.add_polygon(poly)
    return conv, 47, 33, 10


def sfcgal_bug_153():
    """SFCGAL Bug 153

    Thin roads, from rasterization (many parallel events).
    See: https://github.com/Oslandia/SFCGAL/issues/153
    """
    conv = ToPointsAndSegments()
    poly = [
        [
            (256.0, 760.0),
            (518.0, 760.0),
            (518.0, 630.0),
            (674.0, 630.0),
            (674.0, 239.0),
            (673.0, 239.0),
            (127.0, 239.0),
            (127.0, 240.0),
            (126.0, 240.0),
            (126.0, 513.0),
            (127.0, 513.0),
            (127.0, 514.0),
            (126.0, 514.0),
            (126.0, 630.0),
            (255.0, 630.0),
            (256.0, 630.0),
            (256.0, 760.0),
        ],
        [
            (128.0, 629.0),
            (128.0, 423.0),
            (270.0, 423.0),
            (270.0, 422.0),
            (271.0, 422.0),
            (271.0, 240.0),
            (672.0, 240.0),
            (672.0, 629.0),
            (128.0, 629.0),
        ],
        [
            (258.0, 759.0),
            (258.0, 631.0),
            (516.0, 631.0),
            (516.0, 759.0),
            (258.0, 759.0),
        ],
        [
            (128.0, 421.0),
            (128.0, 240.0),
            (269.0, 240.0),
            (269.0, 421.0),
            (128.0, 421.0),
        ],
    ]
    conv.add_polygon(poly)
    return conv, 105, 74, 12


def test_3tris():
    """3 triangles"""
    conv = ToPointsAndSegments()
    polygons = [
        [[(0, 0), (1, 0), (0.5, -0.5), (0, 0)]],
        [[(1, 0.5), (2, 0.5), (1.5, 1), (1, 0.5)]],
        [[(2, 0), (3, 0), (2.5, -0.5), (2, 0)]],
    ]
    for polygon in polygons:
        conv.add_polygon(polygon)
    return conv, 24, 16, 8


def test_3tris_split():
    """One side that should just use handle and other side should handle_ccw
    """
    conv = ToPointsAndSegments()
    polygons = [
        [[(1, 0), (2, 0), (1.5, -0.5), (1, 0)]],
        [[(1, 3), (2, 3), (1.5, 3.5), (1, 3)]],
        [[(3, 0), (4, 0), (3.5, -0.5), (3, 0)]],
    ]
    for polygon in polygons:
        conv.add_polygon(polygon)
    return conv, 24, 16, 7


def koch_rec2():
    """Koch curve, 2nd recursion level
    
    Note, contains 4 segments without length
    """
    ring = [
        (0.0, 0.0),
        (0.16666666666666663, 0.28867513459481287),
        (-1.1102230246251565e-16, 0.5773502691896257),
        (0.3333333333333332, 0.5773502691896258),
        (0.4999999999999998, 0.8660254037844388),
        (0.33333333333333304, 1.1547005383792517),
        (-2.7755575615628914e-16, 1.1547005383792517),
        (0.16666666666666635, 1.4433756729740645),
        (-3.885780586188048e-16, 1.7320508075688774),
        (0.3333333333333329, 1.7320508075688776),
        (0.4999999999999995, 2.0207259421636907),
        (0.6666666666666663, 1.732050807568878),
        (0.9999999999999996, 1.7320508075688783),
        (1.166666666666666, 2.020725942163691),
        (0.9999999999999993, 2.309401076758504),
        (1.3333333333333326, 2.309401076758504),
        (1.4999999999999991, 2.598076211353317),
        (1.6666666666666656, 2.309401076758504),
        (1.999999999999999, 2.309401076758504),
        (1.8333333333333321, 2.020725942163691),
        (1.9999999999999987, 1.7320508075688783),
        (2.333333333333332, 1.7320508075688783),
        (2.499999999999999, 2.020725942163691),
        (2.6666666666666656, 1.7320508075688783),
        (2.999999999999999, 1.7320508075688783),
        (2.833333333333332, 1.4433756729740654),
        (2.9999999999999987, 1.1547005383792526),
        (2.666666666666665, 1.1547005383792526),
        (2.4999999999999982, 0.8660254037844397),
        (2.6666666666666647, 0.5773502691896268),
        (2.9999999999999982, 0.5773502691896267),
        (2.8333333333333313, 0.2886751345948139),
        (2.999999999999998, 9.992007221626409e-16),
        (2.6666666666666643, 1.0400222821342193e-15),
        (2.4999999999999973, -0.2886751345948117),
        (2.333333333333331, 1.1657341758564144e-15),
        (1.9999999999999976, 1.2065557358279928e-15),
        (1.8333333333333308, -0.28867513459481153),
        (1.9999999999999973, -0.5773502691896245),
        (1.666666666666664, -0.5773502691896243),
        (1.4999999999999973, -0.866025403784437),
        (1.3333333333333308, -0.5773502691896242),
        (0.9999999999999976, -0.5773502691896242),
        (1.1666666666666643, -0.2886751345948113),
        (0.9999999999999976, 1.4988010832439613e-15),
        (0.6666666666666643, 1.5396226432155397e-15),
        (0.4999999999999975, -0.2886751345948112),
        (0.33333333333333093, 1.6653345369377348e-15),
        (0, 0),
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 114, 67, 24


def test_capital_T():
    """Capital T, has more than one triangle in parallel fan
            
    Exhibits infinite event loop because of flipping...
    """
    #    T
    ring = [
        (15.5055, 28.7004),
        (20.8063, 28.7004),
        (20.8063, 44.1211),
        (26.7445, 44.1211),
        (26.7445, 47.8328),
        (9.5668, 47.8328),
        (9.5668, 44.1211),
        (15.5055, 44.1211),
        (15.5055, 28.7004),
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 21, 14, 8


def test_koch_rec3():
    """Koch snowflake curve with recursion depth of 3

    """

    ## Note, this test sometimes fails. The resulting skeleton structure does
    ## *not* seem to be stable with respect to the number of nodes produced.
    ## The number of nodes can be 497, 498, 499 or 500.

    ## FIXME: investigate why this test is unstable
    ## (does the input always have same number of triangles?)

    ring = [
        (0.0, 0.0),
        (0.05555555555555554, 0.09622504486493763),
        (-4.163336342344337e-17, 0.19245008972987523),
        (0.11111111111111106, 0.1924500897298753),
        (0.16666666666666657, 0.2886751345948129),
        (0.111111111111111, 0.3849001794597505),
        (-1.1102230246251565e-16, 0.3849001794597505),
        (0.05555555555555543, 0.4811252243246882),
        (-1.5265566588595902e-16, 0.5773502691896257),
        (0.11111111111111095, 0.5773502691896257),
        (0.16666666666666646, 0.6735753140545634),
        (0.22222222222222207, 0.5773502691896258),
        (0.33333333333333315, 0.5773502691896258),
        (0.3888888888888887, 0.6735753140545635),
        (0.3333333333333331, 0.769800358919501),
        (0.4444444444444442, 0.769800358919501),
        (0.4999999999999997, 0.8660254037844387),
        (0.44444444444444414, 0.9622504486493764),
        (0.33333333333333304, 0.9622504486493764),
        (0.38888888888888856, 1.058475493514314),
        (0.333333333333333, 1.1547005383792515),
        (0.22222222222222188, 1.1547005383792515),
        (0.16666666666666627, 1.058475493514314),
        (0.11111111111111074, 1.1547005383792515),
        (-3.608224830031759e-16, 1.1547005383792515),
        (0.05555555555555518, 1.250925583244189),
        (-4.0245584642661925e-16, 1.3471506281091266),
        (0.1111111111111107, 1.3471506281091266),
        (0.16666666666666624, 1.443375672974064),
        (0.11111111111111066, 1.5396007178390017),
        (-4.440892098500626e-16, 1.5396007178390017),
        (0.055555555555555095, 1.6358257627039392),
        (-4.85722573273506e-16, 1.7320508075688767),
        (0.11111111111111062, 1.7320508075688767),
        (0.16666666666666613, 1.8282758524338143),
        (0.22222222222222174, 1.7320508075688767),
        (0.3333333333333328, 1.7320508075688767),
        (0.38888888888888834, 1.8282758524338143),
        (0.33333333333333276, 1.9245008972987518),
        (0.44444444444444386, 1.9245008972987518),
        (0.4999999999999994, 2.0207259421636894),
        (0.555555555555555, 1.9245008972987518),
        (0.6666666666666661, 1.9245008972987518),
        (0.6111111111111106, 1.8282758524338143),
        (0.6666666666666662, 1.7320508075688767),
        (0.7777777777777772, 1.7320508075688767),
        (0.8333333333333328, 1.8282758524338143),
        (0.8888888888888884, 1.7320508075688767),
        (0.9999999999999996, 1.7320508075688767),
        (1.0555555555555551, 1.8282758524338143),
        (0.9999999999999996, 1.9245008972987518),
        (1.1111111111111107, 1.9245008972987518),
        (1.1666666666666663, 2.0207259421636894),
        (1.1111111111111107, 2.116950987028627),
        (0.9999999999999996, 2.116950987028627),
        (1.0555555555555551, 2.2131760318935645),
        (0.9999999999999996, 2.309401076758502),
        (1.1111111111111107, 2.309401076758502),
        (1.1666666666666663, 2.4056261216234396),
        (1.2222222222222219, 2.309401076758502),
        (1.333333333333333, 2.309401076758502),
        (1.3888888888888886, 2.4056261216234396),
        (1.333333333333333, 2.501851166488377),
        (1.4444444444444442, 2.501851166488377),
        (1.4999999999999998, 2.5980762113533147),
        (1.5555555555555554, 2.501851166488377),
        (1.6666666666666665, 2.501851166488377),
        (1.611111111111111, 2.4056261216234396),
        (1.6666666666666665, 2.309401076758502),
        (1.7777777777777777, 2.309401076758502),
        (1.8333333333333333, 2.4056261216234396),
        (1.8888888888888888, 2.309401076758502),
        (2.0, 2.309401076758502),
        (1.9444444444444444, 2.2131760318935645),
        (2.0, 2.116950987028627),
        (1.8888888888888888, 2.116950987028627),
        (1.8333333333333333, 2.0207259421636894),
        (1.8888888888888888, 1.9245008972987518),
        (2.0, 1.9245008972987518),
        (1.9444444444444444, 1.8282758524338143),
        (2.0, 1.7320508075688767),
        (2.111111111111111, 1.7320508075688767),
        (2.166666666666667, 1.8282758524338143),
        (2.2222222222222223, 1.7320508075688767),
        (2.3333333333333335, 1.7320508075688767),
        (2.3888888888888893, 1.8282758524338143),
        (2.333333333333334, 1.9245008972987518),
        (2.444444444444445, 1.9245008972987518),
        (2.500000000000001, 2.0207259421636894),
        (2.5555555555555562, 1.9245008972987518),
        (2.6666666666666674, 1.9245008972987518),
        (2.6111111111111116, 1.8282758524338143),
        (2.666666666666667, 1.7320508075688767),
        (2.777777777777778, 1.7320508075688767),
        (2.833333333333334, 1.8282758524338143),
        (2.8888888888888893, 1.7320508075688767),
        (3.0000000000000004, 1.7320508075688767),
        (2.9444444444444446, 1.6358257627039392),
        (3.0, 1.5396007178390017),
        (2.888888888888889, 1.5396007178390017),
        (2.833333333333333, 1.443375672974064),
        (2.8888888888888884, 1.3471506281091266),
        (2.9999999999999996, 1.3471506281091266),
        (2.9444444444444438, 1.250925583244189),
        (2.999999999999999, 1.1547005383792515),
        (2.888888888888888, 1.1547005383792515),
        (2.833333333333332, 1.058475493514314),
        (2.777777777777777, 1.1547005383792515),
        (2.6666666666666656, 1.1547005383792515),
        (2.61111111111111, 1.058475493514314),
        (2.666666666666665, 0.9622504486493763),
        (2.555555555555554, 0.9622504486493763),
        (2.4999999999999982, 0.8660254037844386),
        (2.5555555555555536, 0.7698003589195009),
        (2.6666666666666647, 0.7698003589195009),
        (2.611111111111109, 0.6735753140545633),
        (2.6666666666666643, 0.5773502691896256),
        (2.7777777777777755, 0.5773502691896256),
        (2.8333333333333313, 0.6735753140545632),
        (2.8888888888888866, 0.5773502691896255),
        (2.999999999999998, 0.5773502691896255),
        (2.944444444444442, 0.4811252243246879),
        (2.9999999999999973, 0.38490017945975025),
        (2.888888888888886, 0.38490017945975025),
        (2.8333333333333304, 0.28867513459481264),
        (2.8888888888888857, 0.19245008972987498),
        (2.999999999999997, 0.19245008972987493),
        (2.944444444444441, 0.09622504486493733),
        (2.9999999999999964, -3.191891195797325e-16),
        (2.8888888888888853, -3.055819329225397e-16),
        (2.8333333333333295, -0.0962250448649379),
        (2.777777777777774, -2.636779683484747e-16),
        (2.666666666666663, -2.500707816912819e-16),
        (2.611111111111107, -0.09622504486493784),
        (2.6666666666666625, -0.1924500897298755),
        (2.5555555555555514, -0.19245008972987546),
        (2.4999999999999956, -0.28867513459481303),
        (2.44444444444444, -0.1924500897298754),
        (2.333333333333329, -0.1924500897298754),
        (2.3888888888888844, -0.09622504486493777),
        (2.3333333333333286, -1.6653345369377348e-16),
        (2.2222222222222174, -1.5292626703658066e-16),
        (2.1666666666666616, -0.09622504486493774),
        (2.1111111111111063, -1.1102230246251565e-16),
        (1.9999999999999951, -9.741511580532284e-17),
        (1.9444444444444395, -0.09622504486493769),
        (1.9999999999999951, -0.19245008972987537),
        (1.888888888888884, -0.19245008972987532),
        (1.8333333333333284, -0.2886751345948129),
        (1.888888888888884, -0.3849001794597506),
        (1.9999999999999951, -0.3849001794597507),
        (1.9444444444444393, -0.48112522432468824),
        (1.9999999999999947, -0.577350269189626),
        (1.8888888888888835, -0.5773502691896258),
        (1.833333333333328, -0.6735753140545634),
        (1.7777777777777724, -0.5773502691896257),
        (1.6666666666666612, -0.5773502691896257),
        (1.6111111111111056, -0.6735753140545633),
        (1.6666666666666612, -0.7698003589195009),
        (1.55555555555555, -0.7698003589195008),
        (1.4999999999999944, -0.8660254037844384),
        (1.4444444444444389, -0.7698003589195007),
        (1.3333333333333277, -0.7698003589195007),
        (1.3888888888888833, -0.6735753140545631),
        (1.3333333333333277, -0.5773502691896255),
        (1.2222222222222165, -0.5773502691896255),
        (1.166666666666661, -0.6735753140545631),
        (1.1111111111111054, -0.5773502691896254),
        (0.9999999999999942, -0.5773502691896254),
        (1.0555555555555498, -0.48112522432468774),
        (0.9999999999999942, -0.38490017945975014),
        (1.1111111111111054, -0.3849001794597501),
        (1.166666666666661, -0.2886751345948124),
        (1.1111111111111054, -0.19245008972987482),
        (0.9999999999999942, -0.19245008972987482),
        (1.0555555555555498, -0.09622504486493719),
        (0.9999999999999942, 4.163336342344337e-16),
        (0.8888888888888831, 4.299408208916265e-16),
        (0.8333333333333275, -0.09622504486493716),
        (0.7777777777777719, 4.718447854656915e-16),
        (0.6666666666666607, 4.854519721228843e-16),
        (0.6111111111111052, -0.0962250448649371),
        (0.6666666666666606, -0.19245008972987476),
        (0.5555555555555496, -0.1924500897298747),
        (0.499999999999994, -0.2886751345948123),
        (0.4444444444444385, -0.19245008972987468),
        (0.3333333333333274, -0.19245008972987468),
        (0.3888888888888829, -0.09622504486493705),
        (0.3333333333333273, 5.551115123125783e-16),
        (0.22222222222221621, 5.687186989697711e-16),
        (0.1666666666666606, -0.09622504486493702),
        (0.11111111111110508, 6.106226635438361e-16),
        (0, 0),
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 486, 295, 48


def corner_same_inwards():
    """same corner inwards"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0, 0),
            (10.0, 0),
            (10, 20),
            (0, 20.0),
            (0.0, 11.0),
            (1, 11),
            (1, 10),
            (0, 10),
            (0, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 21, 14, 5


def multiple_parallel():
    """Parallelogram with parallel wavefronts collapsing"""
    # FIXME: Multiple skeleton nodes, because of fan that just collapses
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [
            [
                (0, 0),
                (1, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (5, 1),
                (4, 1),
                (3, 1),
                (2, 1),
                (1, 1),
                (0, 1),
                (0, 0),
            ]
        ]
    )
    return conv, 29, 18, 12


def cross():
    """Figure of a cross """
    # FIXME: Multiple skeleton nodes, because of fan that just collapses
    ring = [
        (0, 0),
        (10, 0),
        (10, -10),
        (15, -10),
        (15, 0),
        (25, 0),
        (25, 5),
        (15, 5),
        (15, 15),
        (10, 15),
        (10, 5),
        (0, 5),
        (0, 0),
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 28, 17, 12


def corner_top_short():
    """corner top -- short"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0, 0),
            (10.0, 0),
            (10, 20),
            (-0.5, 20.0),
            (-0.5, 11.0),
            (-1, 11),
            (-1, 10),
            (0, 10),
            (0, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8


def corner_bottom_short():
    """corner bottom -- short"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (-0.5, 0),
            (10.0, 0),
            (10, 20),
            (0, 20.0),
            (0.0, 11.0),
            (-1, 11),
            (-1, 10),
            (-0.5, 10),
            (-0.5, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 21, 14, 8


def butterfly_like2():
    """butterfly like 2"""
    conv = ToPointsAndSegments()
    polygon = [
        [(0, 0), (5, 1), (10, 0), (10, 1.5), (10, 3), (5, 2), (0, 3), (0, 0)]
    ]  # (0,1.5), (0,0)]]
    conv.add_polygon(polygon)
    return conv, 16, 10, 7


def butterfly_like():
    """butterfly like 1"""
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (5, 1), (10, 0), (10, 3), (5, 2), (0, 3), (0, 0)]]
    conv.add_polygon(polygon)
    return conv, 14, 9, 6


def mute_button_shape():
    """mute button shape"""
    conv = ToPointsAndSegments()
    polygon = [
        [(0, 0), (3, 0), (6, 4), (10, 4), (10, 5), (6, 5), (3, 9), (0, 9), (0, 0)]
    ]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8


def bottom_circle_top_square():
    """Bottom half is a circle, top is squarish, leading to parallel 
    wavefronts.
    
    Test contains kinetic vertex that is generated at certain time
    and later ended at same time; This means that segment does not
    have any length

    If choose_next_event is set up to first handle split events,
    this test breaks. Apparently then one triangle is not processed
    properly and survives until the end of the process
    """
    # bottom circle
    from math import pi, cos, sin, degrees

    ring = []
    pi2 = 2 * pi
    ct = 7
    alpha = pi / ct
    for i in range(ct + 1):
        ring.append((cos(pi + i * alpha), sin(pi + i * alpha)))
    ring.extend([(1, 10), (-1, 10)])
    ring.append(ring[0])
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 22, 13, 10


def rect_extra_pt():
    """"Rectangle with extra point on straight (180 degrees) edge """
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (0.0, 10), (15, 10), (15, 0.0), (2.0, 0.0), (0, 0)]]
    conv.add_polygon(polygon)
    return conv, 12, 8, 5


def rect_extra_pt2():
    """"Rectangle with extra point on straight (180 degrees) edge """
    conv = ToPointsAndSegments()
    polygon = [[(0, 0), (5.0, 0.0), (10, 0), (10, 6.0), (0, 6), (0, 0)]]
    conv.add_polygon(polygon)
    return conv, 12, 8, 5


def dent_equal():
    """equal dent"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0, 0),
            (10.0, 0),
            (10, 20),
            (0, 20.0),
            (0.0, 11.0),
            (-1, 11),
            (-1, 10),
            (0, 10),
            (0, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8


def parallelogram_parallel_fronts():
    """Parallelogram with parallel wavefronts collapsing"""
    conv = ToPointsAndSegments()
    conv.add_polygon([[(-15, 0), (0, 0), (15, 25), (0, 25), (-15, 0)]])
    return conv, 9, 6, 4


def corner_same1():
    """same corner 1"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0, 0),
            (10.0, 0),
            (10, 20),
            (0, 20.0),
            (0.0, 11.0),
            (-1, 11),
            (-1, 10),
            (0, 10),
            (0, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 20, 13, 8


def corner_same2():
    """same corner 2"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0, 0),
            (10.0, 0),
            (10, 20),
            (0, 20.0),
            (0.0, 11.0),
            (-1, 12),
            (-1, 9),
            (0, 10),
            (0, 0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 22, 15, 6


def weird_dent():
    """weird dent"""
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0.6, 5),
            (1, 4.5),
            (3, 4.5),
            (3, 0),
            (7, 0),
            (7, 10),
            (3, 10),
            (3, 5.5),
            (1, 5.5),
            (0.6, 5),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 24, 16, 7


def tris3_handle_cw_ccw():
    """Splitting and then handle the fan
    """
    conv = ToPointsAndSegments()
    polygons = [
        [[(0, 0), (1, 0), (0.5, -0.5), (0, 0)]],
        [[(1, 3), (2, 3), (1.5, 3.5), (1, 3)]],
        [[(2, 0), (3, 0), (2.5, -0.5), (2, 0)]],
    ]
    for polygon in polygons:
        conv.add_polygon(polygon)
    return conv, 24, 16, 8


def rocket():
    """Two 2-triangles collapse at same time, sharing one vertex, that
    should lead to 1 new skeleton node and only 1 new kinetic vertex
    (3 original vertices are stopped, with 2 at same processing step).
    
    This test has a vertex that is started and stopped at the same time!
    """
    ###################################################
    # No parallel edges, but simultaneous event,
    # leading to infinite fast vertex, if not careful
    ###################################################
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0.0, 10.0),
            (1.0, 8.0),
            (2.0, 10.0),
            (2.1, 3.0),
            (1.0, 0.0),
            (-0.1, 3),
            (0.0, 10.0),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 13, 8, 6


def multiple_parallel2():
    """Parallelogram with parallel wavefronts collapsing"""
    conv = ToPointsAndSegments()
    conv.add_polygon(
        [[(0, 0), (2, 0), (4, 0), (5, 0), (5, 1), (3, 1), (1, 1), (0, 1), (0, 0)]]
    )
    return conv, 21, 14, 8


def stairs():
    """Stairs like shape
    """
    ###################################################
    # No parallel edges, but simultaneous event,
    # leading to infinite fast vertex, if not careful
    ###################################################
    conv = ToPointsAndSegments()
    polygon = [
        [
            (0, 10),
            (2, 10),
            (2, 12),
            (4, 12),
            (4, 13),
            (5, 13),
            (5, 14),
            (3, 14),
            (3, 13),
            (1, 13),
            (1, 11),
            (0, 11),
            (0, 10),
        ]
    ]
    conv.add_polygon(polygon)
    return conv, 29, 18, 12


def simple_parallel():
    """simple parallel"""
    segments = [
        ((0.673575314055, 0.166666666667), (0.866025403784, 0.166666666667)),
        ((0.673575314055, -0.166666666667), (0.5, -0.0)),
        ((0.866025403784, -0.166666666667), (0.673575314055, -0.166666666667)),
        ((0.5, -0.0), (0.673575314055, 0.166666666667)),
        ((0.866025403784, 0.166666666667), (1.25, -0.0)),
        ((0.866025403784, -0.166666666667), (1.25, -0.0)),
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 13, 8, 6


def needle_parallel():
    """parallel needle"""
    segments = [
        ((0, 0), (3, 0)),
        ((3, 0), (4, 1)),
        ((4, 1), (3, 2)),
        ((3, 2), (0, 2)),
        ((0, 2), (0, 0)),
    ]
    # convert to triangulation input
    conv = ToPointsAndSegments()
    for line in segments:
        conv.add_point(line[0])
        conv.add_point(line[1])
        conv.add_segment(*line)
    return conv, 11, 7, 5


def test_many_flips1():
    """stairs with sharp corner opposite of it, no. 1"""
    ring = [
        (128.0, 576.0),
        (144.0, 576.0),
        (144.0, 560.0),
        (160.0, 560.0),
        (160.0, 544.0),
        (176.0, 544.0),
        (176.0, 528.0),
        (192.0, 528.0),
        (192.0, 512.0),
        (208.0, 512.0),
        (208.0, 496.0),
        (224.0, 496.0),
        (224.0, 480.0),
        (240.0, 480.0),
        (240.0, 352.0),
        (480.0, 352.0),
        (560.0, 400.0),
        (560.0, 784.0),
        (508.16, 796.96),
        (400.0, 752.0),
        (496.0, 800.0),
        (256.0, 784.0),
        (32.0, 784.0),
        (32.0, 512.0),
        (128.0, 576.0),
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 88, 65, 5


def test_many_flips2():
    """stairs with sharp corner opposite of it, no. 2"""
    ring = [
        (128.0, 768.0),
        (128.0, 576.0),
        (160.0, 576.0),
        (160.0, 544.0),
        (192.0, 544.0),
        (192.0, 512.0),
        (224.0, 512.0),
        (224.0, 480.0),
        (256.0, 480.0),
        (256.0, 448.0),
        (288.0, 448.0),
        (288.0, 416.0),
        (320.0, 416.0),
        (320.0, 384.0),
        (352.0, 384.0),
        (352.0, 352.0),
        (480.0, 352.0),
        (480.0, 720.0),
        (352.0, 608.0),
        (480.0, 768.0),
        (128.0, 768.0),
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon([ring])
    return conv, 58, 39, 19


def split_event_from_top10nl():
    """Top10NL data with parallel set of events, if the
    wavefront is not updated before calculating the new events
    this crashes (as we get a split event, instead of edge event
    without neighbors present...
    """
    poly = [
        [
            (181538.174, 316924.981),
            (181536.571, 316927.503),
            (181528.111, 316921.634),
            (181519.449, 316910.678),
            (181515.552, 316905.749),
            (181512.149, 316901.445),
            (181513.118, 316900.678),
            (181514.492, 316899.592),
            (181517.905, 316903.909),
            (181521.802, 316908.838),
            (181524.631, 316912.416),
            (181530.179, 316919.433),
            (181538.174, 316924.981),
        ]
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 37, 26, 8


def cbs_vlissingen_parallel():
    """Vlissingen CBS municipality border, with parallel part"""

    #
    # In -- step 123, all is fine -- in step 124 one of the bisectors
    # starts to point to a completely wrong direction
    #
    # can we have a post-condition for bisectors:
    # * angle of bisector should be between angle of wavefront at left
    # and wavefront at right
    # ????
    #

    poly = [
        [
            [32436.377014160145, 388952.5920410156],
            [32376.976196289044, 385047.20623779297],
            [31021.518798828092, 385207.7283935547],
            [31021.46978759763, 385207.75939941406],
            [31021.4058227539, 385207.79962158203],
            [31021.381591796864, 385207.8114013672],
            [31021.36541748048, 385207.8178100586],
            [31021.281982421886, 385207.8508300781],
            [30816.367004394495, 386274.0806274414],
            [30816.28143310545, 386275.5950317383],
            [30814.7680053711, 386275.4934082031],
            [30808.61541748044, 386275.0754394531],
            [30738.59619140627, 386270.3206176758],
            [30737.728027343735, 386270.2615966797],
            [30737.62902832033, 386270.2546386719],
            [30737.53002929685, 386270.24798583984],
            [30736.66284179688, 386270.1890258789],
            [30736.257019042994, 386270.1614379883],
            [30736.331237793012, 386268.69958496094],
            [30736.332031249985, 386268.6838378906],
            [30736.40838623045, 386267.26739501953],
            [30736.409790039033, 386267.2416381836],
            [30736.41058349608, 386267.2255859375],
            [30737.011413574208, 386256.1140136719],
            [30737.013793945276, 386256.0668334961],
            [30737.01763916015, 386256.0194091797],
            [30737.12438964844, 386254.6987915039],
            [30737.19958496091, 386254.69842529297],
            [30737.768432617188, 386254.6951904297],
            [30738.50921630857, 386254.6951904297],
            [30738.60504150386, 386254.6951904297],
            [30738.701232910134, 386254.6951904297],
            [30739.265991210927, 386254.6950073242],
            [30741.26818847655, 386254.66943359375],
            [30741.27001953127, 386254.6439819336],
            [30741.445007324222, 386252.13299560547],
            [30741.50939941409, 386251.2048339844],
            [30741.56658935546, 386250.38079833984],
            [30741.690002441377, 386248.60443115234],
            [30742.54302978516, 386236.32122802734],
            [30742.627441406243, 386235.1083984375],
            [30742.806823730458, 386232.5239868164],
            [30742.87683105466, 386231.5184326172],
            [30742.94543457031, 386230.5319824219],
            [30742.946411132794, 386230.51861572266],
            [30742.947387695316, 386230.5050048828],
            [30743.145629882787, 386227.6286010742],
            [30740.254394531257, 386227.54040527344],
            [30739.24938964845, 386227.5100097656],
            [30738.22778320312, 386227.47900390625],
            [30735.694396972685, 386227.4022216797],
            [30729.307800292943, 386227.20861816406],
            [30726.972412109357, 386227.1380004883],
            [30726.049438476526, 386227.10998535156],
            [30725.103820800752, 386227.08123779297],
            [30722.46099853515, 386227.00201416016],
            [30722.26562500003, 386229.6384277344],
            [30722.20562744142, 386230.4514160156],
            [30722.200805664026, 386230.51678466797],
            [30722.195983886708, 386230.5817871094],
            [30722.130432128954, 386231.47064208984],
            [30721.95764160155, 386233.81579589844],
            [30721.082214355487, 386245.6901855469],
            [30720.915222167965, 386247.9567871094],
            [30720.846801757787, 386248.8815917969],
            [30720.777404785164, 386249.82598876953],
            [30720.77600097658, 386249.8422241211],
            [30720.58081054686, 386252.49798583984],
            [30723.19799804688, 386252.78021240234],
            [30723.215637207024, 386252.7819824219],
            [30723.2333984375, 386252.78399658203],
            [30724.187194824222, 386252.8864135742],
            [30725.018432617184, 386252.9755859375],
            [30726.374633789015, 386253.12841796875],
            [30726.41162109373, 386253.13262939453],
            [30726.356384277333, 386254.54583740234],
            [30725.73242187498, 386266.4017944336],
            [30725.674987792954, 386267.4930419922],
            [30725.596008300763, 386268.9957885742],
            [30725.595214843754, 386269.0109863281],
            [30724.103027343725, 386268.9124145508],
            [30724.078430175738, 386268.9108276367],
            [30704.324035644506, 386267.6050415039],
            [30677.24218750004, 386265.81463623047],
            [30676.51220703126, 386265.76623535156],
            [30675.030029296893, 386265.64221191406],
            [30675.031799316428, 386265.6116333008],
            [30675.109802246057, 386264.3619995117],
            [30675.121398925778, 386264.17639160156],
            [30675.19482421875, 386262.99841308594],
            [30675.563415527333, 386257.1024169922],
            [30675.79980468748, 386253.3178100586],
            [30675.88800048829, 386252.29541015625],
            [30676.833435058586, 386251.9852294922],
            [30676.845214843746, 386251.98138427734],
            [30677.390197753906, 386251.8090209961],
            [30678.104003906228, 386251.58361816406],
            [30678.12799072264, 386251.57598876953],
            [30678.141784667994, 386251.5718383789],
            [30678.193420410178, 386251.5554199219],
            [30679.83398437499, 386251.0358276367],
            [30679.953430175778, 386249.2233886719],
            [30680.00244140624, 386248.4788208008],
            [30680.038208007776, 386247.93243408203],
            [30680.1458129883, 386246.2974243164],
            [30681.44403076171, 386226.5543823242],
            [30681.610412597627, 386224.02459716797],
            [30681.67340087895, 386223.0632324219],
            [30681.73858642579, 386222.0715942383],
            [30681.91961669921, 386219.3201904297],
            [30681.921386718743, 386219.2941894531],
            [30679.125183105458, 386219.1240234375],
            [30678.124389648467, 386219.07220458984],
            [30677.131591796875, 386219.0212402344],
            [30674.629028320327, 386218.8920288086],
            [30668.751831054684, 386218.5889892578],
            [30666.346435546864, 386218.46502685547],
            [30665.396789550745, 386218.416015625],
            [30664.423217773467, 386218.36602783203],
            [30664.402587890607, 386218.3648071289],
            [30664.38183593753, 386218.3635864258],
            [30663.897033691414, 386218.33880615234],
            [30661.660217285138, 386218.22442626953],
            [30661.511413574186, 386220.97302246094],
            [30661.45898437499, 386221.9639892578],
            [30661.407836914048, 386222.93743896484],
            [30661.278015136715, 386225.4030151367],
            [30661.272033691435, 386225.51721191406],
            [30661.265991210938, 386225.63104248047],
            [30660.358398437475, 386242.9262084961],
            [30660.233825683597, 386245.2998046875],
            [30660.182617187507, 386246.27502441406],
            [30660.130615234368, 386247.2651977539],
            [30659.982238769553, 386250.0950317383],
            [30662.069213867173, 386250.1633911133],
            [30662.81542968748, 386250.1876220703],
            [30663.531982421897, 386250.2106323242],
            [30663.66778564451, 386250.21502685547],
            [30663.806640624978, 386250.2196044922],
            [30664.805603027326, 386250.25201416016],
            [30666.440429687475, 386250.3256225586],
            [30666.32983398435, 386251.8782348633],
            [30665.448242187456, 386262.44860839844],
            [30665.325805664026, 386263.9174194336],
            [30665.291809081984, 386264.32403564453],
            [30665.212585449208, 386265.2689819336],
            [30665.210998535153, 386265.28942871094],
            [30665.208984374996, 386265.30938720703],
            [30663.769836425774, 386265.29138183594],
            [30662.54998779298, 386265.2385864258],
            [30643.970642089793, 386264.4298095703],
            [30642.690795898423, 386264.3740234375],
            [30642.663391113238, 386264.3728027344],
            [30641.17822265623, 386264.30822753906],
            [30641.1788330078, 386264.2952270508],
            [30641.251586914055, 386262.9196166992],
            [30641.258422851566, 386262.7938232422],
            [30641.32818603514, 386261.5068359375],
            [30641.335021972653, 386261.3840332031],
            [30641.342041015636, 386261.25604248047],
            [30642.945617675803, 386231.76641845703],
            [30643.01458740237, 386230.49603271484],
            [30644.78039550781, 386198.0289916992],
            [30644.92663574218, 386195.12701416016],
            [30644.91601562502, 386195.12658691406],
            [30642.092041015632, 386195.041015625],
            [30640.750427246086, 386195.00018310547],
            [30640.69580078126, 386194.9985961914],
            [30640.641418457053, 386194.99700927734],
            [30640.032409667976, 386194.9783935547],
            [30638.042419433572, 386194.9219970703],
            [30637.887023925807, 386197.58782958984],
            [30637.8859863281, 386197.6046142578],
            [30634.22198486327, 386260.68298339844],
            [30634.158386230487, 386261.7767944336],
            [30634.06262207034, 386263.26361083984],
            [30633.664794921857, 386263.24322509766],
            [30632.58422851563, 386263.18798828125],
            [30631.75604248049, 386263.1456298828],
            [30631.744628906243, 386263.14501953125],
            [30626.448242187555, 386262.87341308594],
            [30977.320983886733, 389327.4212036133],
            [32436.377014160145, 388952.5920410156],
        ]
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    ## FIXME: not completely correct (parallel part in south contains 'snapped' segments)
    return conv, 720, 539, 5


def test_parallel_split_event_leaves_unconstrained_edge_collapse():
    """Polygon with many parallel edges; if split is handled before edge -> problem, as unconstrained edge collapse is not dealt with as split operation """
    poly = [
        [(0,0), (1,0), (1,30), (20,30), (20,31), (1,31), (1,61), (0.5, 61), (0.5,60), (0,60), (0,0)]
    ]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    # FIXME: the segments here can be super-short (and there are 2 nodes created in the center where there should be 1 node)
    return conv, 25, 16, 10


def test_failing_parallel_same_legs_3tri():
    """Polygon from Top10NL with many parallel edges"""
    poly = [[
    (197205.31, 322686.259), (197201.373, 322689.668), (197197.947, 322692.635), (197194.69, 322688.47), (197149.202, 322630.307), (197127.488, 322599.891), (197115.629, 322583.279), (197119.319, 322580.84), (197122.452, 322578.766), (197145.481, 322609.39), (197191.51, 322668.125), (197205.31, 322686.259)]]
    conv = ToPointsAndSegments()
    conv.add_polygon(poly)
    return conv, 31, 21, 10

# def missing_event():
#     ring = [(82.9195, 34.8762), (82.9195, 36.123),
#     (82.8224828125, 37.4505816406), (82.53454375, 38.658784375),
#     (82.0603515625, 39.7298449219), (81.404575, 40.646),
#     (80.5718828125, 41.3894863281), (79.56694375, 41.942540625),
#     (78.3944265625, 42.2873996094), (77.059, 42.4063),
#     (76.2952375244, 42.3687171631), (75.5838064453, 42.2585341797),
#     (74.9242850342, 42.0795993408), (74.3162515625, 41.8357609375),
#     (73.7592843018, 41.5308672607), (73.2529615234, 41.1687666016),
#     (72.3905625, 40.2883375), (71.7256806641, 39.2252599609),
#     (71.2549421875, 38.0103203125), (70.9749732422, 36.6743048828),
#     (70.8824, 35.248), (70.9637001953, 33.823009375),
#     (71.2144078125, 32.50744375), (71.6447333984, 31.3261375),
#     (72.2648875, 30.303925), (73.0850806641, 29.465640625),
#     (73.5733826904, 29.1232322266), (74.1155234375, 28.83611875),
#     (74.7127792236, 28.6074044922), (75.3664263672, 28.44019375),
#     (76.848, 28.3027), (77.9991910156, 28.3734771484),
#     (79.058021875, 28.5858296875), (80.0117917969, 28.9397892578),
#     (80.8478, 29.4353875), (81.5533457031, 30.0726560547),
#     (82.115728125, 30.8516265625), (82.5222464844, 31.7723306641),
#     (82.7602, 32.8348), (80.1098, 32.8348), (79.9671755859, 32.1632625),
#     (79.7567359375, 31.59635), (79.4750064453, 31.1294125),
#     (79.1185125, 30.7578),(82.9195, 34.8762)]
#     # fixme; misses an event
#     # there is a triangle that should be split
#     # it is, but the direction of one of the 2 new vertices points to wrong side
#     conv = ToPointsAndSegments()
#     conv.add_polygon([ring])
#     return conv, 0, 0, 0

# def wrong_offsets():
#     """Resulting segments do not form a planar graph"""
#     import json
#     s = """{
# "type": "FeatureCollection",
# "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:EPSG::28992" } },

# "features": [
# { "type": "Feature", "properties": { "id": 139664900038544.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51043.725310399997397, 391507.68993699998828 ], [ 51042.455319, 391516.15654599998379 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067600.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51038.632411799997499, 391542.760162 ], [ 51039.83351180000318, 391542.923948 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067600.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51039.83351180000318, 391542.923948 ], [ 51039.671322499998496, 391544.167399 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067728.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51039.671322499998496, 391544.167399 ], [ 51041.540670499998669, 391544.37510499998461 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067728.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51041.540670499998669, 391544.37510499998461 ], [ 51041.69552799999656, 391544.839677 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900067856.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51041.69552799999656, 391544.839677 ], [ 51046.507679299997108, 391545.34621899999911 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900069712.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51047.918327300001692, 391507.107457 ], [ 51044.982255199996871, 391506.68801799998619 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900069840.000000, "side": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 51044.982255199996871, 391506.68801799998619 ], [ 51044.826051600000937, 391507.83351199998287 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900069840.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51044.826051600000937, 391507.83351199998287 ], [ 51043.725310399997397, 391507.68993699998828 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070160.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.455319, 391516.15654599998379 ], [ 51042.565606500000285, 391516.170332 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070288.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.473354800000379, 391516.453288 ], [ 51041.308878199997707, 391524.99278299999423 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070416.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51041.308878199997707, 391524.99278299999423 ], [ 51042.464014700002735, 391525.14345299999695 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070480.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.464014700002735, 391525.14345299999695 ], [ 51042.389055500003451, 391525.69883299997309 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070480.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.389055500003451, 391525.69883299997309 ], [ 51041.245075500002713, 391525.5081699999864 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070800.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51041.245075500002713, 391525.5081699999864 ], [ 51040.449382300001162, 391530.812791 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900070800.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51040.449382300001162, 391530.812791 ], [ 51040.220387200002733, 391530.78416699997615 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900071248.000000, "side": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 51040.220387200002733, 391530.78416699997615 ], [ 51039.75987090000126, 391535.619588 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900071248.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51039.75987090000126, 391535.619588 ], [ 51038.632411799997499, 391542.760162 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900144272.000000, "side": 1 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.565606500000285, 391516.170332 ], [ 51042.535010500003409, 391516.46099499997217 ] ] } },
# { "type": "Feature", "properties": { "id": 139664900144272.000000, "side": 2 }, "geometry": { "type": "LineString", "coordinates": [ [ 51042.535010500003409, 391516.46099499997217 ], [ 51042.473354800000379, 391516.453288 ] ] } }
# ]
# }"""
#     x = json.loads(s)
#     # parse segments from geo-json
#     segments = []
#     for y in x['features']:
#         segments.append(tuple(map(tuple, y['geometry']['coordinates'])))
#     # convert to triangulation input
#     conv = ToPointsAndSegments()
#     for line in segments:
#         conv.add_point(line[0])
#         conv.add_point(line[1])
#         conv.add_segment(*line)
#     return conv, 0, 0, 0
