import unittest

from tri import ToPointsAndSegments
from grassfire import calc_skel

class TestSimultaneousEvents(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

# ##############################################################################
# # PARALLEL EDGES IN THE INPUT, leading to problems 
# # (e.g. nodes not on correct location)
# ##############################################################################
# 
    def test_cshape(self):
        """Parallel c-shape wavefront"""
        # FIXME: missing parallel piece of wavefront
        # plus having a vertex too many
        conv = ToPointsAndSegments()
        l0 = [(0.0, 0.0), (0.0, 3)]
        l1 = [(0, 3), (5,3)]
        l2 = [(0,0), (5,0)]
        for line in l0, l1, l2:
            conv.add_point(line[0])
            conv.add_point(line[1])
            conv.add_segment(*line)
        skel = calc_skel(conv,
                         pause=True,
                         output=True)


#     def test_flipped_cshape(self):
#         """Parallel c-shape wavefront"""
#         # FIXME: missing parallel piece of wavefront
#         # plus having a vertex too many
#         conv = ToPointsAndSegments()
#         l0 = [(5, 0.0), (5, 3)]
#         l1 = [(0, 3), (5,3)]
#         l2 = [(0,0), (5,0)]
#         for line in l0, l1, l2:
#             conv.add_point(line[0])
#             conv.add_point(line[1])
#             conv.add_segment(*line)
#         skel = calc_skel(conv,
#                          pause=True,
#                          output=True)


#     def test_cshape_bottom(self):
#         """Parallel c-shape wavefront with longer segment on bottom"""
#         # FIXME: missing parallel piece of wavefront
#         # plus having a vertex too many
#         conv = ToPointsAndSegments()
#         l0 = [(0.0, 0.0), (0.0, 3)]
#         l1 = [(0, 3), (5,3)]
#         l2 = [(0,0), (10,0)]
#         for line in l0, l1, l2:
#             conv.add_point(line[0])
#             conv.add_point(line[1])
#             conv.add_segment(*line)
#         skel = calc_skel(conv, pause=True, output=True)

#     def test_cshape_top(self):
#         """Parallel c-shape wavefront with longer segment on top"""
#         # FIXME: missing parallel piece of wavefront
#         # plus having a vertex too many
#         conv = ToPointsAndSegments()
#         l0 = [(0.0, 0.0), (0.0, 3)]
#         l1 = [(0, 3), (10,3)]
#         l2 = [(0,0), (5,0)]
#         for line in l0, l1, l2:
#             conv.add_point(line[0])
#             conv.add_point(line[1])
#             conv.add_segment(*line)
#         skel = calc_skel(conv, pause=True, output=True)


# 
#     ############## FIXME:
#     ## Last event is now 3-triangle, this leads to wrong skeleton!
#     def test_rect_extra_pt(self):
#         """" """
#         conv = ToPointsAndSegments()
#         polygon = [[(0, 0), (0., 10), (15,10), (15,0.), (2., 0.), (0,0)]]
#         conv.add_polygon(polygon)
#         skel = calc_skel(conv, pause=True, output=True)
# 
#     def test_tiny_v(self):
#         """Tiny V at bottom of square"""
#         conv = ToPointsAndSegments()
#         polygon = [[(-10, 0), (-10., 100.), (100.,100.), (100.,0.), (2., 0.), (1,-1), (0,0), (-10,0)]]
#         conv.add_polygon(polygon)
#         skel = calc_skel(conv, pause=True, output=True)
#         assert len(skel.segments()) == (10+7)
#         positions = [n.pos for n in skel.sk_nodes]
#         # additional: 
#         # check if last node geerated internally is at (50,50)
#         assert (50,50) in positions
#     ############## :FIXME
# 
#     def test_2parallel_eq(self):
#         """2 parallel wavefront having equal size"""
#         conv = ToPointsAndSegments()
#         l0 = [(0, 0), (3,0)]
#         l1 = [(0, 1), (3,1)]
#         for line in l0, l1:
#             conv.add_point(line[0])
#             conv.add_point(line[1])
#             conv.add_segment(*line)
#         skel = calc_skel(conv, pause=True, output=True)
# 
#     def test_2parallel_not_eq(self):
#         """2 parallel wavefront having different size"""
#         conv = ToPointsAndSegments()
#         l0 = [(0, 0), (3,0)]
#         l1 = [(1, 1), (2,1)]
#         for line in l0, l1:
#             conv.add_point(line[0])
#             conv.add_point(line[1])
#             conv.add_segment(*line)
#         skel = calc_skel(conv, pause=True, output=True)

#     def test_2parallel_not_eq2(self):
#         """2 parallel wavefront having different size, other one above"""
#         conv = ToPointsAndSegments()
#         l0 = [(0, 0), (3,0)]
#         l1 = [(1, -1), (2,-1)]
#         for line in l0, l1:
#             conv.add_point(line[0])
#             conv.add_point(line[1])
#             conv.add_segment(*line)
#         skel = calc_skel(conv, pause=True, output=True)

# 
#     def test_bottom_circle_top_square(self):
#         # bottom circle
#         from math import pi, cos, sin, degrees
#         ring = []
#         pi2 = 2 * pi
#         ct = 6
#         alpha = pi / ct 
#         print degrees(alpha)
#         for i in range(ct+1):
#             ring.append( (cos(pi+i*alpha), sin(pi+i*alpha)))
#         ring.extend([(1, 10), (-1,10)])
#         ring.append(ring[0])
#         conv = ToPointsAndSegments()
#         conv.add_polygon([ring])
#         skel = calc_skel(conv, pause=True, output=True)
#         assert len(skel.segments()) == 21
#         positions = [n.pos for n in skel.sk_nodes]
#         # additional: 
#         assert (0.,9.) in positions

#     def test_church(self):
#         """church in naaldwijk
#         """
#         ring = [(74029.47599999999511056,445622.80800000001909211),(74022.8169999999954598,445622.11400000000139698),(74023.09900000000197906,445619.97800000000279397),(74021.96000000000640284,445619.86800000001676381),(74022.06500000000232831,445618.78100000001722947),(74023.11100000000442378,445618.88199999998323619),(74024.28500000000349246,445606.70799999998416752),(74024.5,445606.72899999999208376),(74024.98399999999674037,445601.71000000002095476),(74025.26700000000710133,445601.7370000000228174),(74025.43099999999685679,445600.02799999999115244),(74033.13599999999860302,445600.77100000000791624),(74033.26799999999639113,445599.39600000000791624),(74034.29600000000209548,445599.49499999999534339),(74034.16400000000430737,445600.86300000001210719),(74037.91899999999441206,445601.22499999997671694),(74038.05199999999604188,445599.84600000001955777),(74039.09900000000197906,445599.9469999999855645),(74038.96700000000419095,445601.32099999999627471),(74042.68099999999685679,445601.67999999999301508),(74042.8120000000053551,445600.32099999999627471),(74043.87600000000384171,445600.42300000000977889),(74043.74499999999534339,445601.78100000001722947),(74047.73099999999976717,445602.16499999997904524),(74048.09600000000500586,445598.37599999998928979),(74047.09299999999348074,445598.27899999998044223),(74047.19999999999708962,445597.1720000000204891),(74048.21899999999732245,445597.27100000000791624),(74048.31600000000617001,445596.2629999999771826),(74049.39500000000407454,445596.36700000002747402),(74049.29700000000593718,445597.38000000000465661),(74055.42600000000675209,445597.97100000001955777),(74055.52499999999417923,445596.94300000002840534),(74056.61999999999534339,445597.04899999999906868),(74056.52099999999336433,445598.0719999999855645),(74057.59600000000500586,445598.17599999997764826),(74057.4940000000060536,445599.23300000000745058),(74056.38800000000628643,445599.12599999998928979),(74056.05599999999685679,445602.56800000002840534),(74057.1190000000060536,445602.66999999998370185),(74056.9980000000068685,445603.92099999997299165),(74055.94000000000232831,445603.81800000002840534),(74055.66300000000046566,445606.68599999998696148),(74058.68499999999767169,445606.97700000001350418),(74058.76900000000023283,445606.09999999997671694),(74059.74599999999918509,445606.19400000001769513),(74059.65799999999580905,445607.106000000028871),(74062.35899999999674037,445607.36599999997997656),(74062.44800000000395812,445606.4469999999855645),(74063.42299999999522697,445606.54100000002654269),(74063.32499999999708962,445607.5590000000083819),(74066.11000000000058208,445607.9340000000083819),(74066.59100000000034925,445603.26099999999860302),(74065.60700000000360887,445603.15999999997438863),(74065.71199999999953434,445602.1379999999771826),(74066.66800000000512227,445602.2370000000228174),(74066.77300000000104774,445601.21600000001490116),(74067.73299999999289867,445601.31500000000232831),(74067.62900000000081491,445602.31900000001769513),(74070.46400000000721775,445602.61099999997531995),(74070.57499999999708962,445601.54200000001583248),(74071.51300000000628643,445601.63900000002468005),(74071.40799999999580905,445602.65799999999580905),(74072.27300000000104774,445602.74699999997392297),(74072.16599999999743886,445603.78999999997904524),(74071.26700000000710133,445603.6969999999855645),(74071.0059999999939464,445606.231000000028871),(74071.77899999999499414,445607.34999999997671694),(74071.67900000000372529,445608.32900000002700835),(74073.66300000000046566,445609.20000000001164153),(74074.42100000000209548,445608.67599999997764826),(74074.96000000000640284,445609.45699999999487773),(74074.32899999999790452,445609.93900000001303852),(74075.64800000000104774,445612.22700000001350418),(74076.4940000000060536,445611.94199999998090789),(74076.72800000000279397,445612.91399999998975545),(74075.7519999999931315,445613.26799999998183921),(74075.47599999999511056,445615.94599999999627471),(74076.3690000000060536,445616.33799999998882413),(74076.1889999999984866,445617.23200000001816079),(74075.14699999999720603,445616.83299999998416752),(74073.19599999999627471,445618.96000000002095476),(74073.7519999999931315,445619.76500000001396984),(74072.98699999999371357,445620.29300000000512227),(74072.50999999999476131,445619.60200000001350418),(74069.86000000000058208,445620.56199999997625127),(74069.76700000000710133,445621.46700000000419095),(74068.79700000000593718,445621.36700000002747402),(74068.88599999999860302,445620.50300000002607703),(74065.9330000000045402,445620.19900000002235174),(74065.84299999999348074,445621.07500000001164153),(74064.97999999999592546,445620.98599999997531995),(74065.07099999999627471,445620.09700000000884756),(74062.14100000000325963,445619.79399999999441206),(74062.04799999999522697,445620.69500000000698492),(74061.05299999999988358,445620.59299999999348074),(74061.14500000000407454,445619.69799999997485429),(74059.73399999999674037,445619.55200000002514571),(74059.3120000000053551,445623.64199999999254942),(74060.21499999999650754,445623.73499999998603016),(74060.11699999999837019,445624.68800000002374873),(74059.3129999999946449,445624.60499999998137355),(74059.24099999999452848,445625.31099999998696148),(74058.32000000000698492,445625.21600000001490116),(74058.38999999999941792,445624.54100000002654269),(74053.94599999999627471,445624.08199999999487773),(74053.65700000000651926,445626.89000000001396984),(74054.60099999999511056,445626.98800000001210719),(74054.48200000000360887,445628.143999999971129),(74053.52400000000488944,445628.04499999998370185),(74053.41199999999662396,445629.1379999999771826),(74052.39999999999417923,445629.03399999998509884),(74052.51099999999860302,445627.95400000002700835),(74046.24300000000221189,445627.30800000001909211),(74046.1220000000030268,445628.4870000000228174),(74045.08000000000174623,445628.38000000000465661),(74045.19899999999324791,445627.22100000001955777),(74044.29799999999522697,445627.12800000002607703),(74044.42200000000593718,445625.92599999997764826),(74045.34900000000197906,445626.02199999999720603),(74045.74199999999837019,445622.09999999997671694),(74041.92200000000593718,445621.73200000001816079),(74041.8139999999984866,445622.84999999997671694),(74040.81900000000314321,445622.75400000001536682),(74040.92500000000291038,445621.65500000002793968),(74036.96499999999650754,445621.27299999998649582),(74036.86199999999371357,445622.34499999997206032),(74035.79399999999441206,445622.24200000002747402),(74035.89599999999336433,445621.1840000000083819),(74032.09600000000500586,445620.81800000002840534),(74031.98900000000139698,445621.91800000000512227),(74030.92900000000372529,445621.8159999999916181),(74031.03399999999965075,445620.72499999997671694),(74029.6889999999984866,445620.59499999997206032),(74029.47599999999511056,445622.80800000001909211)]
#         conv = ToPointsAndSegments()
#         conv.add_polygon([ring])
#         skel = calc_skel(conv, pause=True, output=True)

#     def test_house1(self):
#         """House 1
#         """
#         ring = [(73293.27300000000104774,445228.5530000000144355),(73302.63499999999476131,445231.07000000000698492),(73301.72400000000197906,445234.67999999999301508),(73305.13199999999778811,445235.53999999997904524),(73305.53399999999965075,445233.94599999999627471),(73313.15300000000570435,445235.86800000001676381),(73311.83400000000256114,445241.09499999997206032),(73299.2440000000060536,445237.91800000000512227),(73299.54399999999441206,445236.73200000001816079),(73291.70799999999871943,445234.75500000000465661),(73293.27300000000104774,445228.5530000000144355)]
#         conv = ToPointsAndSegments()
#         conv.add_polygon([ring])
#         skel = calc_skel(conv, pause=True, output=True)

#     def test_house2(self):
#         ring = [(73220.912, 445241.233), (73218.453, 445250.0), (73218.252, 445250.715), (73215.704, 445250.0), (73214.981, 445249.797), (73214.924, 445250.0), (73214.366, 445251.99), (73208.627, 445250.38), (73208.734, 445250.0), (73211.762, 445239.205), (73216.446, 445240.519), (73216.56, 445240.112), (73217.103, 445240.264), (73217.779, 445239.427), (73220.181, 445240.101), (73220.429, 445241.097), (73220.912, 445241.233)]
#         conv = ToPointsAndSegments()
#         conv.add_polygon([ring])
#         skel = calc_skel(conv, pause=True, output=True)

#     def test_cross(self):
#         ring = [(0,0), (10, 0), (10,-10), (15, -10), (15,0), (25,0), (25,5), (15,5), (15,15), (10,15), (10,5), (0,5), (0,0)]
#         conv = ToPointsAndSegments()
#         conv.add_polygon([ring])
#         skel = calc_skel(conv, pause=True, output=True)
#         # FIXME: are the following numbers correct?
#         assert len(skel.segments()) == 16+12, len(skel.segments())
#         assert len(skel.sk_nodes) == 16, len(skel.sk_nodes)


#     def test_parallelogram(self):
#         """Parallelogram with parallel wavefronts collapsing"""
#         conv = ToPointsAndSegments()
#         conv.add_polygon([[(-15,0), (0,0), (15,25), (0, 25), (-15,0)]])
#         skel = calc_skel(conv, pause=True, output=True)
#         positions = [n.pos for n in skel.sk_nodes]
#         assert (3.6412818342935513, 18.568803057155918) in positions
#         assert len(skel.sk_nodes) == 6, len(skel.sk_nodes)
#         assert len(skel.segments()) == 9, len(skel.segments())



#     def test_multiple_parallel(self):
#         """Parallelogram with parallel wavefronts collapsing"""
#         conv = ToPointsAndSegments()
#         conv.add_polygon([[(0,0), (1,0), (2,0), (3,0), (4,0), (5,0),
#                            (5,1), (4,1), (3,1), (2,1), (1,1), (0, 1), (0,0)
#                            ]])
#         skel = calc_skel(conv, pause=True, output=True)
#         assert len(skel.sk_nodes) == 6, len(skel.sk_nodes)
#         assert len(skel.segments()) == 9, len(skel.segments())


#     def test_multiple_parallel2(self):
#         """Parallelogram with parallel wavefronts collapsing"""
#         conv = ToPointsAndSegments()
#         conv.add_polygon([[(0,0), (2,0), (4,0), (5,0),
#                            (5,1), (3,1), (1,1), (0, 1), (0,0)
#                            ]])
#         skel = calc_skel(conv, pause=True, output=True)
#         assert len(skel.sk_nodes) == 6, len(skel.sk_nodes)
#         assert len(skel.segments()) == 9, len(skel.segments())



# ##############################################################################
# # ...
# ##############################################################################
# 
# # 

#     def test_3tris(self):
#         conv = ToPointsAndSegments()
#         polygons = [
#                     [[(0,0), (1,0), (0.5,-0.5), (0,0)]],
#                     [[(1,0.5), (2,0.5), (1.5,1), (1,0.5)]],
#                     [[(2,0), (3,0), (2.5,-0.5), (2,0)]],
#                     ]
# #         polygon = [[(0., 10.), (1., 8.), (2.,10.), (2.1,3.), (1., 0.), (-.1,3), (0.,10.)]]
#         for polygon in polygons:
#             conv.add_polygon(polygon)
#         skel = calc_skel(conv, pause=True, output=True)

# 
#     def test_3tris_infinte_flips(self):
#         """This configuration seems to lead to infinite series of events
#         """
#         conv = ToPointsAndSegments()
#         polygons = [
#                     [[(0,0), (1,0), (0.5,-0.5), (0,0)]],
#                     [[(1,3), (2,3), (1.5,3.5), (1,3)]],
#                     [[(2,0), (3,0), (2.5,-0.5), (2,0)]],
#                     ]
#         for polygon in polygons:
#             conv.add_polygon(polygon)
#         skel = calc_skel(conv,pause=True, output=True)


if __name__ == "__main__":

    if True:
        import logging
        import sys
        root = logging.getLogger()
        root.setLevel(logging.DEBUG)
        ch = logging.StreamHandler(sys.stdout)
        ch.setLevel(logging.DEBUG)
#         formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        formatter = logging.Formatter('%(asctime)s - %(message)s')
        ch.setFormatter(formatter)
        root.addHandler(ch)

    unittest.main()