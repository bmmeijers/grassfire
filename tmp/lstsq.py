import math
from grassfire.calc import near_zero


def orthogonal_regression(pts):
    """Perform orthogonal regression
    (total least squares, special case of Deming regression)

    Minimizes the sum of the orthogonal distance to the line of best fit
    See: https://en.wikipedia.org/wiki/Deming_regression

    Returns tuple with residuals to best fit line
    
    See also: http://www.dspcsp.com/pubs/euclreg.pdf
    """
    N = len(pts)
    xs = [pt[0] for pt in pts]
    ys = [pt[1] for pt in pts]
    xmean = sum(xs) / N
    ymean = sum(ys) / N
    varx = sum([(x - xmean)**2 for x in xs]) / (N - 1)
    vary = sum([(y - ymean)**2 for y in ys]) / (N - 1)
    if near_zero(varx) and near_zero(vary):
        raise ValueError("points not on a line, but forming a point cluster")
    elif near_zero(varx):
        # spread in x zero -> vertical line
        residuals = [(x - xmean) for x in xs]
    elif near_zero(vary):
        # spread in y zero -> horizontal line
        residuals = [(y - ymean) for y in ys]
    else:
        covxy = sum(a*b for a, b in zip([(x - xmean) for x in xs], 
                                        [(y - ymean) for y in ys])) / (N - 1)
        num = (vary - varx + math.sqrt((vary-varx)**2 + 4.0 * covxy**2))
        den = 2.0 * covxy
        # slope
        if near_zero(den):
            # if points are spread as much in x, as as much in y
            # then we can end up here
            raise ValueError('co-variance zero, division by zero')
        else:
            # slope
            beta1 = num / den
            # intercept
            beta0 = ymean - beta1 * xmean
        # residuals
        residuals = []
        for i in range(N):
            residual = ys[i] - beta0 - xs[i] * beta1
            residuals.append(residual)
    return tuple(residuals)


def are_residuals_near_zero(pts):
    """Returns whether Euclidean regression returns residuals that are
    all near zero (all are very small values).
    """
    residuals = orthogonal_regression(pts)
    return all(map(near_zero, residuals))


def _test1():
    """Create some points on a line that is rotated in n steps around (0, 0)
    Independent from this rotation, the residuals found should be near zero
    """
#     import matplotlib.pyplot as plt
    from math import pi, cos, sin
    n = 800
    PI2 = 2.0*pi
    angle = PI2 / n
    for i in range(n):
        pts = []
        beta = i * angle
        for r in range(1, 10):
            x = r*cos(beta)
            y = r*sin(beta)
            pts.append((x, y))
        are_zero = are_residuals_near_zero(pts)
        # print beta, are_zero
        assert are_zero
#         plt.scatter([pt[0] for pt in pts], [pt[1] for pt in pts], c='red',
#                     marker='s', label = 'input')
#         nxs, nys = residuals(pts)
#         #plt.scatter(xsadj, ysadj, c='green', marker='o', label = 'adjusted')
#         plt.scatter(nxs, nys, label = 'new')
#     #plt.legend()
#     plt.show()


def _test2():
    pts = [(-0.08303192490226027, 0.805999247350045),
           (0.08308419226024952, 0.805999247350045),
           (0.7038322426877964, 0.8059992473500452),
           (-0.7038322426877968, 0.8059992473500452),
           (-0.08303192490226027, 0.805999247350045),
           (0.7038322426877964, 0.8059992473500452),
           (-0.08303192490226027, 0.805999247350045),
           (-0.7038322426877968, 0.8059992473500452),
           (-0.7038322426877968, 0.805999247350045),
           (0.7038322426877964, 0.8059992473500452),
           (0.08308419226024952, 0.805999247350045),
           (0.7038322426877964, 0.805999247350045)]
    # adjustedx, adjustedy = regress(pts)
    assert are_residuals_near_zero(pts) is True

def _test3():
    pts = [(-0.08303192490226027, 0.805999247350045),
           (0.08308419226024952, 0.805999247350045),
           (0.7038322426877964, 0.8059992473500452),
           (-0.7038322426877968, 0.8059992473500452),
           (-0.08303192490226027, 0.805999247350045),
           (0.7038322426877964, 0.8059992473500452),
           (-0.08303192490226027, 0.805999247350045),
           (-0.7038322426877968, 0.8059992473500452),
           (-0.7038322426877968, 0.805999247350045),
           (0.7038322426877964, 0.8059992473500452),
           (0.08308419226024952, 0.805999247350045),
           (0.7038322426877964, 0.805999247350045)]
    # adjustedx, adjustedy = regress(pts)
    assert len(orthogonal_regression(pts)) == 12


def _test4():
    pts = [(-0.5773502691896315, -0.3333333333333352), (-0.5773502691896315, -0.3333333333333364), (-0.5773502691896304, -0.3333333333333331), (-0.5773502691896304, -0.3333333333333331), (-0.5773502691896315, -0.3333333333333364), (-0.5773502691896275, -0.33333333333333653), (-0.5773502691896282, -0.3333333333333296), (-0.5773502691896304, -0.3333333333333331), (-0.5773502691896275, -0.33333333333333653), (0.5773502691896237, 0.33333333333333703), (0.5773502691896298, 0.33333333333333404), (0.5773502691896282, 0.33333333333333703), (0.5773502691896298, 0.33333333333333404), (0.5773502691896315, 0.33333333333333715), (0.5773502691896282, 0.33333333333333703), (0.5773502691896265, -0.3333333333333297), (0.5773502691896283, -0.3333333333333328), (0.57735026918963, -0.3333333333333297), (0.5773502691896261, -0.3333333333333369), (0.5773502691896283, -0.3333333333333328), (0.5773502691896265, -0.3333333333333297), (-0.5773502691896315, -0.3333333333333364), (-0.5773502691896297, -0.3333333333333397), (-0.5773502691896275, -0.33333333333333653), (1.1547005383792448, -3.469446951953614e-15), (0.8981004187394133, -2.040548799889688e-16), (0.898100418739415, -3.4416913763379853e-15), (-0.5773502691896304, 0.3333333333333336), (-0.5773502691896284, 0.33333333333333703), (-0.5773502691896322, 0.3333333333333371), (-1.0824674490095276e-15, -0.6666666666666702), (-5.329070518200751e-15, -0.6666666666666701), (-2.9467169445259364e-15, -0.6666666666666736), (-0.8981004187394143, 5.859510407743961e-17), (-1.1547005383792461, -3.2751579226442118e-15), (-0.8981004187394164, -3.2751579226442118e-15), (0.5773502691896276, 0.33333333333333015), (0.5773502691896298, 0.33333333333333404), (0.5773502691896237, 0.33333333333333703), (-0.5773502691896204, 0.9999999999999966), (-0.44905020936970713, 0.7777777777777743), (-0.4490502093697053, 0.7777777777777778), (-0.5773502691896283, 0.33333333333333015), (-0.5773502691896304, 0.3333333333333336), (-0.5773502691896322, 0.33333333333333015), (5.995204332975845e-15, 0.6666666666666701), (2.0261570199409107e-15, 0.6666666666666702), (3.9968028886505635e-15, 0.6666666666666666), (-1.0824674490095276e-15, -0.6666666666666702), (3.2751579226442118e-15, -0.6666666666666698), (1.304512053934559e-15, -0.6666666666666664), (-0.5773502691896284, 0.33333333333333703), (-0.5773502691896304, 0.3333333333333336), (-0.5773502691896283, 0.33333333333333015), (-2.3746436915593783e-16, 0.6666666666666736), (-2.248201624865942e-15, 0.6666666666666702), (2.0261570199409107e-15, 0.6666666666666702), (0.4490502093697072, 0.7777777777777743), (0.5773502691896202, 0.9999999999999964), (0.4490502093697051, 0.7777777777777778), (0.5773502691896237, 0.33333333333333703), (0.38490017945975064, 0.33333333333333703), (0.5773502691896276, 0.33333333333333015), (-0.5773502691896282, -0.3333333333333296), (-0.5773502691896275, -0.33333333333333653), (-0.384900179459754, -0.3333333333333365), (-0.5773502691896283, 0.33333333333333015), (-0.5773502691896242, 0.33333333333333703), (-0.5773502691896284, 0.33333333333333703), (3.9968028886505635e-15, 0.6666666666666666), (2.0261570199409107e-15, 0.6666666666666702), (-2.248201624865942e-15, 0.6666666666666702), (-0.5773502691896324, -0.3333333333333296), (-0.5773502691896304, -0.3333333333333331), (-0.5773502691896282, -0.3333333333333296), (-0.4811252243246915, 0.16666666666666527), (-0.5773502691896242, 0.33333333333333703), (-0.5773502691896283, 0.33333333333333015), (-5.329070518200751e-15, -0.6666666666666701), (-7.382983113757291e-15, -0.6666666666666664), (-9.43689570931383e-15, -0.66666666666667), (-0.5773502691896295, -0.9999999999999933), (-0.577350269189623, -0.9999999999999963), (-0.4490502093697104, -0.7777777777777739), (-1.1547005383792461, 3.858025010572419e-15), (-1.2303526253365504e-15, 1.5655879370690684e-16), (-1.1547005383792461, -3.2751579226442118e-15), (-0.8981004187394143, 5.859510407743961e-17), (-1.1547005383792461, 3.858025010572419e-15), (-1.1547005383792461, -3.2751579226442118e-15), (0.5773502691896276, 0.33333333333333015), (0.5773502691896318, 0.3333333333333304), (0.5773502691896298, 0.33333333333333404), (3.9968028886505635e-15, 0.6666666666666666), (-4.3298697960381105e-15, 0.6666666666666666), (-0.09622504486494107, 0.5000000000000018), (-0.577350269189623, -0.9999999999999963), (-0.5773502691896295, -0.9999999999999933), (-1.2303526253365504e-15, 1.5655879370690684e-16), (-1.2303526253365504e-15, 1.5655879370690684e-16), (1.154700538379245, 3.747002708109903e-15), (1.1547005383792448, -3.469446951953614e-15), (-2.248201624865942e-15, 0.6666666666666702), (-4.3298697960381105e-15, 0.6666666666666666), (3.9968028886505635e-15, 0.6666666666666666), (1.1547005383792448, -3.469446951953614e-15), (1.154700538379245, 3.747002708109903e-15), (0.8981004187394133, -2.040548799889688e-16), (0.5773502691896265, -0.3333333333333297), (0.5773502691896211, -0.33333333333333715), (0.5773502691896261, -0.3333333333333369), (-4.3298697960381105e-15, 0.6666666666666666), (-2.248201624865942e-15, 0.6666666666666702), (-6.494804694057166e-15, 0.6666666666666703), (-0.5773502691896265, 0.3333333333333408), (-0.5773502691896284, 0.33333333333333703), (-0.5773502691896242, 0.33333333333333703), (-7.382983113757291e-15, -0.6666666666666664), (-5.329070518200751e-15, -0.6666666666666701), (-1.0824674490095276e-15, -0.6666666666666702), (1.304512053934559e-15, -0.6666666666666664), (-7.382983113757291e-15, -0.6666666666666664), (-1.0824674490095276e-15, -0.6666666666666702), (-0.4490502093697104, -0.7777777777777739), (-0.577350269189623, -0.9999999999999963), (-0.4490502093697084, -0.7777777777777778), (-0.5773502691896295, -0.9999999999999933), (-0.4490502093697104, -0.7777777777777739), (-0.4490502093697147, -0.777777777777774), (-1.1547005383792461, 3.858025010572419e-15), (-0.8981004187394143, 5.859510407743961e-17), (-0.8981004187394164, 3.83026943495679e-15), (-7.382983113757291e-15, -0.6666666666666664), (1.304512053934559e-15, -0.6666666666666664), (0.09622504486493794, -0.5000000000000018), (0.577350269189626, 0.3333333333333408), (0.5773502691896237, 0.33333333333333703), (0.5773502691896282, 0.33333333333333703), (-0.5773502691896204, 0.9999999999999966), (-0.5773502691896267, 0.9999999999999921), (-0.44905020936970713, 0.7777777777777743), (-1.2303526253365504e-15, 1.5655879370690684e-16), (-0.5773502691896267, 0.9999999999999921), (-0.5773502691896204, 0.9999999999999966), (0.5773502691896162, -0.9999999999999967), (-1.2303526253365504e-15, 1.5655879370690684e-16), (0.5773502691896228, -0.9999999999999929), (0.44905020936970397, -0.7777777777777742), (0.5773502691896162, -0.9999999999999967), (0.5773502691896228, -0.9999999999999929), (0.5773502691896162, -0.9999999999999967), (0.44905020936970397, -0.7777777777777742), (0.4490502093697021, -0.7777777777777782), (0.5773502691896202, 0.9999999999999964), (0.5773502691896271, 0.9999999999999926), (-1.2303526253365504e-15, 1.5655879370690684e-16), (0.8981004187394133, -2.040548799889688e-16), (1.154700538379245, 3.747002708109903e-15), (0.8981004187394155, 3.83026943495679e-15), (0.5773502691896283, -0.3333333333333328), (0.5773502691896261, -0.3333333333333369), (0.5773502691896306, -0.3333333333333367), (0.4490502093697072, 0.7777777777777743), (0.5773502691896271, 0.9999999999999926), (0.5773502691896202, 0.9999999999999964), (-0.44905020936970713, 0.7777777777777743), (-0.5773502691896267, 0.9999999999999921), (-0.44905020936971174, 0.7777777777777745), (0.5773502691896271, 0.9999999999999926), (0.4490502093697072, 0.7777777777777743), (0.44905020936971185, 0.7777777777777745), (0.44905020936970397, -0.7777777777777742), (0.5773502691896228, -0.9999999999999929), (0.44905020936970863, -0.7777777777777743), (0.48112522432469007, -0.16666666666666446), (0.5773502691896211, -0.33333333333333715), (0.5773502691896265, -0.3333333333333297), (0.5773502691896261, -0.3333333333333369), (0.5773502691896211, -0.33333333333333715), (0.5773502691896236, -0.33333333333334136)]
    for pt in pts:
        print "POINT({0[0]} {0[1]})".format(pt)
    orthogonal_regression(pts)


if __name__ == "__main__":
#     _test1()
#     _test2()
#     _test3()
    _test4()